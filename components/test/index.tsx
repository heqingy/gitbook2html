import * as React from 'react'
import * as ReactDOM from 'react-dom'

// MarkDown render parts
import { Document } from '@parts/Document.tsx';
import { Block } from '@parts/block/index.tsx';
import { Text } from '@parts/Text.tsx';
import { Inline } from '@parts/Inline.tsx';
import { Sider } from '@parts/Sider.tsx';

const App = () => {
    return <Sider><Document type=""  key={"098d3b302a0847169969f848d38d66a7"} ><Block type="paragraph"   key={"d3f6b05a4f44438bbe7ecf1c7706e7f5"} ><Text key={"93ad6de8bb3b408e94324e429a5c9c00"} >Updated Sep 14, 2019</Text></Block><Block type="paragraph"   key={"c76cdbf7f3234039a63f72cf58cdec9a"} ><Text key={"95595b2ee5b2428192d11e26328f4b4c"} >Graph algorithms are functions for measuring characteristics of graphs, vertices, or relationships. Graph algorithms can provide insights into the role or relevance of individual entities in a graph. For example: How centrally located is this vertex?  How much influence does this vertex exert over the others?</Text></Block><Block type="paragraph"   key={"a72aa98ac58c4933835b1723eb6c2da1"} ><Text key={"be5d1900057544ea9fc9a4bf930fd070"} >Some graph algorithms measure or identify global characteristics: What are the natural community groupings in the graph?  What is the density of connections? </Text></Block><Block type="heading-1"   key={"33e78697c74f4bc59b28cdf3a798dce3"} ><Text key={"e1131072740142859ae5825863d283fa"} >Using the GSQL Graph Algorithm Library</Text></Block><Block type="paragraph"   key={"b3a6909f41524acc865815afd659591b"} ><Text key={"7b5db9e44dfe479db190d311aeb881e0"} >The GSQL Graph Algorithm Library is a collection of expertly written GSQL queries, each of which implements a standard graph algorithm. Each algorithm is ready to be installed and used, either as a stand-alone query or as a building block of a larger analytics application.</Text></Block><Block type="paragraph"   key={"fbb9d5c0dd5e4862877dfcac703ac078"} ><Text key={"25056fefd1ab4baba2422e7abde773a6"} >GSQL running on the TigerGraph platform is particularly well-suited for graph algorithms for the several reasons:</Text></Block><Block type="list-unordered"   key={"c72eabf9db2c4893ad460e2389221de7"} ><Block type="list-item"   key={"2c40b2d260894af9bb42373410f5275d"} ><Block type="paragraph"   key={"43f4159e7d4547f1970b0e30bd079901"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"be64f71d3f3a43388e7bd6b9ec0210f4"} >Turing-complete</Text><Text key={"be64f71d3f3a43388e7bd6b9ec0210f4"} > with full support for imperative and procedural programming, ideal for algorithmic computation.</Text></Block></Block><Block type="list-item"   key={"84dc4e829e0047cf819d9726a69f3f0c"} ><Block type="paragraph"   key={"76e0cb54d96840579e30bb6118dfc596"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"b0b5830029674968b75abdba2265dc47"} >Parallel and Distributed Processing, </Text><Text key={"b0b5830029674968b75abdba2265dc47"} >enabling computations on larger graphs.</Text></Block></Block><Block type="list-item"   key={"b2cdcd10ef304dc48ab6609a4fe624e8"} ><Block type="paragraph"   key={"8b8b99dae26e4fe58f87479f86e0b51d"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"b9dd11367409428e8e3feb55e736baee"} >User-Extensible</Text><Text key={"b9dd11367409428e8e3feb55e736baee"} >. Because the algorithms are written in standard GSQL and compiled by the user,  they are easy to modify and customize.</Text></Block></Block><Block type="list-item"   key={"932dfae44ec84a94a95d3090b13c5c73"} ><Block type="paragraph"   key={"bb15d9002a5c47d58c396b90a166ae43"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"f880fecd576e439392a2bb6677f22ee1"} >Open-Source</Text><Text key={"f880fecd576e439392a2bb6677f22ee1"} >. Users can study the GSQL implementations to learn by example, and they can develop and submit additions to the library.</Text></Block></Block></Block><Block type="heading-2"   key={"befec518c6c74404a474366dd8ac3097"} ><Text key={"baed2cece579473b8a59345281c3beb2"} >Library Structure</Text></Block><Block type="paragraph"   key={"fd8d74d2d97849f99a557ca2249aab4d"} ><Text key={"09d6148596e646d182c85b2809772975"} >You can download the library from github:
</Text><Inline type="link"  data={{"href":"https://github.com/tigergraph/gsql-graph-algorithms"}}  key={"25029944b7974731bc088a0a76a53004"} ><Text key={"8d043efcafd443c98871082054ae3510"} >https://github.com/tigergraph/gsql-graph-algorithms</Text></Inline><Text key={"fe05f5de726343a4b2216308cd4708db"} ></Text></Block><Block type="paragraph"   key={"1a291d99fe764697a462359b936b8854"} ><Text key={"1032086a85864224836047fcc41b56de"} >The library contains two main sections: algorithms and tests. The algorithms folder contains template algorithms and scripts to help you customize and install them. The tests folder contains small sample graphs that you can use to experiment with the algorithms. In this document, we use the test graphs to show you the expected result for each algorithm. The graphs are small enough that you can manually calculate and sometimes intuitively see what the answers should be.</Text></Block><Block type="heading-2"   key={"cbaba5488da040ecb6de3cd1ee05618d"} ><Text key={"67956f75fdaa4f5ea5193fb2a8f7b063"} >Installing an Algorithm</Text></Block><Block type="paragraph"   key={"8309aac607674316bb4fdc2af80197bb"} ><Text key={"5c10361bb8f44256b3596c18fada64d5"} >Remember that GSQL graph algorithms are simply GSQL queries.  However, since we do not know what vertices or edges you want to analyze, or how you want to receive output, the algorithms are in a template format. You need to run a script to personalize your algorithm and then to install it.</Text></Block><Block type="hint"  data={{"style":"info"}}  key={"a0fdf7c148c94e97840e5d77e61b5e2d"} ><Block type="paragraph"   key={"f02d0d0071ee4c4f96c773f27170e5c3"} ><Text key={"8636e9b1f3e94b9bbcb0919806d9b09e"} >Make sure that the install.sh is owned by the tigergraph user.</Text></Block></Block><Block type="list-ordered"   key={"86443ebd836c43c093bb0a303891be06"} ><Block type="list-item"   key={"d73ebe8dff95446db4d0f03ab5ee5c99"} ><Block type="paragraph"   key={"9e632813ae8a4f5fad6e6e5c05a90d7d"} ><Text key={"3fb9141974354c7b845b2504a6bbd756"} >Within the Algorithms folder is a script </Text><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"3fb9141974354c7b845b2504a6bbd756"} >install.sh</Text><Text key={"3fb9141974354c7b845b2504a6bbd756"} >. When you run the script, it will first ask you which graph schema you wish to work on. (The TigerGraph platform supports multiple concurrent graphs.) </Text></Block></Block><Block type="list-item"   key={"48c724c67d8f463a816e8786f0c5e924"} ><Block type="paragraph"   key={"8d7c2b391cc5454a950ebe549030980a"} ><Text key={"2f6dbcb8c3db40ec9c0ca8b16bc6ea2f"} >It then asks you to choose from a menu of available algorithms.</Text></Block></Block><Block type="list-item"   key={"b98167aa63094d9999f926a9f3417113"} ><Block type="paragraph"   key={"2c1eafc10fd9405988fe4abfd71a55e2"} ><Text key={"ef2b8e00459f42b29187a4699b2983b5"} >After knowing your graph schema and your algorithm, the installer will ask you some questions for that particular algorithm:</Text></Block><Block type="list-ordered"   key={"f1b1940ea8b54ca3910317882d3e0aaf"} ><Block type="list-item"   key={"431dc67f6f7946d8bbf5c98efcfb75e0"} ><Block type="paragraph"   key={"392ea94eb11c4091a06ce52743b20969"} ><Text key={"45c4292fa9db43dca4c5c5444734a845"} >the installer will guide you in selecting appropriate vertex types and edges types.

Note this does not have to be all the vertex or edge types in your graph. For example, you may have a social graph with three categories of persons and five types of relationships. You might decide to compute PageRank using Member and Guest vertices and Recommended edges.
</Text></Block></Block><Block type="list-item"   key={"424c5b7e0a5447bfa3edb2f030385af9"} ><Block type="paragraph"   key={"013e078049b0440fb4577624efdf5ba9"} ><Text key={"3fe0a3b9510e46d496a9be9db8f02c91"} >Some algorithms use edge weights as input information (such as Shortest Path where each edge has a weight meaning the "length" of that edge.  The installer will ask for the name of that edge attribute.</Text></Block></Block></Block></Block><Block type="list-item"   key={"967fa867dedf4905acf21b4de38ad564"} ><Block type="paragraph"   key={"b7c5ac08fa9f42269dfd7c6e6da123fc"} ><Text key={"144c3847684c49c68668593d79ad326a"} >Single Node Mode or Distributed Mode? Queries which will analyze the entire graph (such PageRank and Community Detection) will run better in Distributed Mode, if you have a cluster of machines.</Text></Block></Block><Block type="list-item"   key={"70df9c36573147c4a0029be48ce1963b"} ><Block type="paragraph"   key={"2312479a5c254d629ed5bd597af7d39e"} ><Text key={"baae010b8a3b4e23be82f19fb6447206"} >It will then ask you what type of output you would like. It will proceed to create up to three versions of your algorithm, based on the three ways of receiving the algorithm's output:</Text></Block><Block type="list-ordered"   key={"038bec4a8fdf4c25bc2c732a47af3c7f"} ><Block type="list-item"   key={"130cb47b89264ab0ace27079551d6b71"} ><Block type="paragraph"   key={"8ffa34d4770547eba1d439a878c029e6"} ><Text key={"d6086ff293134508bf3fc36c35300d3e"} >Stream the output in JSON format, the default behavior for most GSQL queries.</Text></Block></Block><Block type="list-item"   key={"a4a441a3e0f348459f83cb5cb1ecca04"} ><Block type="paragraph"   key={"63c5e0d9806140d2b992d97d9f43ae6c"} ><Text key={"fe0c85ce831243518de942ffc48fe831"} >Save the output value(s) in CSV format to a file. For some algorithms, this option will add an input parameter to the query, to let the user specify how many total values to output.</Text></Block></Block><Block type="list-item"   key={"cd7d6526b82d480f92c3c0be231dcfdf"} ><Block type="paragraph"   key={"052179d75a7d4862984b06ed32f5078a"} ><Text key={"ec7d7a1883db450db60c21b430a48359"} >Store the results as vertex or edge attribute values. The attributes must already exist in the graph schema, and the installer will ask you which attributes to use.
</Text></Block></Block></Block></Block><Block type="list-item"   key={"d4c212da1ff9459eba3091a6c58c39cb"} ><Block type="paragraph"   key={"6f7d346446a94844aa3bcb273fc662a5"} ><Text key={"796e3c59bd3c436bbf4e5e9a07984079"} >After creating queries for one algorithm, the installer will loop back to let you choose another algorithm (returning to step 2 above).</Text></Block></Block><Block type="list-item"   key={"a917f227465b4220998c098ebcd6f2c0"} ><Block type="paragraph"   key={"4d7acb88ad2f456f83ef0762734757eb"} ><Text key={"a91a5fbeed3e47a99282a6b2043be70a"} >If you choose to exit, the installer makes a last request: Do you want to install your queries?  Installation is when the code is compiled and bound into the query engine.  It takes a few minutes, so it is best to create all your personalized queries at once and then install them as a group.</Text></Block></Block></Block><Block type="paragraph"   key={"1bff4b07c8744b05977a0c8d6afb1be0"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"1dfae6123bde485698878179fcd0ae1b"} >Example:</Text></Block><Block type="code"  data={{"syntax":"text"}}  key={"6f3c40e2efdb4fc49da2873d3e68ff92"} ><Block type="code-line"   key={"a8a489ce09024b0388b38f0d4127e6f5"} ><Text key={"54d638905c0a400e9f11648ce6c262c7"} >$ bash install.sh </Text></Block><Block type="code-line"   key={"7a25bfcb06a04a18b335ec4df1676c2f"} ><Text key={"470d99b37522441ca6bbfb254ad0d8d5"} >*** GSQL Graph Algorithm Installer ***</Text></Block><Block type="code-line"   key={"e4e60f905e1c4df3b50f09b8265438cf"} ><Text key={"68f41fa5926047479474f1218806685c"} >Available graphs:</Text></Block><Block type="code-line"   key={"d13e1fbdcdc247e7889a33edf279a1be"} ><Text key={"12954b368d314eaf98fdc1dc7769b548"} >  - Graph social(Person:v, Friend:e, Also_Friend:e, Coworker:e)</Text></Block><Block type="code-line"   key={"44e54ebfb79149dd911e92991b6bcfbf"} ><Text key={"5104aa05cabc489e9fe64354711aefc8"} >Graph name? social</Text></Block><Block type="code-line"   key={"b4081c1d2b4d4c678597f26b68eda461"} ><Text key={"f59806165e94494390de1a772de9bb04"} ></Text></Block><Block type="code-line"   key={"75befc86997c4aeb8738a6e985d8ee00"} ><Text key={"ba2b0740bbc24cbfb4edbc0be4fb82a6"} >Please enter the number of the algorithm to install:</Text></Block><Block type="code-line"   key={"a833e25608b543ce975dd97fd24bd28a"} ><Text key={"6abc296c48c245ec9b1f6ee877b80e18"} > 1) EXIT</Text></Block><Block type="code-line"   key={"0dfcd32549824c729f94b8e85a65474e"} ><Text key={"f16dbe48107f4a5aa3b924b8faabd17d"} > 2) Closeness Centrality</Text></Block><Block type="code-line"   key={"5beddd26499a42a2965fe6bf0e2aa351"} ><Text key={"ebf59711419a44729a85d717d82828f4"} > 3) Connected Components</Text></Block><Block type="code-line"   key={"d3773126ea2944568afa92ceb12db5b4"} ><Text key={"e187d0a8b659457fa099cdde835cbed7"} > 4) Strongly Connected Components</Text></Block><Block type="code-line"   key={"c9e1689d951f476e955ae3e44c8ca531"} ><Text key={"63d10a9fefde4db7a21bcd9ea074313d"} > 5) Label Propagation</Text></Block><Block type="code-line"   key={"e877e31ded0d46fcad9ad93b19e98cfc"} ><Text key={"15589b0903c045d5b6e933dcf6161219"} > 6) Louvain Method with Parallelism and Refinement</Text></Block><Block type="code-line"   key={"bba6184bbedb4904aa724f14013fd0e3"} ><Text key={"0ae2629050094b76b82d6a7d06b1500c"} > 7) PageRank</Text></Block><Block type="code-line"   key={"abeddaad84c6435eacef670a3a1ef077"} ><Text key={"fc19cc744fef4f9d85e0b993e05b51d4"} > 8) Weighted PageRank</Text></Block><Block type="code-line"   key={"325756e6e264409993b243b56d108284"} ><Text key={"674aac908e444c4eb4da0c3020a704e8"} > 9) Personalized PageRank</Text></Block><Block type="code-line"   key={"bc52a42ef4ac414c92f7a2f7fdd65582"} ><Text key={"2a4a9a86835b446a8def894f59d3cf18"} >10) Shortest Path, Single-Source, No Weight</Text></Block><Block type="code-line"   key={"4b55e07307de4adfb7043549c0f579a5"} ><Text key={"a0ea914d88914a4e9bfe6d4ed6dcb0f5"} >11) Shortest Path, Single-Source, Positive Weight</Text></Block><Block type="code-line"   key={"a009cf85c29d404499beb0f2c65c9530"} ><Text key={"b395322e81804fc7b52ebfce9e07f557"} >12) Shortest Path, Single-Source, Any Weight</Text></Block><Block type="code-line"   key={"4bb70b2c620843f281bbeb73a3fd084a"} ><Text key={"335342e9ad884fec94be67ee0767a527"} >13) Minimal Spanning Tree (MST)</Text></Block><Block type="code-line"   key={"2a949c999c274934a2b9d68b4f71b7b4"} ><Text key={"4e91e56a1b764c8abc3ba2704dfab8fd"} >14) Cycle Detection</Text></Block><Block type="code-line"   key={"f1830572a83745d2a842ce8ead405265"} ><Text key={"440c89be876640f98a097fb4e334706b"} >15) Triangle Counting(minimal memory)</Text></Block><Block type="code-line"   key={"51ceef6613be497787bd792c505717b9"} ><Text key={"6cfa2868e1cf407e8b6b883f922e0117"} >16) Triangle Counting(fast, more memory)</Text></Block><Block type="code-line"   key={"b70955875a6d4a568f3740066ed2344a"} ><Text key={"ec6d91ce25f640c087e401b6235271bb"} >17) Cosine Neighbor Similarity (single vertex)</Text></Block><Block type="code-line"   key={"82db4ed7c9fc41e39b9256713cf6ff7c"} ><Text key={"867862707a204861b4dcdc8a9171385e"} >18) Cosine Neighbor Similarity (all vertices)</Text></Block><Block type="code-line"   key={"caf466410a684757ba616e191caf3ba1"} ><Text key={"d2f213a15a70498097d5346fb5afdc64"} >19) Jaccard Neighbor Similarity (single vertex)</Text></Block><Block type="code-line"   key={"fb783fcf06a04b05b13ce88f638a7cdc"} ><Text key={"43425952f82c44a48918e7e412cc0abb"} >20) Jaccard Neighbor Similarity (all vertices)</Text></Block><Block type="code-line"   key={"b5a591aca1a04ef099c8d154e7e6227a"} ><Text key={"c66fa79b5e45461397b7d5293a82f57b"} >21) k-Nearest Neighbors (Cosine Neighbor Similarity, single vertex)</Text></Block><Block type="code-line"   key={"2500428617df479ab535dda304a082c6"} ><Text key={"7f0d469d61894f948411b57ffb0d23da"} >22) k-Nearest Neighbors (Cosine Neighbor Similarity, batch)</Text></Block><Block type="code-line"   key={"6c964246b065428dba87f135a0e8f1cf"} ><Text key={"cae86e264c024fa692d99bc0e7447ef0"} >23) k-Nearest Neighbors Cross Validation (Cosine Neighbor Similarity)</Text></Block><Block type="code-line"   key={"bb9eb54d81574f83b9cf149a3adacd45"} ><Text key={"2cb386043184439582d895f54bd35631"} >#? 7</Text></Block><Block type="code-line"   key={"dc5ebe284104425b83267e9231ab5d8b"} ><Text key={"28389db833894de0838923b3d4384970"} >  pageRank() works on directed edges</Text></Block><Block type="code-line"   key={"49da942fd5744881812f0a1ad58e33b3"} ><Text key={"0c99255baca846cb94aad3308f58a80d"} ></Text></Block><Block type="code-line"   key={"b96bb7f5ab044d9e84b9452b760c0320"} ><Text key={"39c74a38846c4e7483584648c69640bd"} >Available vertex and edge types:</Text></Block><Block type="code-line"   key={"956628d3dd7c46ecbac7ecadecb9e6d2"} ><Text key={"5b70c11b1a9047469f91e26f1f9dc24b"} >  - VERTEX Person(PRIMARY_ID id STRING, name STRING, score FLOAT, tag STRING) WITH STATS="OUTDEGREE_BY_EDGETYPE"</Text></Block><Block type="code-line"   key={"5210ca4b6a624cbdb4008e9565c418ec"} ><Text key={"fd36db17a0bf46df9ba2ad8056d16bbe"} >  - DIRECTED EDGE Friend(FROM Person, TO Person, weight FLOAT, tag STRING) WITH REVERSE_EDGE="Also_Friend"</Text></Block><Block type="code-line"   key={"bfc4ea2d6ca741529a873a7d2e6130dc"} ><Text key={"d3c38b0285c14c5a8bb1d18da7f1437c"} >  - DIRECTED EDGE Also_Friend(FROM Person, TO Person, weight FLOAT, tag STRING) WITH REVERSE_EDGE="Friend"</Text></Block><Block type="code-line"   key={"f1ffc787d35b49028ad38bfccf8f6e14"} ><Text key={"bb275b81b3f048e4a3a52d9fdc4733b8"} >  - UNDIRECTED EDGE Coworker(FROM Person, TO Person, weight FLOAT, tag STRING)</Text></Block><Block type="code-line"   key={"5d1a208d4c9e44a0a8e6cd0d451a913d"} ><Text key={"aa69d7e552e5436995b0e4c86c80cf78"} ></Text></Block><Block type="code-line"   key={"8b22d4ee3c7c4229a17352629cbb92bf"} ><Text key={"d63441ea20b344db976538e0be4601a8"} >Please enter the vertex type(s) and edge type(s) for running PageRank.</Text></Block><Block type="code-line"   key={"a5cfad8d86d148cab61ab9b16bbc2890"} ><Text key={"b0ab2d40ac6a41b98ba2236523c224e5"} >   Use commas to separate multiple types [ex: type1, type2]</Text></Block><Block type="code-line"   key={"70824a02a3d946e6bb8bf9f6f77591bd"} ><Text key={"75d53966d6854a5dbbf31e5ea38048ef"} >   Leaving this blank will select all available types</Text></Block><Block type="code-line"   key={"94646b94a92440c89477fc4fc1f844a3"} ><Text key={"6d2b3a473b784387a5fb96154f597ad4"} > Similarity algorithms only take single vertex type</Text></Block><Block type="code-line"   key={"6060e41c0f884a6088648f78f56e4b9a"} ><Text key={"723c58b3ec384d14a3341b2e1653098b"} ></Text></Block><Block type="code-line"   key={"35ad130e13fa4d4eae38120055fecd28"} ><Text key={"199a299f0132410ab9a953feb186f6c1"} >Vertex types: Person</Text></Block><Block type="code-line"   key={"684ef4fecb294d0db9c5a315e1e3eb5c"} ><Text key={"e1a09a2c142448b5a094fa10c8d56e2d"} >Edge types: Friend</Text></Block><Block type="code-line"   key={"525fe48b8efa405eac02d9819b0bd22b"} ><Text key={"ef6bad33273648b7b0b8a09c6e52427b"} >The query pageRank is dropped.</Text></Block><Block type="code-line"   key={"5448c2adb38d4c34ad92ec4ec0c84598"} ><Text key={"1bf13fd5d32842f0afacccce5f0b819a"} >The query pageRank_file is dropped.</Text></Block><Block type="code-line"   key={"f72772f1c21142a4b1f3e6858f711859"} ><Text key={"b64b57be90ce4404a6a99dc8fd9c2675"} >The query pageRank_attr is dropped.</Text></Block><Block type="code-line"   key={"d6c43bc0a41048b0a0bdc107e39664d1"} ><Text key={"2bfc3035867548598ea3ae077133aa17"} ></Text></Block><Block type="code-line"   key={"d98c5bca66c240af8c30657a6ea7fa38"} ><Text key={"dc11b10b999547d4b3a849fedd47e8fe"} >Please choose query mode:</Text></Block><Block type="code-line"   key={"0fd80eaca8b24d1d8202962dba92b645"} ><Text key={"639b56b462bb4530b0ef406c254c67fa"} >1) Single Node Mode</Text></Block><Block type="code-line"   key={"22ae28c5e62d4d81a4989a738ef8469c"} ><Text key={"9de34365c3234139970fd9b3f0e0969a"} >2) Distributed Mode</Text></Block><Block type="code-line"   key={"38da9f64528349029747b64676e56113"} ><Text key={"d21411f3dff84fac9a75e5ad9f128c7c"} >#? 1</Text></Block><Block type="code-line"   key={"7a9934c898b84430a38d2dbdf1c7310b"} ><Text key={"2997769405bf4e2c84a9cc6e4c820aaf"} ></Text></Block><Block type="code-line"   key={"c0a4fa907f254a1eac50b08406e1dfa3"} ><Text key={"5dd37055fd96400d862aeb29ee3b9580"} >Please choose a way to show result:</Text></Block><Block type="code-line"   key={"e10c52711a3a410998634ac3dcfc05f4"} ><Text key={"17b7f9e7e3604499979399db61eccf10"} >1) Show JSON result		  3) Save to Attribute/Insert Edge</Text></Block><Block type="code-line"   key={"5dcaec9c3830447d9d4abcbfd0015658"} ><Text key={"c6b7282f66554ddaa194d263e508fe88"} >2) Write to File		  4) All of the above</Text></Block><Block type="code-line"   key={"f2039abb6d3141d7a116bc4256cab7a3"} ><Text key={"767eb29b2f554424bc97c929a31e60ba"} >#? 4</Text></Block><Block type="code-line"   key={"3bf8958f32194147871bb504201c9858"} ><Text key={"d1683c9ac8e14a1c9ce428fae0acd5ef"} ></Text></Block><Block type="code-line"   key={"c308c7af716448f98bca9b69049620cb"} ><Text key={"e0938abdc23746eeb690981cd6536fcf"} >gsql -g social ./templates/pageRank.gsql</Text></Block><Block type="code-line"   key={"0ed7159df1254a35a7acfecaa3c06221"} ><Text key={"78f4f26610cf425797c23fe0f2671d4d"} >The query pageRank has been added!</Text></Block><Block type="code-line"   key={"b1a124549bfd4ee58b7b36765165041c"} ><Text key={"314634fdfbe9471fb7a20a8d3f112a61"} ></Text></Block><Block type="code-line"   key={"cda7c882da754c7eb08c54790171efee"} ><Text key={"9478379dcdc54525ba6fc243f76824d8"} >gsql -g social ./templates/pageRank_file.gsql</Text></Block><Block type="code-line"   key={"7618d1463f5e45328117a11c57feb592"} ><Text key={"e1cb449fd9c84be285bb866d68229386"} >The query pageRank_file has been added!</Text></Block><Block type="code-line"   key={"31c1b72889f546128c5b632c275db89f"} ><Text key={"8f3de263bbc34dcdb5576ea4f7a90e15"} ></Text></Block><Block type="code-line"   key={"15f24deb88ca4fc9b07ec0180f64475c"} ><Text key={"7fcfced685164e69bfca95200e45eeef"} >If your graph schema has appropriate vertex or edge attributes,</Text></Block><Block type="code-line"   key={"f225e9fa560346909928ca80fcb29521"} ><Text key={"7e5621ad69b14654af817399353d3f40"} > you can update the graph with your results.</Text></Block><Block type="code-line"   key={"9abcb334336d48b184dedc6382f23221"} ><Text key={"620b97ea39ca4813bb35d89d617753be"} >Do you want to update the graph [yn]? y</Text></Block><Block type="code-line"   key={"3c824ba942fc457c94dd11742c3258bc"} ><Text key={"1f002f37045244959fd90777c38635f6"} >Vertex attribute to store FLOAT result (e.g. pageRank): score</Text></Block><Block type="code-line"   key={"509c5947f1834f2ab5e7669251f95ed4"} ><Text key={"1d77500a89c8449f84344499e9f8d20e"} >gsql -g social ./templates/pageRank_attr.gsql</Text></Block><Block type="code-line"   key={"8e2dbfc3635541f1b26cbd2290487b8b"} ><Text key={"c995cf491b78471a89371d9699602f4a"} >The query pageRank_attr has been added!</Text></Block><Block type="code-line"   key={"0605039bad2043ea872cb185594d87a8"} ><Text key={"5a5652a5767b442c97b0732ad0e6e8ce"} >Created the following algorithms:</Text></Block><Block type="code-line"   key={"a6bda3a4da0e4c76a9a3cc8e02a5731b"} ><Text key={"a154bd96be1b409895c9f1c20c044b1b"} >  - pageRank(float maxChange, int maxIter, float damping, bool display, int outputLimit) </Text></Block><Block type="code-line"   key={"cf9a869e5cae49d5b20036982290ad2d"} ><Text key={"b1dbae56ffef40db856bc99a8c662067"} >  - pageRank_attr(float maxChange, int maxIter, float damping, bool display) </Text></Block><Block type="code-line"   key={"065454aeaebe4a5cb832c639e9c7158d"} ><Text key={"ae10a06557a047cda29ddc3ad4a014d5"} >  - pageRank_file(float maxChange, int maxIter, float damping, bool display, file f) </Text></Block><Block type="code-line"   key={"910d5a8d1866479eb029b11b06c6034f"} ><Text key={"90ff03cd87ef41fd844ae7f976a469ae"} ></Text></Block><Block type="code-line"   key={"d29bdaee056246ee8ba0a9949b06d10e"} ><Text key={"da00fd57f7fd418a82f97fbc63c34d68"} ></Text></Block><Block type="code-line"   key={"46c865d236e64f60b38dc15432a64e89"} ><Text key={"9f36989ff9a64b5a93cf8919cee2adff"} >Please enter the number of the algorithm to install:</Text></Block><Block type="code-line"   key={"c3ff9f7d3f014417aa47d6e89b2387d2"} ><Text key={"2637c7bd625f493f9d15e345d2925223"} >1) EXIT</Text></Block><Block type="code-line"   key={"b93f151a9399478b945d5fa185897357"} ><Text key={"c27aaff10fae4e1fbd67b9ffcd9921e4"} >2) Closeness Centrality</Text></Block><Block type="code-line"   key={"8a886c4af66e4582899facdbe556191a"} ><Text key={"60ad766c115d448bb90f959039d1202c"} >3) Connected Components</Text></Block><Block type="code-line"   key={"df03d58097334118b66a93dbe4bac761"} ><Text key={"d469dc08de7f43ee9a35c771192cbd78"} >4) Label Propagation</Text></Block><Block type="code-line"   key={"3e3ebfae010c45ffbed7ea1b7585530e"} ><Text key={"031e41a9f1e74ed6b439050b447ea241"} >5) Community detection: Louvain</Text></Block><Block type="code-line"   key={"4656a4f3043244cebce51147ff7a2e4c"} ><Text key={"9a430ec1e4014c7ab9acf15aedf72310"} >6) PageRank</Text></Block><Block type="code-line"   key={"ff056378ff45479c95577862d60c4556"} ><Text key={"1f25d7e7a71c4040abd61a8b295c5693"} >7) Shortest Path, Single-Source, Any Weight</Text></Block><Block type="code-line"   key={"a4d84961c4354b9ba77182841dff3c9b"} ><Text key={"3ae118103cca43f19755d953c1e9f03f"} >8) Triangle Counting(minimal memory)</Text></Block><Block type="code-line"   key={"3a3d0d31edca44ac8734198a1b9272a3"} ><Text key={"923680bf70ff42faa2bc590783c210cd"} >9) Triangle Counting(fast, more memory)</Text></Block><Block type="code-line"   key={"ef1b5c43a5c748dc82095bffe920ea85"} ><Text key={"4e4f4b6729ba419c9e05083cc7eabddf"} >#? 1</Text></Block><Block type="code-line"   key={"2fc93ff674a1481fbd0ac3fd5d020d98"} ><Text key={"2baba97e6cd84309b327233bc41fb1ca"} >Exiting</Text></Block><Block type="code-line"   key={"5371aa4f05b740a89ec826bad331a23a"} ><Text key={"4316a988d6b8413586bab19f998721e5"} >Algorithm files have been created. Do want to install them now [yn]? y</Text></Block><Block type="code-line"   key={"3385f3fc7cc345c4871b0f5ef3096924"} ><Text key={"0d013b508b204b0fa780c8f6c131e505"} >Start installing queries, about 1 minute ...</Text></Block><Block type="code-line"   key={"8b417b4fbeed47b9a3b7f614f6d0258c"} ><Text key={"c59432992bc84c1cac8d06079fce4cf7"} >c</Text></Block><Block type="code-line"   key={"1312e0e8505e43ab80125f1063d1898c"} ><Text key={"205ec3e8710d4394ac31bb855ccbeecb"} >{`pageRank query: curl -X GET 'http://127.0.0.1:9000/query/social/pageRank?maxChange=VALUE&maxIter=VALUE&damping=VALUE&display=VALUE&outputLimit=VALUE'. Add -H "Authorization: Bearer TOKEN" if authentication is enabled.`}</Text></Block><Block type="code-line"   key={"e5680871831a4d4aa6b0ac027f41c107"} ><Text key={"9e914305f057436393c2993f7d38a5aa"} >{`pageRank_file query: curl -X GET 'http://127.0.0.1:9000/query/social/pageRank_file?maxChange=VALUE&maxIter=VALUE&damping=VALUE&display=VALUE&f=VALUE'. Add -H "Authorization: Bearer TOKEN" if authentication is enabled.`}</Text></Block><Block type="code-line"   key={"5d6ea6e4695446c99be41926f1f8a8f1"} ><Text key={"7d8813402a3342df94dbf783d8a0eb95"} >{`pageRank_attr query: curl -X GET 'http://127.0.0.1:9000/query/social/pageRank_attr?maxChange=VALUE&maxIter=VALUE&damping=VALUE&display=VALUE'. Add -H "Authorization: Bearer TOKEN" if authentication is enabled.`}</Text></Block><Block type="code-line"   key={"2fa10c855ff940e4ac273250288df08d"} ><Text key={"b760a1d5ded643ee82da5cc2b8a66a93"} ></Text></Block><Block type="code-line"   key={"5e71eaab35c142cc89c328b0157b581c"} ><Text key={"e5e7374f151f42ab9ea56c8f5cc58155"} >[======================================================================================================] 100% (3/3) </Text></Block><Block type="code-line"   key={"c195ba9d567345e8aa25fa7772647a26"} ><Text key={"d42e6b101ab3466ea9f777f69b76849b"} >$</Text></Block></Block><Block type="paragraph"   key={"50ef05cbc3204c15b3fe0544ec96710d"} ><Text key={"8b27311a11c14baf8e6ed8f3219a8af0"} >After the algorithms are installed, you will see them listed among the rest of your GSQL queries.</Text></Block><Block type="code"  data={{"syntax":"text"}}  key={"90286dc803d5426691619c1cab43597c"} ><Block type="code-line"   key={"1b4ab4af12b14e93aacc131d822b98e5"} ><Text key={"a30a20e2f52d40de8011aef77485c5ab"} >{`GSQL \> ls`}</Text></Block><Block type="code-line"   key={"eddf453bf23b466ba80d97b86935705b"} ><Text key={"354f7f2790dc4ab8abbbcc59a91e6783"} >...</Text></Block><Block type="code-line"   key={"3f322425ab0d4c41b47c51b42d46f600"} ><Text key={"1ffc097f2d894d75b495cbd7e7e6dae3"} >Queries: </Text></Block><Block type="code-line"   key={"84085148bdf942299044e5c925d3d50d"} ><Text key={"9436ecb0da5e4079801a9638fa4de05b"} >  - cc_subquery(vertex v, int numVert, int maxHops) (installed v2)</Text></Block><Block type="code-line"   key={"1228018b77dc437886db18ea5cec3826"} ><Text key={"74e98e61da8843fe8fb9d5032e04e33f"} >  - closeness_cent(bool display, int outputLimit) (installed v2)</Text></Block><Block type="code-line"   key={"de42580840894f148ec93f049ca7b628"} ><Text key={"30a3ebebbb91446ba81a2c78e40ed57c"} >  - closeness_cent_attr(bool display) (installed v2)</Text></Block><Block type="code-line"   key={"bca336ed1d3e4ab28792e589fa421aea"} ><Text key={"ecb6e10cbd094b73adf55799edc80a80"} >  - closeness_cent_file(bool display, file f) (installed v2)</Text></Block><Block type="code-line"   key={"c69991469f584ced9a470a33252fec6f"} ><Text key={"3b1894ff88a34a359c965b12a008caa8"} >  - conn_comp() (installed v2)</Text></Block><Block type="code-line"   key={"56c605c8222d47a5907b484db37db8c7"} ><Text key={"d6623c940f85411cbaf7b190e197a884"} >  - conn_comp_attr() (installed v2)</Text></Block><Block type="code-line"   key={"97619c7c3d904fbf917c0f891f652965"} ><Text key={"de0aca115d1a463b8639f718bdff1765"} >  - conn_comp_file(file f) (installed v2)</Text></Block><Block type="code-line"   key={"dc0143948627416e92fb69c1fd836d92"} ><Text key={"9bec4e10820847afabf036f9008f1123"} >  - label_prop(int maxIter) (installed v2)</Text></Block><Block type="code-line"   key={"a80ceeaef7ef4ccf94b5cf44e2f479a2"} ><Text key={"537d7556f11144568cfa23a25a914309"} >  - label_prop_attr(int maxIter) (installed v2)</Text></Block><Block type="code-line"   key={"6662f47a494b41cab7211f35d1a3d732"} ><Text key={"9ad788dc69544d2e976eb55291328c54"} >  - label_prop_file(int maxIter, file f) (installed v2)</Text></Block><Block type="code-line"   key={"89a0b4c1625843fdbbe390819c188882"} ><Text key={"f192ba91602f4eb2a5a7f417bb175208"} >  - louvain() (installed v2)</Text></Block><Block type="code-line"   key={"2a06796d255c449297f451f8cd54d85d"} ><Text key={"e45af248fc2643d7827b2e52624b4570"} >  - louvain_attr() (installed v2)</Text></Block><Block type="code-line"   key={"432c12749de042ea8a199ce8189966ce"} ><Text key={"df9c111a5d084fb1ad36d43f61fe9e9f"} >  - louvain_file(file f) (installed v2)</Text></Block><Block type="code-line"   key={"52af5933a12a4e018f4266dfc0101e9f"} ><Text key={"dab7b2c6ca0940168c2667e7e890ba39"} >  - pageRank(float maxChange, int maxIter, float damping, bool display, int outputLimit) (installed v2)</Text></Block><Block type="code-line"   key={"546830a4b88e494ca3fae4602d7c643b"} ><Text key={"eb8a1c0a5836422594fb66a2d7f5ac06"} >  - pageRank_attr(float maxChange, int maxIter, float damping, bool display) (installed v2)</Text></Block><Block type="code-line"   key={"308cb87e6f1a4459b96fdb2a294d0894"} ><Text key={"c9a8fa8dcca243a7a7d21154d7516c67"} >  - pageRank_file(float maxChange, int maxIter, float damping, bool display, file f) (installed v2)</Text></Block><Block type="code-line"   key={"4cd866931af8492da0dc1624e389f37f"} ><Text key={"4b0794ac46df4c0baea2a991562b3441"} >  - tri_count() (installed v2)</Text></Block><Block type="code-line"   key={"131070c224c342d2bb6c959b54c4679d"} ><Text key={"ab6e6d37ce834fb5b5c2e7261cb04bdd"} >  - tri_count_fast() (installed v2)</Text></Block><Block type="code-line"   key={"3bf5bcb18bf143879a4ff4b1a721b71b"} ><Text key={"f9576088abd345f0b501d07cf064af61"} ></Text></Block></Block><Block type="paragraph"   key={"bbd78c0c82934276b127353fb837f298"} ><Text key={"e74ca3e5ce1f4ec3b9c40b333059bea4"} ></Text></Block><Block type="hint"  data={{"style":"info"}}  key={"dcf42ccc09f1413eb55048654c01b734"} ><Block type="paragraph"   key={"07df16b06b954fde8a6d3bc0a24113ef"} ><Text key={"105b0bf1ea1046b4808cc27cb4d37a7a"} >We will soon update the library so that most of schema choices can be made when running the algorithm, rather than when installing the algorithm.</Text></Block></Block><Block type="heading-2"   key={"39e69788b14c41279620d5b487a67f46"} ><Text key={"15c6d3cd018f4e5f86b3143c7c0427e5"} >Running an Algorithm</Text></Block><Block type="paragraph"   key={"aaa6be6b9d1641b1afc85e8110804ab1"} ><Text key={"a8ff925c15a742f5b4bb57c6926b6145"} >Running an algorithm is the same as running a GSQL query. For example, if you selected the JSON option for pageRank,  you could run it from GSQL as below:</Text></Block><Block type="code"  data={{"syntax":"text"}}  key={"7821f66a1507442bb59101e9c23f55cd"} ><Block type="code-line"   key={"8b440d5589c7417394e36d00c62a55c5"} ><Text key={"07d0ac70441f417e8df3be033fc1ae1b"} >{`GSQL \> RUN QUERY pageRank(0.001, 25, 0.85, 10)`}</Text></Block></Block><Block type="paragraph"   key={"e21bc074ce9749fbb4c44648627c0713"} ><Text key={"abfd09d2d7fb4825998873804a2b4c02"} >Installing a query also creates a REST endpoint. The same query could be run thus:</Text></Block><Block type="code"  data={{"syntax":"text"}}  key={"4b320e4de30f4c68aed331ed5fdb5bb4"} ><Block type="code-line"   key={"def0d22f643a4897b8efd6627ad95a13"} ><Text key={"b1d874d1cda74d088cadbecb519f12d3"} >{`curl -X GET 'http://127.0.0.1:9000/query/alg_graph/pageRank?maxChange=0.001&maxIter=25&damping=0.85&outputSize=10'`}</Text></Block></Block><Block type="paragraph"   key={"f32911799a69466ebff5c23cf234114d"} ><Text key={"25bdbdce674a41499c8e4ba5cc359e2c"} >GSQL lets you run queries from within other queries. This means you can use a library algorithm as a building block for more complex analytics.</Text></Block><Block type="paragraph"   key={"dc954df9e05d40abbe69638750a06036"} ><Text key={"21797e208e7d4584895757ca2be4878b"} ></Text></Block><Block type="heading-1"   key={"4eca338e432a40cd881f9b2111e29be0"} ><Text key={"cb4ff4d471cc48c6a53692ce02c5f03a"} >Library Overview</Text></Block><Block type="paragraph"   key={"394c51c30ff5416c84edd6f5c1681065"} ><Text key={"a237244cc61d46dab0727c4fa909b700"} >The following algorithms are currently available. The algorithms are grouped into five classes:</Text></Block><Block type="list-unordered"   key={"2d5358e2052f42efa8e9816fa34c3cef"} ><Block type="list-item"   key={"6946baab932a4ceaa2113b5d0de0af1e"} ><Block type="paragraph"   key={"7d989091867b48b49793b64af717ae44"} ><Text key={"1b9028b7a63d460fadf0bf5da7645421"} >Path</Text></Block></Block><Block type="list-item"   key={"d4a62e1bb62045fd888de4889dab6cac"} ><Block type="paragraph"   key={"4baaaf2190d54e189031691a054687fe"} ><Text key={"5f45092a9a334bb8bdf25bad667337df"} >Centrality</Text></Block></Block><Block type="list-item"   key={"ee38a82bc43b44a9860ff37928e6f352"} ><Block type="paragraph"   key={"dd891dd81fd14c17b72d7e7009ba31bb"} ><Text key={"9a258f0b540945c48c6299ee58c5702f"} >Community</Text></Block></Block><Block type="list-item"   key={"d5da5f82d5284b53a6d23580091c583c"} ><Block type="paragraph"   key={"cc7fbf5967c24e10bb072a7f78516d43"} ><Text key={"42604109b07a478c9dee7c8a13c3aabf"} >Similarity</Text></Block></Block><Block type="list-item"   key={"a4bf3a72fddf4120ae99149bac5920a1"} ><Block type="paragraph"   key={"7ad5aaa00fd347628f0a1b9c5f5b3c9c"} ><Text key={"09314fbfd7be4585bfb200ffa55fe954"} >Classification (NEW)</Text></Block></Block></Block><Block type="paragraph"   key={"d856dd46acbd49f8ab5c59a0a6006fdf"} ><Text key={"9edfb5e339624124bc61d6f78cfe7c6b"} >Moreover, each algorithm may or may be be currently available for a graph with Undirected Edges, Directed Edges, and Weighted Edges. </Text></Block><Block type="list-unordered"   key={"3dfd67d821a248949b9514c3b44e1cbc"} ><Block type="list-item"   key={"21aef77c287245c3baa3927b59971f2e"} ><Block type="paragraph"   key={"5cafb16a226746d7add15c40b68b8225"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"b07477b7f1a34fe8a14b390238b43e3f"} >Coming soon</Text><Text key={"b07477b7f1a34fe8a14b390238b43e3f"} > means that TigerGraph plans to release this variant of the algorithm soon.</Text></Block></Block><Block type="list-item"   key={"07b8bc6a75944ceaab1bd967e7d02738"} ><Block type="paragraph"   key={"ac9aea1c6a894085975b813e11d8e7ec"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"55a3f8d85bde46af9aeacf5c0758c5ec"} >n/a</Text><Text key={"55a3f8d85bde46af9aeacf5c0758c5ec"} > means that this variant of the algorithm is typically not used</Text></Block></Block></Block><Block type="table"  data={{"aligns":["left","left","left","left","left"]}}  key={"8a9458bd142b4fc3b86d4444c40ae18f"} ><Block type="table-row"   key={"3ecf303dabe84079b51bae0c876ab210"} ><Block type="table-cell"   key={"ba54503f5c62437387e4ca19ca8f3ce1"} ><Block type="paragraph"   key={"486dc3fd0cd548538bef09b42e26e0c9"} ><Text key={"1b49fe5849e1414aa4a818cade1ce98b"} >Algorithm</Text></Block></Block><Block type="table-cell"   key={"2222e6c6922442689c8152b2b95de7a7"} ><Block type="paragraph"   key={"38555ddd30114740ad0226c5590924d1"} ><Text key={"b7b242e74ce64464b3c17d6099891d9d"} >Class</Text></Block></Block><Block type="table-cell"   key={"58d26ce16c0b40c397ca0e09f82d18ac"} ><Block type="paragraph"   key={"0cba64ec40d44a87a502248764aed094"} ><Text key={"c23f38907b494547b2d1992060286d03"} >Undirected</Text></Block><Block type="paragraph"   key={"b0279303b587452da148ed468be5fae0"} ><Text key={"4c598be105bf4047bbc5e550f6657feb"} >Edges</Text></Block></Block><Block type="table-cell"   key={"5518e66b0aeb4d6e88328926565234cb"} ><Block type="paragraph"   key={"394181de79a7490db458178913829f5d"} ><Text key={"b69c301f927c4f9597bf0260b07e6434"} >Directed</Text></Block><Block type="paragraph"   key={"9cf70212882147969ce8182785ef10b1"} ><Text key={"ea0e92606d634989b40f0da78acf21bb"} >Edges</Text></Block></Block><Block type="table-cell"   key={"870d667703eb4c609773d0d5e6e83b30"} ><Block type="paragraph"   key={"a6d6be18d3d04183bf5f9189b63d3243"} ><Text key={"dbb0d1929d164282b56adbaba3d8d95c"} >Weighted</Text></Block><Block type="paragraph"   key={"10dbde2b74334f8aa3a27ca2cbd9fbd5"} ><Text key={"6055f12b708d4dc4bf623df818197cae"} >Edges</Text></Block></Block></Block><Block type="table-row"   key={"6693a0e3e8e149ab9253a6fefb208e95"} ><Block type="table-cell"   key={"1ee9918fc7cb4088a6949db29d51b68a"} ><Block type="paragraph"   key={"4a3a5dc08c0d492496b2bbe86c1278ad"} ><Text key={"d76226d8c24643929957b8734892a49b"} >Single-Source Shortest Path</Text></Block></Block><Block type="table-cell"   key={"bf89548f90244664bae4581b152f7633"} ><Block type="paragraph"   key={"5472e572ac20402b82510c0b303ca1bc"} ><Text key={"ad1aa9157629440b87280ba2dcba63f8"} >Path</Text></Block></Block><Block type="table-cell"   key={"ea0a466cde6b4984856e137f42be6fe1"} ><Block type="paragraph"   key={"a4e030c4b93143028db54a2cfb778926"} ><Text key={"02ec6b16d2684caf8ffcf9ab03ac5309"} >Yes</Text></Block></Block><Block type="table-cell"   key={"9130cf93f92d4b4db9a1abbbee689dbb"} ><Block type="paragraph"   key={"51dab8e62a1c444f959f753f30b9436c"} ><Text key={"7f194e33453b48c397795a89ebd9d6c6"} >Yes</Text></Block></Block><Block type="table-cell"   key={"4a462379af9c4177a9eea5ccf402f487"} ><Block type="paragraph"   key={"362a93ce2b904994971fe60af5c50017"} ><Text key={"c861958e1a414514bb07b010116c1e85"} >Yes</Text></Block></Block></Block><Block type="table-row"   key={"2f0f088243f44825bf693aa119d31ac2"} ><Block type="table-cell"   key={"840f42e4528244d6afa7214d049a7b5d"} ><Block type="paragraph"   key={"15d4f10b37ef49789989a5489bd59893"} ><Text key={"996b371c5b9d4c96b2bd4ad9597f3755"} >All Pairs Shortest Path</Text></Block></Block><Block type="table-cell"   key={"1bcddb7156e54422941bb5c133166921"} ><Block type="paragraph"   key={"61fce86ad3a1459fa8c8fe569f0a4ba9"} ><Text key={"57312970f50243bcb832ce391f19c80b"} >Path</Text></Block></Block><Block type="table-cell"   key={"f2d61b95d4064c828b75c1fe89333d3d"} ><Block type="paragraph"   key={"915d3c40fb9c44ff930316a80272b9a3"} ><Text key={"d88fe230f9bf4853b3169db77316115a"} >Yes</Text></Block></Block><Block type="table-cell"   key={"437a855566d24d6281af37588f73f9ab"} ><Block type="paragraph"   key={"4e60f327307d479b9cebe7f8a02ef368"} ><Text key={"baedeaa22d9047e9801ba7f2d00ca4e3"} >Yes</Text></Block></Block><Block type="table-cell"   key={"8bde82dd89bb406087c0e4488f9423a5"} ><Block type="paragraph"   key={"1aa0a466f0924932852ef41d4040bc1b"} ><Text key={"bcd9d34e12c54dbb9a938cdcdd34832d"} >Yes</Text></Block></Block></Block><Block type="table-row"   key={"29caac8e295741c2a4ec161b4d8075e8"} ><Block type="table-cell"   key={"60372fb049f34f69951a62472d4236b7"} ><Block type="paragraph"   key={"d996b018df5744c0b4ec3f16c8cede00"} ><Text key={"54e686d4ac4d4af7b0f2f8a1ca5a0fab"} >Minimum Spanning Tree</Text></Block></Block><Block type="table-cell"   key={"00b170fe5c51423ba64045547be103f2"} ><Block type="paragraph"   key={"f3f4c080bb2c4014938f1944840eab26"} ><Text key={"b618b4965edf4af795dcc9e5b31d9ab0"} >Path</Text></Block></Block><Block type="table-cell"   key={"b6355ab275734246af4e4da21139b719"} ><Block type="paragraph"   key={"97906521dffe47278a08454c0852740a"} ><Text key={"ef0f5789f6b548268dc713efa60bec54"} >Yes</Text></Block></Block><Block type="table-cell"   key={"1e8f29bb8a224bd08728ff132aecf727"} ><Block type="paragraph"   key={"aba80917e835483ea80c6061988cd611"} ><Text key={"f3a45c26e2dc4e99b30ab6701a36e857"} >n/a</Text></Block></Block><Block type="table-cell"   key={"5c56f47e846f4c2e9f726ee7c062d621"} ><Block type="paragraph"   key={"d52e9998f4d24fa09638bc291d39b723"} ><Text key={"4fe4bcd35267455db3b73d5336f7e823"} >Yes</Text></Block></Block></Block><Block type="table-row"   key={"794e87036a1841fc85fc3d5044aa0c61"} ><Block type="table-cell"   key={"a01cf8ab9f6f4da68dc8fc84ef6e5960"} ><Block type="paragraph"   key={"6e4bbdfdf1e24a3e85dcefeff0cd6e09"} ><Text key={"43f15881d9f14ea792165220fd99efd3"} >Cycle Detection</Text></Block></Block><Block type="table-cell"   key={"5c88afa65aa049788e804d7b02d5a1eb"} ><Block type="paragraph"   key={"84a18ee072124b4a8fd1cb010ceaf906"} ><Text key={"913ed6644c9940899fba6c1e06c17506"} >Path</Text></Block></Block><Block type="table-cell"   key={"948ca657178647dfbe3d8ee6c6cab9da"} ><Block type="paragraph"   key={"a8cc6d3b26e5435aa8e9e53e2ad46184"} ><Text key={"805a91cd215644daa1d723ef6fd5aa02"} >no</Text></Block></Block><Block type="table-cell"   key={"d8c1c76630f94623b0d683c72dfdc2a8"} ><Block type="paragraph"   key={"155b09c784f9457994846d3f9f21d784"} ><Text key={"4cbd3dca8a2f4f0c80d2adb97da2478a"} >Yes</Text></Block></Block><Block type="table-cell"   key={"4dc3c63bcce9468a942890f1acc4e3b4"} ><Block type="paragraph"   key={"18570f8ec0e64979b0e63dd408f4fb9a"} ><Text key={"2dff47c06abb4b3c9940b36628b39d44"} >n/a</Text></Block></Block></Block><Block type="table-row"   key={"1055becf483f49519d1d6e3770d2620d"} ><Block type="table-cell"   key={"a7f5baf0bc144b7d8be26707f2c6e44e"} ><Block type="paragraph"   key={"424c925405b44f878909e61e5371781c"} ><Text key={"82ce16357d3d48b0a81936d7f27f26eb"} >PageRank</Text></Block></Block><Block type="table-cell"   key={"c4fcfb8548294cb7b214f93cb085c15e"} ><Block type="paragraph"   key={"d6f0ebd3a4ce4ff4a69d3a08a746377d"} ><Text key={"ef838d076f194ed186f31a5db28f5bbb"} >Centrality</Text></Block></Block><Block type="table-cell"   key={"ee815f27f1e04de9862d3074b18724b5"} ><Block type="paragraph"   key={"5348267d0614405ba1f24a2ed8297592"} ><Text key={"dee7de032433408f8046c5448819bcca"} >n/a</Text></Block></Block><Block type="table-cell"   key={"6de919ce4cd14c89817a26c3f4b1c4ee"} ><Block type="paragraph"   key={"969750d4a6964c848554c7d9ded796db"} ><Text key={"81fc2cd7c99645d1a200e7d0e644643c"} >Yes</Text></Block></Block><Block type="table-cell"   key={"533c95a1f8554efbbd829f782e219b1b"} ><Block type="paragraph"   key={"f9067c3196e24ba5a03115005eaca8e5"} ><Text key={"2267b36acfc64d9d9f8eba1f485b6c5e"} >Yes (NEW)</Text></Block></Block></Block><Block type="table-row"   key={"237d609c1c0c49dfb8854c74d2015da2"} ><Block type="table-cell"   key={"a97fd523ab3d45b0bd00185cb6cb4064"} ><Block type="paragraph"   key={"8733e813d7d64fc5875e660d3a97ea26"} ><Text key={"86d0f8e2ad6c4bf6a61b5487b81802b2"} >Personalized PageRank</Text></Block></Block><Block type="table-cell"   key={"d3de83e5dede4ac19c1cc809520c57d3"} ><Block type="paragraph"   key={"392389236a834c39a0edfefd12f5a74b"} ><Text key={"937c43622a964be5ae0adb4015e93aef"} >Centrality</Text></Block></Block><Block type="table-cell"   key={"bbf28d20f8f4405fb6a3617ae623c37e"} ><Block type="paragraph"   key={"a0aadcc77f5c41a3b23df56400e4b447"} ><Text key={"90765e7e9af844bb9e7731b6944ef7a9"} >n/a</Text></Block></Block><Block type="table-cell"   key={"71f191a90c544e17856ee940d905510a"} ><Block type="paragraph"   key={"b9907165be4b4da99ceb711e6187eae4"} ><Text key={"2c07ef4100c94e9682efd55da86ee2c6"} >Yes</Text></Block></Block><Block type="table-cell"   key={"4e13db7326f64820bceae34693872559"} ><Block type="paragraph"   key={"80e57203a75f466cbba76e5df30a4e21"} ><Text key={"3f0387f1a7df402b95a00bfa0fa3d34d"} >Coming soon</Text></Block></Block></Block><Block type="table-row"   key={"d9416995a3754e948d1751673a41d312"} ><Block type="table-cell"   key={"f61aab36412c4257894446301c916143"} ><Block type="paragraph"   key={"66647f00b0d14b11848272c0f3df14dc"} ><Text key={"0efc08044223414688573d7ce13fae6f"} >Closeness Centrality</Text></Block></Block><Block type="table-cell"   key={"c2af24ab43e746eeb2229c8470f3e85d"} ><Block type="paragraph"   key={"361cfbf021a54c75a59d06790788f386"} ><Text key={"26d7f74ca3204af4ba3bf4fc386bd483"} >Centrality</Text></Block></Block><Block type="table-cell"   key={"02e2b1e34f354deb945243652bd4df98"} ><Block type="paragraph"   key={"677d821010084e4e8e12a9f3ccc7871a"} ><Text key={"55428349abbd40d18f730611022993aa"} >Yes</Text></Block></Block><Block type="table-cell"   key={"ba7362dab90442f18cc45a0309a6898c"} ><Block type="paragraph"   key={"525037d1996d4d4bb68c5f7e1fce40b2"} ><Text key={"268f43bf985340658fa91364b4fb5b48"} >n/a</Text></Block></Block><Block type="table-cell"   key={"9832f12f9e4d4d48ad90cab34e8ba64c"} ><Block type="paragraph"   key={"44fa72e569784f3abdef6692ad89f437"} ><Text key={"e29b716eeedb443abcb1d0380db5214f"} >Coming soon</Text></Block></Block></Block><Block type="table-row"   key={"76ecf80ba2f847498e5eff68a1a79849"} ><Block type="table-cell"   key={"3c8351fa52fd4ed09bce6a630c931967"} ><Block type="paragraph"   key={"0982d24e727f47b0a8178afc44709895"} ><Text key={"46a38bf00c8944ac9a172dc7d907e7c2"} >Betweenness Centrality</Text></Block></Block><Block type="table-cell"   key={"66f45727275049529e12c85d5873c6a2"} ><Block type="paragraph"   key={"d80b09cee9f748c49184888e22590d61"} ><Text key={"47b38d3ed47b4f559b62f19aa371e5ac"} >Centrality</Text></Block></Block><Block type="table-cell"   key={"24b4935b65064bb8a43eb5102ea2d8db"} ><Block type="paragraph"   key={"665edcc59ab344b28ae879f611bd2cea"} ><Text key={"fbad1db0b35f49999546cc38458b37e1"} >Coming soon</Text></Block></Block><Block type="table-cell"   key={"0c17bca496404cd998c91a76e47a550e"} ><Block type="paragraph"   key={"e8499d5d0b784fdaadb479fb6be68f39"} ><Text key={"ca2275ddda5341358719a2e2f484b9ab"} >n/a</Text></Block></Block><Block type="table-cell"   key={"683149b4a3db4447817092c25f0bb28f"} ><Block type="paragraph"   key={"ff9541fc4c8d4dac89bca8d4f731e014"} ><Text key={"9d22f4259b4d43e5892d60e4a5ac0d3c"} >Coming soon</Text></Block></Block></Block><Block type="table-row"   key={"d99df5c277914d7caa1697805f412491"} ><Block type="table-cell"   key={"56545de64c564359a5728155ca04edda"} ><Block type="paragraph"   key={"2cc65e38c4184fa3a182dd84256e62f1"} ><Text key={"84afe8ce78a34b5eb2072f28ef25d613"} >Connected Components</Text></Block></Block><Block type="table-cell"   key={"2ace4fed0dfd4f479e55ad5a87bdf337"} ><Block type="paragraph"   key={"f1b1930491ce41548e1ead2a52c331f4"} ><Text key={"7fc980d8e8704d2b941efd24064ca3ca"} >Community</Text></Block></Block><Block type="table-cell"   key={"d36873f2da5843c4b16c7ec434448aa0"} ><Block type="paragraph"   key={"3e811bda4e6b4ef0b2f9721781b34ed3"} ><Text key={"d9ea72e54fb3437687d310938212e287"} >Yes</Text></Block></Block><Block type="table-cell"   key={"aa0d171f9482455389200f1839ea769b"} ><Block type="paragraph"   key={"402b52d647d64ad3bed1f82b58604950"} ><Text key={"96aafbca76644c5fa4b7f08ac4ab6614"} >n/a</Text></Block></Block><Block type="table-cell"   key={"8e3ddc394ae943d1993c4bb953f8a4c2"} ><Block type="paragraph"   key={"27e1b4e0fcc546668834578e8ee9a085"} ><Text key={"75f3f9c079d547e38c9e68f83556d805"} >n/a</Text></Block></Block></Block><Block type="table-row"   key={"8062bd8272e64cf49aaad184c0ce9e40"} ><Block type="table-cell"   key={"cf4bfb3b5730454c869e7ec9dde5795b"} ><Block type="paragraph"   key={"6f7ca706e4754b8989da317c12aa21ce"} ><Text key={"24a1731908a544659ed8a5195c6309a2"} >Strongly Connected Components</Text></Block></Block><Block type="table-cell"   key={"47b49d2758da49418569732bc529cd10"} ><Block type="paragraph"   key={"1abf34b9e70e4014af88c3570f4b5f37"} ><Text key={"667f781ecaae486b97116a2e0b082684"} >Community</Text></Block></Block><Block type="table-cell"   key={"409f8bc9caf64d378a09b655927993e7"} ><Block type="paragraph"   key={"950bb68732c643ecaaea79cf7c6af120"} ><Text key={"870fe77e30a54013b4f96e6177258177"} >n/a</Text></Block></Block><Block type="table-cell"   key={"96129bd08ead42a082468693e27cac0c"} ><Block type="paragraph"   key={"2c88df2b4f8c48a2ae3cffe2ade4885f"} ><Text key={"f5dab1ff4c55461a8f713311b6e7f749"} >Yes, with reverse edges (NEW)</Text></Block></Block><Block type="table-cell"   key={"33d7f7ade7464faba5acfb6980be4345"} ><Block type="paragraph"   key={"64639cdd751e4b32983989740f0de340"} ><Text key={"188990f438ab4d109c5559c3947e4df1"} >n/a</Text></Block></Block></Block><Block type="table-row"   key={"2526c37da85d408e9dce15728d4dc8a5"} ><Block type="table-cell"   key={"d196b9bec48846c7aa8ee52d6fb38e87"} ><Block type="paragraph"   key={"f90045acee0f4296a92c2aa28e5a743f"} ><Text key={"ac7deb45ab9f4e9e9191aaa8a28aafe3"} >Label Propagation</Text></Block></Block><Block type="table-cell"   key={"41fb0574cb5844a7b08464fa6175aded"} ><Block type="paragraph"   key={"67c317ffc3b740709929ccf4b557df22"} ><Text key={"61bb6a6f6cd54af6aca34722289a60ab"} >Community</Text></Block></Block><Block type="table-cell"   key={"6f0b2dd2d9a147c9b0bee7e67ea2873f"} ><Block type="paragraph"   key={"81892cf5532c47cea61628858b370df9"} ><Text key={"e6bc8807e7cb434292bc37a56b399656"} >Yes</Text></Block></Block><Block type="table-cell"   key={"929fcb6019e94244b402e2e66bdb6ffa"} ><Block type="paragraph"   key={"c5aa45aa5be842058b94ee1ac46b5997"} ><Text key={"04055337e06140db9dbd78c9e2bc863b"} >n/a</Text></Block></Block><Block type="table-cell"   key={"e2dd0ed6b72742078bc169d46a25b708"} ><Block type="paragraph"   key={"b425200755c346f38dddb3fb213a10b2"} ><Text key={"733973b4b6534605b6eaae0a43b742aa"} >n/a</Text></Block></Block></Block><Block type="table-row"   key={"46f4aee3732f4299a7d5a2ba8b24b014"} ><Block type="table-cell"   key={"cc8e0e11f38544a2a573871cf220c9d7"} ><Block type="paragraph"   key={"9c58c91df7ff47f995e54292bdfbc1f7"} ><Text key={"a150d6befbd04f94bd9b3331caf0446a"} >Louvain Modularity</Text></Block></Block><Block type="table-cell"   key={"b629d42cf14c4d868b0cb92fd9d463c2"} ><Block type="paragraph"   key={"c1e1b95d4aa34091ad22707a4953d7f1"} ><Text key={"71253a02ccfa44bdaa502e900339ddab"} >Community</Text></Block></Block><Block type="table-cell"   key={"0886494a1a1444b999781fa987f1b540"} ><Block type="paragraph"   key={"48926571a1744870b6c5b4af246fce30"} ><Text key={"1f0a123fb5c64c78811363ace2ce1843"} >Yes</Text></Block></Block><Block type="table-cell"   key={"c4091d630466424aa9e2ef0aa3838270"} ><Block type="paragraph"   key={"dd2c381e3cfd4faca99600c16c183ca5"} ><Text key={"55adbf63a15744a2ae8e2d81cdafa7cb"} >n/a</Text></Block></Block><Block type="table-cell"   key={"3a5a49b85e5a4f308adb2b1977fcd690"} ><Block type="paragraph"   key={"8e777d76bae34e018afe9635344633ed"} ><Text key={"cf45efc75036495faef90fdde978adb9"} >n/a</Text></Block></Block></Block><Block type="table-row"   key={"53e84fd3dfca4d3b99cf32223e82c39a"} ><Block type="table-cell"   key={"43382c987ea6486db0d520d814be229b"} ><Block type="paragraph"   key={"600bfd8a4b61436ca7c5e4be50488828"} ><Text key={"c68eb5244fed433b8cf735d7741e70a7"} >Triangle Counting</Text></Block></Block><Block type="table-cell"   key={"6a3449aad10844eb93d2755a2bef5338"} ><Block type="paragraph"   key={"1d84362415df4e14aeb83aa3d15bee4b"} ><Text key={"af3293ea5a6b4359b655ce731d7a18e7"} >Community</Text></Block></Block><Block type="table-cell"   key={"a01ccdbdbf144413aada2822e971894b"} ><Block type="paragraph"   key={"aff843e8fd9346c5b16362841bc62bdd"} ><Text key={"0defa1917c534c3da56c77d21c8a4f6c"} >Yes</Text></Block></Block><Block type="table-cell"   key={"54fa249c85754c5da98a6dba3911d407"} ><Block type="paragraph"   key={"a50e5adf5c274f66b33c68d46473b920"} ><Text key={"f468fbf3f8614fb8945a87de3f6e990e"} >n/a</Text></Block></Block><Block type="table-cell"   key={"55b3424e1c6e452b8b2dbf1278011628"} ><Block type="paragraph"   key={"edd73e1f993d40379eb93d0db5377897"} ><Text key={"0f35fe9e36df44e8bdbd86bb41430022"} >n/a</Text></Block></Block></Block><Block type="table-row"   key={"0e2dcb7450c9455eb57d69501e03b617"} ><Block type="table-cell"   key={"a7e9de8ff9f64251a872a970dc5fe12b"} ><Block type="paragraph"   key={"e09197e9f3e3486e9f0d0fddb46b605d"} ><Text key={"5be0a4d53cb84156b003ca2a2c33ef38"} >Cosine Similarity of Neighborhoods (single-source and all-pairs)</Text></Block></Block><Block type="table-cell"   key={"7b6f94fcd8c8432da7250acf35ad930c"} ><Block type="paragraph"   key={"80dd8c2dae564e9da3aa467c2ce95713"} ><Text key={"164db4c3a961436db59ff36c5ec477f2"} >Similarity</Text></Block></Block><Block type="table-cell"   key={"7c68e829096b4860a2d59c852acee7bf"} ><Block type="paragraph"   key={"237c00dcdffb4eddb29d9ac6f1d6fb5e"} ><Text key={"2aa4b01d756c4a82a17cbb9f15a9ea3b"} >Yes</Text></Block></Block><Block type="table-cell"   key={"f0c3bd2489034f3c81f6e9185051c813"} ><Block type="paragraph"   key={"b760e1e315af4cfabd83d0ca5c719c14"} ><Text key={"edbc99d247da4e41bd8a3a960e2fca3e"} >Yes</Text></Block></Block><Block type="table-cell"   key={"4ce1db90d2da4d0587b021ac9d96c8fc"} ><Block type="paragraph"   key={"3805ba48aa6843eb92fed15f62ae1f95"} ><Text key={"2a09bcbe59634ad898f2231502947656"} >Yes</Text></Block></Block></Block><Block type="table-row"   key={"2e0516232e5d49f68b8d0b5837859acc"} ><Block type="table-cell"   key={"71cc390e48f64ac7923b344bf172624a"} ><Block type="paragraph"   key={"2bd89d4a73454d5e88f5d3a79a6f128d"} ><Text key={"3e92bcef7a914f03b3f133387b372736"} >Jaccard Similarity of Neighborhoods (single-source and all-pairs)</Text></Block></Block><Block type="table-cell"   key={"464e0a62e14c4c6eb79acd6ae1f1c29e"} ><Block type="paragraph"   key={"e2c394d0996649a2830780891d7f3a22"} ><Text key={"849161ac176941c69f301b55e8ad8bf5"} >Similarity</Text></Block></Block><Block type="table-cell"   key={"5456ccd1d6194b4ab38b575bdc654515"} ><Block type="paragraph"   key={"56d5211a18744af1a1b9e9fa571ad398"} ><Text key={"f07a100181d7479e89f9aa11563cf5a1"} >Yes</Text></Block></Block><Block type="table-cell"   key={"802c65f3d95d4dc286cbab327795a40b"} ><Block type="paragraph"   key={"64d04d6ce59c4e3b8661ecb4f8864669"} ><Text key={"a27ca873000040199b84f88b43b34a52"} >Yes</Text></Block></Block><Block type="table-cell"   key={"30df7e79698d44b2bbd049259417cb6f"} ><Block type="paragraph"   key={"b1e575a76d22480186cf80cf21c64bae"} ><Text key={"e55dc8f8d5544d20b44fe284e8dc5a5e"} >No</Text></Block></Block></Block><Block type="table-row"   key={"8ca322a07b084aedadf23788bebf94dd"} ><Block type="table-cell"   key={"b38ad621a83b45bab774e52c8e8f5e12"} ><Block type="paragraph"   key={"0892846d9fea43a593f7af76334c791c"} ><Text key={"3cd89ab99c774b558646ab13f1810907"} >K-Nearest Neighbors (with cosine similarity for "nearness")</Text></Block></Block><Block type="table-cell"   key={"d383207f8a5f4057bf04d0868e52a5dd"} ><Block type="paragraph"   key={"97209d56ca79401a89300bbb3aa0db4a"} ><Text key={"23bcb92c069b4748b548642e5ab3c3fc"} >Classification</Text></Block></Block><Block type="table-cell"   key={"420bca1934c144499c71c1cdc78f9fcf"} ><Block type="paragraph"   key={"32a340eeba6e462694aff83994375cb7"} ><Text key={"c976f5e78ca942c7b0df52d7dfb76c2c"} >Yes</Text></Block></Block><Block type="table-cell"   key={"93e5405fe25e41f2a7ca82870a2071cd"} ><Block type="paragraph"   key={"aab4a6eea1e04c21844cf85e799667d0"} ><Text key={"99193c6055304d9f868156457c5a3226"} >Yes</Text></Block></Block><Block type="table-cell"   key={"6d48178bb48e406da58c89486e8cf7fb"} ><Block type="paragraph"   key={"3fbe5c06a34647aeb4c58cee30eeb8bc"} ><Text key={"53028c0bc7474249a83b8e22a1a9c9c7"} >Yes</Text></Block></Block></Block></Block><Block type="heading-2"   key={"192491587afc434b8ce95063471104f8"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"3784a9bac5b54a6987aaa63c8e80fcf6"} >Computational Complexity</Text></Block><Block type="paragraph"   key={"35d0d71846ef45638c0e00bfacb68049"} ><Text key={"b23e70a3c56c49019faf48f4165c1fa1"} >Computational Complexity is a formal mathematical term, referring to how an algorithm's time requirements scale according to the size of the data or other key parameters.  For graphs, there are two key data parameters:</Text></Block><Block type="list-unordered"   key={"c6ac33073ffe43179ae437e0e3a5ac70"} ><Block type="list-item"   key={"0ea7ca500b9743fa8dcaac38484afe27"} ><Block type="paragraph"   key={"e845a1f58fd1475e87afd887a456d454"} ><Text key={"500f1efb73ea47a1a8cae39ec250b35f"} >V (or sometimes n), the number of vertices</Text></Block></Block><Block type="list-item"   key={"b14bc0267832475cabff7dadeca84810"} ><Block type="paragraph"   key={"cd0f7f026b7c491b9ee3cf526b8d9bd1"} ><Text key={"d441e4008d614d3fbd55d151e006f2fd"} >E (or sometimes m), the number of edges</Text></Block></Block></Block><Block type="paragraph"   key={"53e234867b7f44a7874f2bb937547e79"} ><Text key={"0be6187be9434fc99e210f051883f2e6"} >The notation O(V^2) (read "big O V squared") means that when V is large, the computational time is proportional to V^2. </Text></Block><Block type="heading-1"   key={"fb53db86836c40d7b95f2dfa152caaad"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"48ff2a7ee6fc45d9809acb54aca2fcd9"} >Path Algorithms</Text></Block><Block type="paragraph"   key={"a1db663e0ce948deac91d3ffa7591507"} ><Text key={"ac81a36297df487db81fb4409bb0bac2"} >These algorithms help find the shortest path or evaluate the availability and quality of routes.</Text></Block><Block type="heading-2"   key={"df7cac03e7034f6391c68910f4a033be"} ><Text key={"26dfea020a12444c9200b03de097c138"} >Single-Source Shortest Path, Unweighted </Text></Block><Block type="hint"  data={{"style":"info"}}  key={"b678a1e3abb847b9bed1b811f3f9a7ef"} ><Block type="paragraph"   key={"51629982b6e945dd9461cf680a3be0a0"} ><Text key={"f916e26a07904a49aef0e48891c23015"} >The algorithm we are discussing here finds an unweighted shortest path from one source vertex to each possible destination vertex in the graph. That is, it finds n paths.</Text></Block><Block type="paragraph"   key={"eb41996b5e174628a818c9a7fce772fe"} ><Text key={"eb8a7dac18d94c9f8e115812628c184a"} > If you just want to know the shortest path between two particular vertices, S and T in a graph with unweighted edges, we have described that query in detail in our tutorial document </Text><Inline type="link"  data={{"href":"https://doc.tigergraph.com/2.1.3/GSQL-Demo-Examples.html#GSQLDemoExamplesv2.1-3.Bi-DirectionalShortestPathSearchAlgorithm"}}  key={"bd8497c60f2640a9bbbbfe59d05402f8"} ><Text key={"b163d9131066432293eb98d31bea44e2"} >GSQL Demo Examples</Text></Inline><Text key={"ad71468f7ecd48529a0e68d065339765"} >.</Text></Block><Block type="paragraph"   key={"992bc10361e84a59a468548fb9e8e512"} ><Text key={"a2d0937b616d46b4830caab259491612"} >If your graph has weighted edges, see the next algorithm.</Text></Block></Block><Block type="heading-3"   key={"233533eb55f54aac9e6f44c1a0ee9ad6"} ><Text key={"436692f43b734ea3900ceb2a6738a438"} >Description and Uses</Text></Block><Block type="paragraph"   key={"2968516153b045d084453ce96e39c3a0"} ><Text key={"58cece49f6264a0d84313a95cd464238"} >If a graph has unweighted edges, then finding the shortest path from one vertex to another is the same as finding the path with the fewest hops. Think of Six Degrees of Separation and Friend of a Friend.  Unweighted Shortest Path answers the question "How are you two related?" The two entities do not have to be persons. Shortest Path is useful in a host of applications,  from estimating influences or knowledge transfer, to criminal investigation.</Text></Block><Block type="paragraph"   key={"cfda1f93c1664da9829b020496085f3f"} ><Text key={"dcf216ba174f49fb9c4de6a711fcb0b6"} >When the graph is unweighted, we can use a "greedy" approach to find the shortest path. In computer science, a greedy algorithm makes intermediate choices based on the data being considered at the moment, and then does not revisit those choices later on. In this case, once the algorithm finds any path to a vertex T, it is certain that that is a shortest path.</Text></Block><Block type="heading-3"   key={"39de0f2d0ecc4938862ad505ca0ea05b"} ><Text key={"920628a1bfe446c6bcac6b5dca7a30d3"} >Specifications</Text></Block><Block type="code"  data={{"syntax":"text"}}  key={"bd5dbea812e841fdaa8d10aa170c51d3"} ><Block type="code-line"   key={"da9b0ac5c8e64144abf70de495bae5c5"} ><Text key={"178c062279e0419ab5df2be20e317526"} >shortest_ss_no_wt(VERTEX v, BOOL display)</Text></Block><Block type="code-line"   key={"77823c908bd5401f8a37cb68cef9b6cf"} ><Text key={"873720695efb429fb6e79b3f7388d231"} >shortest_ss_no_wt_file(VERTEX v, BOOL display, STRING filepath)</Text></Block><Block type="code-line"   key={"32c7ce51e2e3413c98f6bec9b5ffdc13"} ><Text key={"1af94416e30044b5b7d4341b62a82c95"} >shortest_ss_no_wt_attr(VERTEX v, BOOL display)</Text></Block></Block><Block type="table"  data={{"aligns":["left","left"]}}  key={"7b10a7c0b2794d0e9b671cce86332a43"} ><Block type="table-row"   key={"4862a8bc93814e229b13c180de8eb842"} ><Block type="table-cell"   key={"89efbb34c5d64b8e9b2f3263d9a3d3a1"} ><Block type="paragraph"   key={"7dd14a1e9284466181079c02ff9ccc56"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"ca97e3c09e374599a4c6db6f20029f55"} >Characteristic</Text></Block></Block><Block type="table-cell"   key={"bbb90ece413d4891bb95a8ed053d6a5e"} ><Block type="paragraph"   key={"d3a754e7866e439b83a4f9e5337a76a3"} ><Text key={"ce3f5043bfe84fa3a6757d3aa60bba84"} >Value</Text></Block></Block></Block><Block type="table-row"   key={"87a9ac04561b48b985845f7351f4cf19"} ><Block type="table-cell"   key={"c43b5d3f90b04b2caecf1845373259f8"} ><Block type="paragraph"   key={"ca1d16ffb630473bbacf7c621cdc7f71"} ><Text key={"d668b66107ef42998886e3337db31c85"} >Result</Text></Block></Block><Block type="table-cell"   key={"8189bf0760304a058bef384f8acd1e38"} ><Block type="paragraph"   key={"b9ba1de9822d41408a886563c8eea968"} ><Text key={"4917058097d845aba99960c3ca4a6a3e"} >Computes a shortest distance (INT) and shortest path (STRING) from vertex v to each other vertex T. The result is available in 3 forms:</Text></Block><Block type="list-unordered"   key={"a7b95e3361ed4c4e90aa6448e3cf14e3"} ><Block type="list-item"   key={"d538022246cf4b0182a0424740ce8f6d"} ><Block type="paragraph"   key={"5ce98af32bf54aad8b9edc32174da7c7"} ><Text key={"7790e745540a498e8499948eb8a83c1c"} >streamed out in JSON format</Text></Block></Block><Block type="list-item"   key={"81b5d1b575784235833f9ce13f3bd251"} ><Block type="paragraph"   key={"bcd58fdf774f4fffbf440194ea128fd8"} ><Text key={"5c8aad5bc2c9477e92f4cd601d85a800"} >written to a file in tabular format, or</Text></Block></Block><Block type="list-item"   key={"9c43e07abfdb4253a652c8d235117acb"} ><Block type="paragraph"   key={"3cbddc3aec934763b77ccdcdc23734ab"} ><Text key={"94e65c0857064ee6b0e1a26557f94ab4"} >stored as two vertex attribute values.</Text></Block></Block></Block></Block></Block><Block type="table-row"   key={"8b66f7b96f5348d2b71b6da08c025e8a"} ><Block type="table-cell"   key={"71189884bcf04d50b3121f59e6db33ad"} ><Block type="paragraph"   key={"ab87a66237c74f9e92061116f558c3a2"} ><Text key={"3ae6e61bb76d4df0b00b5cbc62df515f"} >Input Parameters</Text></Block></Block><Block type="table-cell"   key={"9517a9d38ec444628e13b409895e9d48"} ><Block type="list-unordered"   key={"642557bebf6c408784f8e9bb480cde59"} ><Block type="list-item"   key={"69704aa1b7f4412f89b50e1d4bd3ef11"} ><Block type="paragraph"   key={"e582ee55094844efa5877dd5cd7333b9"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"515ee5a7a9654e0bad0e9ad9ec6b77d9"} >v: </Text><Text key={"515ee5a7a9654e0bad0e9ad9ec6b77d9"} >id of the source vertex</Text></Block></Block><Block type="list-item"   key={"cbda00ac1651428395e792a760161180"} ><Block type="paragraph"   key={"1964ef01bdd645178146a1b03e28e683"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"99993a93603d4da7b0fb0d0552c3e97b"} >display</Text><Text key={"99993a93603d4da7b0fb0d0552c3e97b"} >: If true, include the graph's edges in the JSON output, so that the full graph can be displayed.</Text></Block></Block><Block type="list-item"   key={"15f9c2976bfd480cbfc360b7916352b9"} ><Block type="paragraph"   key={"8f7338db875148449ab1ea679ac3a114"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"6871c230fc0f4c368261d6ceca4e2c8f"} >filepath </Text><Text key={"6871c230fc0f4c368261d6ceca4e2c8f"} >(for file output only): the path to the output file</Text></Block></Block></Block></Block></Block><Block type="table-row"   key={"e0780caffec34695b2c8dbeeacd7f4d3"} ><Block type="table-cell"   key={"15cde37676214dfdb248660fae78b303"} ><Block type="paragraph"   key={"b98992d7e6e94e14b4aca25380612752"} ><Text key={"30779dce5de14d27a0753f5b2a75a95a"} >Result Size</Text></Block></Block><Block type="table-cell"   key={"ae54047e15f94b39a211177d6d647da0"} ><Block type="paragraph"   key={"f78f5ed0b57c4c9eb4514a2d580e26ec"} ><Text key={"cfc6d5ec5dda4096b8253839d7c7c9bd"} >V = number of vertices</Text></Block></Block></Block><Block type="table-row"   key={"cbc871efa7d049d7a1ce2230af5ea449"} ><Block type="table-cell"   key={"5067d78b4d7646448f14c17024b0190e"} ><Block type="paragraph"   key={"d1ee38ffb7ca46c380f74e4c360667e0"} ><Text key={"fe9ff305158148fdb45bd1976bac7eb4"} >Computational Complexity</Text></Block></Block><Block type="table-cell"   key={"6bab8def42bd4373bb5a4e3e638b499a"} ><Block type="paragraph"   key={"5c90bf2e683a47ba919390d0d6461838"} ><Text key={"0f9a1cc3cf9b48268c363e8f69a80e0e"} >O(E), E = number of edges</Text></Block></Block></Block><Block type="table-row"   key={"6144a7b36ae047698435efd09abc40aa"} ><Block type="table-cell"   key={"85284ed6b36e40938378c28f00c6e09f"} ><Block type="paragraph"   key={"6d5e1054af0544e69bc11dbc47f6e017"} ><Text key={"763f417abbe348208bf7d284ebf053d6"} >Graph Types</Text></Block></Block><Block type="table-cell"   key={"67a2ace93ffe4e07881900e2321a4045"} ><Block type="paragraph"   key={"67abbc1bf1c44b59a83a6a9e2bb56e52"} ><Text key={"da66324c2dd84139ad8897f33414715d"} >Directed or Undirected edges,  Unweighted edges</Text></Block></Block></Block></Block><Block type="heading-3"   key={"cb6350842a604e3ba4ac1fca98eef9c5"} ><Text key={"5543db569dd14fd89ecacf3b176317e0"} >Example</Text></Block><Block type="paragraph"   key={"74c0e9a8aee2465e9da6ad75b7b318d9"} ><Text key={"bbd0bd9d35a94c50b76e0e5437b9aee4"} >In the below graph, we do not consider the weight on edge. Using vertex A as the source vertex, the algorithm discovers that the shortest path from A to B is A-B, and the shortest path from A to C is A-D-C, etc.</Text></Block><Block type="image"  data={{"assetID":"-LVm7GqGBIZsrYCnLu4a","caption":"generic graph with shortest_pos5 choice, not considering weight"}}  key={"3bce1c6bd2fd4feaa1840052fe82005d"} ><Text key={"96aee84e4f6042b29d41b20dc5d8ae8b"} ></Text></Block><Block type="code"  data={{"syntax":"text"}}  key={"cd7c07bbf5b64e488b4e48a150fddccf"} ><Block type="code-line"   key={"03bbb769442a4ea4b5d46c44562acffd"} ><Text key={"d5c5c52f450b43ce8cc96284d454e95a"} >[</Text></Block><Block type="code-line"   key={"a278a2950ca34facb3725b79f2962d79"} ><Text key={"89c4e59e10114158b9603c9af5449329"} >{`  \{`}</Text></Block><Block type="code-line"   key={"4b4dae6958ad46f8bcb6fe2e3ae98d5a"} ><Text key={"f41da61d841547eeb87554a3d22d6ec6"} >    "ResultSet": [</Text></Block><Block type="code-line"   key={"7d712feea9cb4c059aa3d37a8cdb7963"} ><Text key={"74d3cc6290b447059bfe9d50feed6259"} >{`      \{`}</Text></Block><Block type="code-line"   key={"bfde19a4c2ce48cb825921593b100b67"} ><Text key={"c7aa103962f94c75897dbb3daccd7437"} >        "v_id": "B",</Text></Block><Block type="code-line"   key={"cb505c16c8dc4c39a7a21fb2edf51b3a"} ><Text key={"331e0fe03be04ddb9941c56fbed00d89"} >        "v_type": "Node",</Text></Block><Block type="code-line"   key={"3583dae4d66e4d12af1ce1388c73d15b"} ><Text key={"b048bba72e454b0896aab7b55c6836fd"} >{`        "attributes": \{`}</Text></Block><Block type="code-line"   key={"1a7970374825472fa080c172880fa654"} ><Text key={"bd22cd6022344cc1b29338cea9fc14c7"} >          "ResultSet.@dis": 1,</Text></Block><Block type="code-line"   key={"79305128654a46e5a6cd15ca977441b1"} ><Text key={"0ae55b868f2a4e41895f06886a67803b"} >          "ResultSet.@path": [</Text></Block><Block type="code-line"   key={"ff1f78510b4e49bc9171d130f8bd2dae"} ><Text key={"9b0f0fcf9a3d4c82a4d288b8a918d95f"} >            "A",</Text></Block><Block type="code-line"   key={"fa709ccbfff849debb96bcb10c964b6d"} ><Text key={"915db07bd62a4372b1ebb5b95c89b920"} >            "B"</Text></Block><Block type="code-line"   key={"0cb5f2ce207e47afbe8fc23087248542"} ><Text key={"cf68663456a3452181ee8fc65ac5c74e"} >          ]</Text></Block><Block type="code-line"   key={"5777664571dd4e70911fa488a238a56c"} ><Text key={"d9093bbaafa1403ebd3579204bb194bb"} >{`        \}`}</Text></Block><Block type="code-line"   key={"aa354fd0235647a5a31d4259de2c3c08"} ><Text key={"cc232b61bc9a4513ad8df56f5f130acf"} >{`      \},`}</Text></Block><Block type="code-line"   key={"7229737d4cc44d83bed4619e3f8b1c6a"} ><Text key={"6df1b1a97afe4cd68f769fb5a0894965"} >{`      \{`}</Text></Block><Block type="code-line"   key={"82253a3b0e2143dbb9dc5ccc37550fae"} ><Text key={"9196319f21ee428cafe7db483aa3535f"} >        "v_id": "A",</Text></Block><Block type="code-line"   key={"cd6fc14bc43a413797937d1f0ba21557"} ><Text key={"55d026b77fdb415696471f8b5520f19e"} >        "v_type": "Node",</Text></Block><Block type="code-line"   key={"d00ffdf3201a47c1b358dafb609688d3"} ><Text key={"3656aa3435464eccbc724593820e7820"} >{`        "attributes": \{`}</Text></Block><Block type="code-line"   key={"2b57725c14f64516977f8ba09747484b"} ><Text key={"5e46335f9db2447ba357c6c72d119a9e"} >          "ResultSet.@dis": 0,</Text></Block><Block type="code-line"   key={"f8b1c1fa46c74c79895a43d3637ca611"} ><Text key={"a7688909b07847a989e90e16687114f1"} >          "ResultSet.@path": [</Text></Block><Block type="code-line"   key={"d81e0ff7472f476684e96e3eb784e47e"} ><Text key={"bb87077b63784212a0799d20f04a147c"} >            "A"</Text></Block><Block type="code-line"   key={"a9da5003e0bb41a582382e16a19d6163"} ><Text key={"4ef288752d1e4747b6691790559293d8"} >          ]</Text></Block><Block type="code-line"   key={"3acfd8a3f2344b8c81b22d8d0ec18220"} ><Text key={"dce37cf9166840f3becb4273012d1484"} >{`        \}`}</Text></Block><Block type="code-line"   key={"0fa472612dd0447cada124f99e7364e8"} ><Text key={"a797d9d1574145dfa5f4485dc8ee3fc4"} >{`      \},`}</Text></Block><Block type="code-line"   key={"da76fb32fedf4d12920c2ee605e8f715"} ><Text key={"99e3907ce0d546cd95540e54c106374a"} >{`      \{`}</Text></Block><Block type="code-line"   key={"2d9feda7a8db4f248550f81a85636de9"} ><Text key={"b68dd58114194773a0854426aa78de74"} >        "v_id": "C",</Text></Block><Block type="code-line"   key={"c60a49036bc34b8ca31ca67a98090de6"} ><Text key={"1955dddb905147188e046bf288e16d0a"} >        "v_type": "Node",</Text></Block><Block type="code-line"   key={"8a10553a2be44945b74015c5e90287e0"} ><Text key={"efa38b46eadf4dd2b2432820b12162fe"} >{`        "attributes": \{`}</Text></Block><Block type="code-line"   key={"69fb87ff4cc648d9aa500699b3ebad63"} ><Text key={"bd21355f4d72454b94ecee954c6138f6"} >          "ResultSet.@dis": 2,</Text></Block><Block type="code-line"   key={"fb8478d3c86b4cb3b2e401ca92b40985"} ><Text key={"62a5d6fb4bd546aaae467fcf063820c1"} >          "ResultSet.@path": [</Text></Block><Block type="code-line"   key={"af8d076c5a3240fbbc38285d70b4679c"} ><Text key={"b200ca1622f04613a7d6ca1a74d071ae"} >            "A",</Text></Block><Block type="code-line"   key={"970bbeea049f445ca9cda7b038cfb589"} ><Text key={"20b37dfaf4674999831aa17d0dae5af5"} >            "D",</Text></Block><Block type="code-line"   key={"86c484f3c87d4d13897c32632ed48f18"} ><Text key={"c268bd66e0884072b38832c1ddb2f4bc"} >            "C"</Text></Block><Block type="code-line"   key={"7a9a02bfc0664f7b920c69d36c38c02f"} ><Text key={"f21fa7fc3fae40f6821e592588fc9249"} >          ]</Text></Block><Block type="code-line"   key={"0a64c71d4fed43da8e5a499c667ff043"} ><Text key={"34f90a61ab274eb0bee5ae00e9df6d5b"} >{`        \}`}</Text></Block><Block type="code-line"   key={"b9cbe3d5dbc14c72b9a731cfb27627ae"} ><Text key={"123b1f2746ac476a9bb424b3049b0c4c"} >{`      \},`}</Text></Block><Block type="code-line"   key={"390f88d963144977afcb7797829d495f"} ><Text key={"749ad6313876424ca5871458be8aec54"} >{`      \{`}</Text></Block><Block type="code-line"   key={"96099327dbc748368cd5f57e1ec68cf1"} ><Text key={"67f4ba146758448e884a9ea93efbd1ba"} >        "v_id": "E",</Text></Block><Block type="code-line"   key={"c885a9f144b14fb18afa683ae49c8862"} ><Text key={"d36e072d174249b28b48606c71406ae3"} >        "v_type": "Node",</Text></Block><Block type="code-line"   key={"c68a31344a6b433b9c447e8c730f9344"} ><Text key={"d94e53b1d93b4086ab84e03ab87ce9e3"} >{`        "attributes": \{`}</Text></Block><Block type="code-line"   key={"499319e3b3ee477cb5c26074ec4f1934"} ><Text key={"598706c3d2a84138833c3030d0beb5ef"} >          "ResultSet.@dis": 2,</Text></Block><Block type="code-line"   key={"341be060c7c5478abf5e393b933e5c21"} ><Text key={"1a017444264147b39013b7b2b6c031ba"} >          "ResultSet.@path": [</Text></Block><Block type="code-line"   key={"ccbfe8f5e52243e58e85cd3c62e239c5"} ><Text key={"68705082a7ac43a6bd32d39d19eab891"} >            "A",</Text></Block><Block type="code-line"   key={"a771924f25e94a6eb46204b7dc870e10"} ><Text key={"c7f4d06145774d0ab8314ea7d49e5542"} >            "D",</Text></Block><Block type="code-line"   key={"9536f7bcaac74368a9ccd3b7a3412f99"} ><Text key={"e02b318d3971404f9f56d014c9ec998f"} >            "E"</Text></Block><Block type="code-line"   key={"681fdce4195146d991473d3c420d01a1"} ><Text key={"418bc1897fcb44fa958e13303a8f4e24"} >          ]</Text></Block><Block type="code-line"   key={"3426190a32384bad82dd8c3a939fa794"} ><Text key={"1c9ec5923e5a4e9ead1086498a676c43"} >{`        \}`}</Text></Block><Block type="code-line"   key={"369543a9564b4e3194a57e4b5db53795"} ><Text key={"446532438d8843e7b830cc88d414db77"} >{`      \},`}</Text></Block><Block type="code-line"   key={"87d915f932c547f4880b1005ee22ba5e"} ><Text key={"cbb69d20b0294e0bbcdebbc5ba75ce5f"} >{`      \{`}</Text></Block><Block type="code-line"   key={"e45f4b0860654460acc74a637e3a40e8"} ><Text key={"3f7d1003e4504ad9a9c22ce992ada1d8"} >        "v_id": "D",</Text></Block><Block type="code-line"   key={"cb8b46c16c7c4bd3bf6657a326de405a"} ><Text key={"88a3df5a98e540d69ae2000f0bfe0dbd"} >        "v_type": "Node",</Text></Block><Block type="code-line"   key={"958dcaba2d8640bd99e7741029b1cc3e"} ><Text key={"5fae073c49214379a1bd6ccd7429143a"} >{`        "attributes": \{`}</Text></Block><Block type="code-line"   key={"6b6709379c514681be184b23156b3898"} ><Text key={"24ae60945eb54480b5d7f76fcd36c0df"} >          "ResultSet.@dis": 1,</Text></Block><Block type="code-line"   key={"d3c9700fc48b4066b87aaad90b7916e0"} ><Text key={"e2237e89ab784a689c75c8080b205ff1"} >          "ResultSet.@path": [</Text></Block><Block type="code-line"   key={"289f098bbbe44942a8712caa05cc1663"} ><Text key={"3047bc260fe443b0825161d2f84ea6d2"} >            "A",</Text></Block><Block type="code-line"   key={"7ce7535855574e4f932fc72d8101484b"} ><Text key={"883198fff6c64d069401e50488e7b89e"} >            "D"</Text></Block><Block type="code-line"   key={"fd2c9b7742734a1d9df9eb946776a732"} ><Text key={"f9223f99348840fdbe0c7aa0bf2c5c7b"} >          ]</Text></Block><Block type="code-line"   key={"9851ec3b17a0461589002c269c750141"} ><Text key={"8e4951fdba0d40ad8824ee50021e453f"} >{`        \}`}</Text></Block><Block type="code-line"   key={"976d6cfe83a74c6886087e59527183f8"} ><Text key={"6696e4a8625d43ba8d409bf7ed6a3044"} >{`      \}`}</Text></Block><Block type="code-line"   key={"5655a398cd084bc7a4cf7ef57329bf05"} ><Text key={"75b114f676c7480bbdf881125065711e"} >    ]</Text></Block><Block type="code-line"   key={"cbabdc63e50b4347bc7e21bc51deb3b3"} ><Text key={"ab5653fd99424bd7b69890ff2d2ac0bf"} >{`  \}`}</Text></Block><Block type="code-line"   key={"4ba866abd1c3490fbc1adc4867eb5869"} ><Text key={"66ddb60616d9429eb0b3733275c95a4c"} >]</Text></Block></Block><Block type="heading-2"   key={"a6fc0f1a284b4d6daa3f3949c0a437f4"} ><Text key={"eb6e69f1f7ea46a29c07da96bb71d8ba"} >Single-Source Shortest Path, Weighted </Text></Block><Block type="heading-3"   key={"a38a4614a37b4fccab531216cf659ec2"} ><Text key={"27b8347af2084153b438cedc8c0584f3"} >Description and Uses</Text></Block><Block type="paragraph"   key={"6b2de0e81a0043099631f162794b6b97"} ><Text key={"9a49ae4d38ed4fcdb8d08dce7c8ee644"} >Finding shortest paths in a graph with weighted edges is algorithmically harder than in an unweighted graph because just because you find a path to a vertex T, you cannot be certain that it is a shortest path. If edge weights are always positive, then you must keep trying until you have considered every in-edge to T. If edge weights can be negative, then it's even harder. You must consider all possible paths. </Text></Block><Block type="paragraph"   key={"fc597b764cbe44dfaba405ea40f323b2"} ><Text key={"50c1b8d85b79419b995fa11a85f05231"} >A classic application for weighted shortest path is finding the shortest travel route to get from A to B. (Think of route planning "GPS" apps.) In general, any application where you are looking for the cheapest route is a possible fit.</Text></Block><Block type="heading-3"   key={"d942e0854eb54b29b29dec9b9fecd5b9"} ><Text key={"9f0a9bd473c044cfb3f50c97fbb7e58b"} >Specifications</Text></Block><Block type="paragraph"   key={"ffb9674113a74b52b4ad5dd0e1e25959"} ><Text key={"8a74a621de4b4634adb6a0789b167a85"} >The shortest path algorithm can be optimized if we know all the weights are nonnegative. If there can be negative weights, then sometimes a longer path will have a lower cumulative weight. Therefore, we have two versions of this algorithm</Text></Block><Block type="code"  data={{"syntax":"text"}}  key={"1154e54da01d48a8ac424cb677aebb9b"} ><Block type="code-line"   key={"d84e85b9dc21408ca6f9ebae70c18d94"} ><Text key={"1d5c77603267452f86ab2df811e27dd6"} >shortest_path_pos_wt(VERTEX v, BOOL display)</Text></Block><Block type="code-line"   key={"187e3c1b281b408a8ea88e732c6c42bc"} ><Text key={"7a3b1500225147ff804ea77b68fddd64"} >shortest_path_pos_wt_file(VERTEX v, BOOL display, STRING filepath)</Text></Block><Block type="code-line"   key={"6e56376b48c94238b2701c71ddfff83c"} ><Text key={"2b748adc5e644addae3f4eee8a87ca6e"} >shortest_path_pos_wt_attr(VERTEX v, BOOL display)</Text></Block></Block><Block type="code"  data={{"syntax":"text"}}  key={"f0312f471aa941b3af418fb6477d18a4"} ><Block type="code-line"   key={"422ed47c62ed4f59bb3652fd65d9cf07"} ><Text key={"a75f3ee881aa41f7b0c80817305a21c0"} >shortest_path_neg_wt(VERTEX v, BOOL display)</Text></Block><Block type="code-line"   key={"970aa2755b414abbbcd75631b5b85976"} ><Text key={"f3ca0312fafa450c82bf6438c695e048"} >shortest_path_neg_wt_file(VERTEX v, BOOL display, STRING filepath)</Text></Block><Block type="code-line"   key={"8fdbb90637154c1b857efad68dd8bbc7"} ><Text key={"06d32e179db24ca99a00415321a4c8cb"} >shortest_path_neg_wt_attr(VERTEX v, BOOL display)</Text></Block></Block><Block type="table"  data={{"aligns":["left","left"]}}  key={"b6b2c5526c664f8c8de36cc3770d100a"} ><Block type="table-row"   key={"1c66c1376ca14baa8348155e99f79884"} ><Block type="table-cell"   key={"e7a8d6ef49e4488c8999414c446cc38d"} ><Block type="paragraph"   key={"4ea283e05fc44a4682f0937859635b1c"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"92c9d2fbae5f442786e471ca39d8bfea"} >Characteristic</Text></Block></Block><Block type="table-cell"   key={"146ef9c3c6d742019239126799537ffc"} ><Block type="paragraph"   key={"bc0088b3c3b14f5a98500cac45cf9d91"} ><Text key={"dee162ced6a74366b75a4fde76bc111c"} >Value</Text></Block></Block></Block><Block type="table-row"   key={"058efa3b3e80470a9a01a37be71baaad"} ><Block type="table-cell"   key={"6bc15adf9a0d45f2b689f0e0c8a7ee45"} ><Block type="paragraph"   key={"1e9276195ec24e0ba224ec4a80a27b00"} ><Text key={"d37e334f3ef94b589c02d47e95e9b63e"} >Result</Text></Block></Block><Block type="table-cell"   key={"d0f70e38df534e87829255f8291adf03"} ><Block type="paragraph"   key={"6b015d97c244407789bb32c6fb63a999"} ><Text key={"ff9dfde6c50f40ac903ebf7a0cdb10ff"} >Computes a shortest distance (INT) and shortest path (STRING) from vertex v to each other vertex T. The result is available in 3 forms:</Text></Block><Block type="list-unordered"   key={"67e9d26bf0b24913bc03e7f8838d85b5"} ><Block type="list-item"   key={"63e102b2fb11468c86ae97a3778cd57b"} ><Block type="paragraph"   key={"188068a01694464cbd6a41aa8756c4e2"} ><Text key={"5b38b91621354e36bbdd7760867f4152"} >streamed out in JSON format</Text></Block></Block><Block type="list-item"   key={"0847e5e57cae479fb47bb0aa07467f27"} ><Block type="paragraph"   key={"88e6956480554c06af8b6acc925c9c37"} ><Text key={"bc96b7b350e1456baeefc040eff170e9"} >written to a file in tabular format, or</Text></Block></Block><Block type="list-item"   key={"925005b8581b4dd490846cab2e2c1ad3"} ><Block type="paragraph"   key={"36fbbced031e4637944ba8b542e2b645"} ><Text key={"bfc62fd641a1432d88e382f7ca6b9d2c"} >stored as two vertex attribute values.</Text></Block></Block></Block></Block></Block><Block type="table-row"   key={"00e5be405b33412696deffb0e669a9ec"} ><Block type="table-cell"   key={"d58975e1cf9c428180547efdd96a73ba"} ><Block type="paragraph"   key={"4356ab3f1cde474f82b74adb3864b3a8"} ><Text key={"01f1e12d55ef41d39915a75ec269357e"} >Input Parameters</Text></Block></Block><Block type="table-cell"   key={"1cdcf35679e248ff95edf9bf2bccbdba"} ><Block type="list-unordered"   key={"cfcdcbc3807d4787b52aee930e7619db"} ><Block type="list-item"   key={"fc15cbb87fe34b92ba65ddea6b47107d"} ><Block type="paragraph"   key={"77a16ba177234464b8a2487eb93dc594"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"f7991de135a949908098095ff2b780ea"} >v: </Text><Text key={"f7991de135a949908098095ff2b780ea"} >id of the source vertex</Text></Block></Block><Block type="list-item"   key={"12f697a645cc4035a78637463bb37549"} ><Block type="paragraph"   key={"2d00c31a9d37485fb2a90742b5483b2c"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"c6450da226714181a5457acfdb3f7bed"} >display</Text><Text key={"c6450da226714181a5457acfdb3f7bed"} >: If true, include the graph's edges in the JSON output, so that the full graph can be displayed.</Text></Block></Block><Block type="list-item"   key={"a5c9090e09974f87877dd583307f13fe"} ><Block type="paragraph"   key={"bef4449ba96b4c6e8b91f539ac0ee2d6"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"c698a950fa5146729d1f260329a37616"} >filepath </Text><Text key={"c698a950fa5146729d1f260329a37616"} >(for file output only): the path to the output file</Text></Block></Block></Block></Block></Block><Block type="table-row"   key={"f9f945358d67410c8a2d8ebb6595fa37"} ><Block type="table-cell"   key={"f27250b7033b4aa1bb9442e139c6e68a"} ><Block type="paragraph"   key={"fd3789bc82d3433280f8354496ba3c8f"} ><Text key={"0ca9e3de6f8442e085ca8c24887b4639"} >Result Size</Text></Block></Block><Block type="table-cell"   key={"9bf6cead0a704d6ea9e9b290c52e6c83"} ><Block type="paragraph"   key={"9ab1cf84036147b4adb6ec64deb8283f"} ><Text key={"1cc596504c484961b41403b4fef16108"} >V = number of vertices</Text></Block></Block></Block><Block type="table-row"   key={"b092fa2de65d4c2ba8f990bebc9388db"} ><Block type="table-cell"   key={"0d572f5ebdf14e37ab1d39ae41179087"} ><Block type="paragraph"   key={"a5e87258366f4b0fbc29d8eedb61ee10"} ><Text key={"de0b1320d4cf4aa69172d82cce36f51d"} >Computational Complexity</Text></Block></Block><Block type="table-cell"   key={"9421629e3a0848eda16cad66b84dc52b"} ><Block type="paragraph"   key={"15764e63a14e4ec9976d78a678ec153a"} ><Text key={"1149801cf2e741f894923390a1214816"} >O(V*E), V = number of vertices, E = number of edges</Text></Block></Block></Block><Block type="table-row"   key={"543e6d3aa6a14d2283eedfc0bf0fa5b5"} ><Block type="table-cell"   key={"d29e725b96424ca9bb2190f402492430"} ><Block type="paragraph"   key={"54ce2bfb0a1e4c8baa4137fcf1322aba"} ><Text key={"74163e8faaf34c69b1cc44606a88c8e5"} >Graph Types</Text></Block></Block><Block type="table-cell"   key={"c7baf6d3e4d04070ae27f012370316cf"} ><Block type="paragraph"   key={"70e2a2d755234f358bf4339479267bef"} ><Text key={"5975d28ec8364ad38353def9eb0b5cb0"} >Directed or Undirected edges,  Weighted edges</Text></Block></Block></Block></Block><Block type="hint"  data={{"style":"info"}}  key={"a2d5cf1278f1402f90226b5b5c58c4db"} ><Block type="paragraph"   key={"d0f7d2b3580442db9ec712623a530a48"} ><Text key={"dc3ab8182d354f46afbe27a8350dd2ba"} >The shortest_path_neg_wt library query  is an implementation of the Bellman-Ford algorithm. If there is more than one path with the same total weight, the algorithm returns one of them.</Text></Block></Block><Block type="heading-3"   key={"0a8fc82eca3c4fe8b9c6b5c4524f6702"} ><Text key={"bc1746f8c1f543509ef56c4e6cf62c95"} >Example</Text></Block><Block type="paragraph"   key={"a519a61e02a04ec3879e730c173f2f39"} ><Text key={"082ce0c3d19c4b16a8a1eb3444e4bbf4"} >The graph below has only positive edge weights. Using vertex A as the source vertex, the algorithm discovers that the shortest weighted path from A to B is A-D-B, with distance 8. The shortest weighted path from A to C is A-D-B-C with distance 9.  </Text></Block><Block type="image"  data={{"assetID":"-LVm32_vlfGnn-3072-z","caption":"generic graph with shortest_pos5 choice"}}  key={"ce0e7afb156f4bfeae030e40768b2436"} ><Text key={"1336b5cd4b0e4f8fb6d5a888f0058f31"} ></Text></Block><Block type="code"  data={{"syntax":"text"}}  key={"a10acca1a1234532a55c03be2f121bd2"} ><Block type="code-line"   key={"6afa76bd829e45c58f65042c36c9f461"} ><Text key={"c3c05600bf7041468b653d994e4d53cf"} >[</Text></Block><Block type="code-line"   key={"60ed3a57a1c84ba19075dfde2a02dd2a"} ><Text key={"cc95cfa68ac3481795ce65ea5151729d"} >{`  \{`}</Text></Block><Block type="code-line"   key={"6ca971cb7b9748c484c13f94853d3cc8"} ><Text key={"0c0005f07c6645e08e5b6d140e90fffc"} >    "ResultSet": [</Text></Block><Block type="code-line"   key={"7d23d4d31b8748a1a482b883163a4cbb"} ><Text key={"ab78daa5f0884e65b119cf38c20ebbcf"} >{`      \{`}</Text></Block><Block type="code-line"   key={"163c9a14799e4db49236f0a3698ac5e2"} ><Text key={"3184fc54b49845ddb19f33f55b74ebce"} >        "v_id": "B",</Text></Block><Block type="code-line"   key={"1456db1243194cff9dae97632198f4b1"} ><Text key={"2e0ebc0aa13e41b0869a0f6968271c04"} >        "v_type": "Node",</Text></Block><Block type="code-line"   key={"4c29d4ab5d7d420b837acb432bb94b21"} ><Text key={"e49bd048810644c98bc39a8dba838590"} >{`        "attributes": \{`}</Text></Block><Block type="code-line"   key={"0167706914734599a7c3abd3fbf57bfa"} ><Text key={"d12f0fc8003d4edcbec24391dd5ee926"} >          "ResultSet.@dis": 8,</Text></Block><Block type="code-line"   key={"176b7c2cbbcc4731b6366b025425dda5"} ><Text key={"1e4faedf501f4ad1a10ad526395e1f25"} >          "ResultSet.@path": [</Text></Block><Block type="code-line"   key={"cdc1fdc3786f4108a87aa526decbd258"} ><Text key={"7bad4af07e97486b8e5056f4f341bb8c"} >            "D",</Text></Block><Block type="code-line"   key={"e8cb68ea09454d29a023b760d6c42b95"} ><Text key={"19ab61bd73f5420cbe9534a2ddbc8f60"} >            "B"</Text></Block><Block type="code-line"   key={"fb9b1ce44af844b5b3ba729f852f810e"} ><Text key={"261f066df90f44e1a5f0b25d982058e5"} >          ]</Text></Block><Block type="code-line"   key={"e32a3f3978574312ad9c3ac03d88d272"} ><Text key={"a3e53add0320461682c4c4588b7953f3"} >{`        \}`}</Text></Block><Block type="code-line"   key={"41dca914099046e4bc4ea229d13ee618"} ><Text key={"3e0eb1d931fe4353837294efe499ab7f"} >{`      \},`}</Text></Block><Block type="code-line"   key={"643ae5a63ce14d3989645f6841d84b3e"} ><Text key={"ae909612bdb54c52a7bb711a04e75f95"} >{`      \{`}</Text></Block><Block type="code-line"   key={"899f00fe08b54c9793717181793ae0ac"} ><Text key={"94dd168e1b284959865161881714c8ab"} >        "v_id": "A",</Text></Block><Block type="code-line"   key={"4c4e6569a14e4245b54435474c8b5bfd"} ><Text key={"284ad26678d14182bcfabfc151790d8a"} >        "v_type": "Node",</Text></Block><Block type="code-line"   key={"f869556bc5ad4d729a720c15c8c030b6"} ><Text key={"504e2682ee7e41f9977028711589e838"} >{`        "attributes": \{`}</Text></Block><Block type="code-line"   key={"b3b300d951fe417ebefc26f8dd020906"} ><Text key={"a02a23b3785940119a3ec6ee88defd82"} >          "ResultSet.@dis": 0,</Text></Block><Block type="code-line"   key={"b8ac27f772814861b5ce2bf3a2b2074d"} ><Text key={"f634699901244a689c073c090f3ec0b0"} >          "ResultSet.@path": []</Text></Block><Block type="code-line"   key={"de46669369d946ae8fb4665aeb8373f9"} ><Text key={"e134ad6f459e4860bd65cf26891736b1"} >{`        \}`}</Text></Block><Block type="code-line"   key={"adcd3f386a4a484a8334c221600300bf"} ><Text key={"4534a519259b4f429f6d6cd44a39d60c"} >{`      \},`}</Text></Block><Block type="code-line"   key={"42c61cfb21c44c5fbad057d1d3fcdc8a"} ><Text key={"87a5ab8d6f91410cbd4896a7c9e92cbc"} >{`      \{`}</Text></Block><Block type="code-line"   key={"19f7b2258da34d859b3b7ce60a688bc8"} ><Text key={"58dfa7e8790346f581d923f966c890c1"} >        "v_id": "C",</Text></Block><Block type="code-line"   key={"f5ba743d5dff4ee0a7ddc455da2ab1a3"} ><Text key={"385495041f3c4000ae4621694319b011"} >        "v_type": "Node",</Text></Block><Block type="code-line"   key={"34048e471da64b13a72b10cce5a484b5"} ><Text key={"262b0442da754611b5a50320ed8b109e"} >{`        "attributes": \{`}</Text></Block><Block type="code-line"   key={"ea2770437b0f48cba16e98b7294dca0f"} ><Text key={"2c6f8a9c6f5d48dd888c9ac5c9f9ab76"} >          "ResultSet.@dis": 9,</Text></Block><Block type="code-line"   key={"48bf5d07fc5d497c827631f429294cd6"} ><Text key={"dccccf6bac284c0ea01b8a201d1410e9"} >          "ResultSet.@path": [</Text></Block><Block type="code-line"   key={"337263838d7c421facaf93d123aae543"} ><Text key={"b4e8978144f24a4daeccb8063d139a67"} >            "D",</Text></Block><Block type="code-line"   key={"e94b8da1707343ec83416e6647b59180"} ><Text key={"c6c735dda8074ae784e2ceb7c5441587"} >            "B",</Text></Block><Block type="code-line"   key={"6f9b850ec1324fefb3798351e102cd30"} ><Text key={"fd248935b71e4758bc55e5842486538c"} >            "C"</Text></Block><Block type="code-line"   key={"8c19a5869e2e48c5bc63267b8de51686"} ><Text key={"b856aeffd32146ffbcbffad091b0bc50"} >          ]</Text></Block><Block type="code-line"   key={"272c057f249c407b9ff8736041f38c75"} ><Text key={"a56933b3e8ae466ba5adfaadf8ea4365"} >{`        \}`}</Text></Block><Block type="code-line"   key={"c66e936c26884932883091726ead16a3"} ><Text key={"5047e949776e4f499adf0e843b547cd6"} >{`      \},`}</Text></Block><Block type="code-line"   key={"8066812e5d5042ba8c986c78d5951219"} ><Text key={"49ef1a5daba3421f89622ccf8e0296ed"} >{`      \{`}</Text></Block><Block type="code-line"   key={"ab949261be1246e3aebdd012706e0833"} ><Text key={"42ec679b60534f7ab6ec3e34ebe9cbf9"} >        "v_id": "E",</Text></Block><Block type="code-line"   key={"bb52d014995a42b58c145a122e25a1d9"} ><Text key={"ee842428d08b4c51ad4eb00fb6bec334"} >        "v_type": "Node",</Text></Block><Block type="code-line"   key={"d7e2e120739148529158d708aaeab43d"} ><Text key={"dc45b60e6d3944faaf687975b7806b09"} >{`        "attributes": \{`}</Text></Block><Block type="code-line"   key={"99c80eebd057403ba7673687db47bedb"} ><Text key={"731a41d414e94b019aeef5ff7b2014e0"} >          "ResultSet.@dis": 7,</Text></Block><Block type="code-line"   key={"b0d537eb0d0f48fcbcd27d3c78d7f908"} ><Text key={"a9550fb5716a4c45815b8588136ac64f"} >          "ResultSet.@path": [</Text></Block><Block type="code-line"   key={"0d3dfdaa24ca495996e9981f3034e491"} ><Text key={"00f9c3a800c84a02bd07e883e7c7c774"} >            "D",</Text></Block><Block type="code-line"   key={"ee58fd4214f5482b93b578522c8835db"} ><Text key={"c498557ce44f4dab8fb544edeeb52086"} >            "E"</Text></Block><Block type="code-line"   key={"296f649f3a3f4415bb1ee1a40fbfaedc"} ><Text key={"633f062c9ab1471dbfc17768827e0191"} >          ]</Text></Block><Block type="code-line"   key={"d149002e3c334a1fa49b563379377608"} ><Text key={"976536d7b3e14da1a9b4d98df9bafbb8"} >{`        \}`}</Text></Block><Block type="code-line"   key={"fea7ae5312f541c7ba88b6bd254892ac"} ><Text key={"3d403adf21994232936caf5e519a5063"} >{`      \},`}</Text></Block><Block type="code-line"   key={"8e58c8d78f4c4ad5ba2f3d531d0272e9"} ><Text key={"05451b4dacf844f19509511aed6704c2"} >{`      \{`}</Text></Block><Block type="code-line"   key={"71d73dc333184144b70049627ffc7d0c"} ><Text key={"43f8d3ad9d5e4a3497639c86932b00bb"} >        "v_id": "D",</Text></Block><Block type="code-line"   key={"33e184da12f84de9974b685083275ac5"} ><Text key={"359d2b8cafff41b4b5580d40c926ad12"} >        "v_type": "Node",</Text></Block><Block type="code-line"   key={"3bae44ebf1894bbf947b031cc0784c0f"} ><Text key={"5d1e18e8dfd746ba89655924b1515e49"} >{`        "attributes": \{`}</Text></Block><Block type="code-line"   key={"28b0183f64f14b8b8290b5a645137f44"} ><Text key={"272d9248d7f04329b0eb239901b6195f"} >          "ResultSet.@dis": 5,</Text></Block><Block type="code-line"   key={"6447fb6f85394e31ad8ec14a354a55ec"} ><Text key={"0817a75a03be4a8793061d80d8eb6b68"} >          "ResultSet.@path": [</Text></Block><Block type="code-line"   key={"50dbbfcc1c8a4adc8c33485286353b82"} ><Text key={"faa512c5c45946caacb90b6d7898048b"} >            "D"</Text></Block><Block type="code-line"   key={"f7f460ccbbb9417cbe41159dc7a04267"} ><Text key={"cd88f1459dc344749270b0fbec7d2578"} >          ]</Text></Block><Block type="code-line"   key={"52729f2bff2b48b2a8a5e930d2275518"} ><Text key={"196903529c6c4fe5b015cb51049422f4"} >{`        \}`}</Text></Block><Block type="code-line"   key={"00c9d56e6c6f44319f31a555378dce8e"} ><Text key={"fd2580b5d4ea4ced8952983f54e90c75"} >{`      \}`}</Text></Block><Block type="code-line"   key={"c4481b8d8fc64b7dae3481ac2d46d346"} ><Text key={"599e388ef23d47bdbfa1fb63bb010034"} >    ]</Text></Block><Block type="code-line"   key={"8cdadfc1a09545ae9154bcdc7f925283"} ><Text key={"99cab947fb5844a3b7563b41c89353a9"} >{`  \}`}</Text></Block><Block type="code-line"   key={"7dddb7409add48f295af24a82eea3ebf"} ><Text key={"d4a27a820d864a8f84aa0c2c187da27f"} >]</Text></Block></Block><Block type="paragraph"   key={"e7bfced917024a9fba8f7547bec4688e"} ><Text key={"df186fa2225149d2a993b3122b265225"} ></Text></Block><Block type="paragraph"   key={"fe39cead634a4aef8344c02d6c57b69b"} ><Text key={"5c271b533acd4d91a82b8ed6a63eb6be"} >The graph below has both positive and negative edge weights. Using vertex A as the source vertex, the algorithm discovers that the shortest weighted path from A to E is A-D-C-B-E, with a cumulative score of 7 - 3  - 2 - 4 = -2. </Text></Block><Block type="image"  data={{"assetID":"-LPSwQUwrIgBU6wbeXce","caption":"shortest_path_wt(A, -1, true, \"json\") on shortest_neg5 graph"}}  key={"2375c429fa624e76bebe4f5e2ea8ddcf"} ><Text key={"b357c07a389a49bbb895e911949d9052"} ></Text></Block><Block type="heading-2"   key={"f5dcf58852784b0e8931f87a244fb75b"} ><Text key={"e7d3a59ea1a54c729f5dde92f46fd309"} >Single-Pair Shortest Path</Text></Block><Block type="paragraph"   key={"77fc119f0b6c464d8e6e1827dc953634"} ><Text key={"cbc58a48bc054d2fa39b833d6d271207"} >The Single-Pair Shortest Path task seeks the shortest path between a source vertex S and a target vertex T. If the edges are unweighted, then use the query in our tutorial document </Text><Inline type="link"  data={{"href":"https://doc.tigergraph.com/2.1.3/GSQL-Demo-Examples.html#GSQLDemoExamplesv2.1-3.Bi-DirectionalShortestPathSearchAlgorithm"}}  key={"0718067082da444bb743ba2942d3eac0"} ><Text key={"1a8c3ee2318947119f9556de8482f461"} >GSQL Demo Examples</Text></Inline><Text key={"4bb344ebee2b4fb7b53f8cbddee3244c"} >.</Text></Block><Block type="paragraph"   key={"b14dc403053e4481a308f3b64aa819c1"} ><Text key={"cd3120c183bd47418c4addce06f91fa7"} > If the edges are weighted, then use the </Text><Inline type="link"  data={{"pageID":"-LP39D2tgkcceY92ogOu"}}  key={"b3e9fac9005c44738bfd3e210ccd686f"} ><Text key={"58fd68b839f7400dabb73c47202026b0"} >Single-Source Shortest Path</Text></Inline><Text key={"c193178f8b884cbbbca75627b7bcbcd1"} > algorithm.  In the worst case, it takes the same computational effort to find the shortest path for one pair as to find the shortest paths for all pairs from the same source S. The reason is that you cannot know whether you have found the shortest (least weight) path until you have explored the full graph. If the weights are always positive, however, then a more efficient algorithm is possible. You can stop searching when you have found paths that use each of the in-edges to T.</Text></Block><Block type="heading-2"   key={"4e703e9a813d4c03ac8dd34dfb14151d"} ><Text key={"bcbc6a5130ca429da6009a0f916d60a2"} >All-Pairs Shortest Path</Text></Block><Block type="hint"  data={{"style":"warning"}}  key={"4f15aeacf7b2470691af485202bf331f"} ><Block type="paragraph"   key={"66f8d7dc959d4529956ab7fefad0b5ea"} ><Text key={"51f2b57c43b14c8d8a00de5e5df2dc9d"} >The All-Pairs Shortest Path algorithm is costly for large graphs, because the computation time is O(V^3) and the output size is O(V^2). Be cautious about running this on very large graphs.</Text></Block></Block><Block type="paragraph"   key={"f109f7fdc20d45d3a014148df7ee1adc"} ><Text key={"334e3a7a0ac9467ca16e47399235a314"} >The All-Pairs Shortest Path (APSP) task seeks to find shortest paths between every pair of vertices in the entire graph. In principle, this task can be handled by running the Single-Source Shortest Path (SSSP) algorithm for each input vertex, e.g., </Text></Block><Block type="code"  data={{"syntax":"text"}}  key={"c43eaeb99b4647df9b7cde9a4a0254c2"} ><Block type="code-line"   key={"17286d1a4cf14e3f9e91634a2dbfc0bb"} ><Text key={"8be397d31e654133ba3a7534754a5340"} >CREATE QUERY all_pairs_shortest(INT maxDepth, BOOL display, STRING fileBase)</Text></Block><Block type="code-line"   key={"d295b8f2e5d14049b992f3d1fe01ea62"} ><Text key={"85f4efb36b1f407aa0a4dad7d63579a1"} >{`\{`}</Text></Block><Block type="code-line"   key={"1c53b167ce0f443c978d67c7f3381686"} ><Text key={"ea32e746bd3246679be231f4c5e5a75e"} >{`  Start = \{Node.*\};`}</Text></Block><Block type="code-line"   key={"fa53b4aa68044b3aa61fdcbfba2d8f9b"} ><Text key={"9e887c7f0126431a9cb4bbd875eeaf00"} >  Result = SELECT s FROM Start:s</Text></Block><Block type="code-line"   key={"c7b3f2ddd040449c804510408b82d1fe"} ><Text key={"26e147c2b82d484ba45d736a55e9ba0f"} >        POST-ACCUM</Text></Block><Block type="code-line"   key={"32a0c934cb6c4d50a165206b0a3ad07b"} ><Text key={"64928b1a800c43ffbb2160e131318947"} >          shortest_ss_any_wt_file(s, maxDepth, display, fileBase+s);</Text></Block><Block type="code-line"   key={"3247fdd1e11940449a2384ef63dee04a"} ><Text key={"6e71e626679e49b1972b94ea4557d3b4"} >{`\}`}</Text></Block></Block><Block type="paragraph"   key={"ba21d533ce294451842554deb56da0a3"} ><Text key={"94a02aec9b164ad09b0cfad52245414a"} >This example highlights one of the strengths of GSQL: treating queries as stored procedures which can be called from within other queries.</Text></Block><Block type="paragraph"   key={"403ec4e5df3c4bafac7b93871bafeef0"} ><Text key={"38dda56ca2854fb6817b94bb213deccc"} >For large graphs (with millions of vertices or more), however, this is an enormous task. While the massively parallel processing of the TigerGraph platform can speed up the computation by 10x or 100x, consider what it takes just to store or report the results. If there are 1 million vertices, then there are nearly 1 trillion output values. </Text></Block><Block type="paragraph"   key={"527bec6a7bcf401e8811774fb8cff5d5"} ><Text key={"9280875322b04ce4824b472facd043eb"} > There are more efficient methods than calling the single-source shortest path algorithm n times, such as the Floyd-Warshall algorithm, which computes APSP in O(V^3) time.</Text></Block><Block type="paragraph"   key={"0a005bf4c2a04d318daad1d09398b3b5"} ><Text key={"f73e16b7058d478e88cddc35425857dc"} >Our recommendation:</Text></Block><Block type="list-unordered"   key={"a2ff9fa51f074d508b37849c480a22e9"} ><Block type="list-item"   key={"b3d2564370f344b6bc734713f243979c"} ><Block type="paragraph"   key={"de213a84593f4ceea672c139cdab4918"} ><Text key={"eba579e2760d4ee0943becdbfa58c2dd"} >If you have a smaller graph (perhaps thousands or tens of thousands of vertices), the APSP task may be tractable.</Text></Block></Block><Block type="list-item"   key={"2b7a0ea1704940c88f31a1e9b1ff38fd"} ><Block type="paragraph"   key={"a846934ad58746af9a82d4356e721073"} ><Text key={"eb89deb779804880ab9bf2a0b22abaae"} >If you have a large graph, avoid using APSP.</Text></Block></Block></Block><Block type="heading-2"   key={"a424f0ec45fd49a0a58a088b8f6db726"} ><Text key={"36a698f5e3c6415d891762686c1512d4"} >Minimum Spanning Tree (MST)</Text></Block><Block type="heading-3"   key={"22735460a74e4933b97cb1d3f339579d"} ><Text key={"fdc5ba141dde4fe8a4bd9509cd3c9f9a"} >Description and Uses</Text></Block><Block type="paragraph"   key={"5f02b21c1538467b8b511cd1c01f93f6"} ><Text key={"887facd4417f4ea8969d070d687c65ef"} >Given an undirected and connected graph, a minimum spanning tree is a set of edges which can connect all the vertices in the graph with the minimal sum of edge weight. A parallel version of the PRIM algorithm is implemented in the library:</Text></Block><Block type="list-ordered"   key={"df3aa21b18a445d881ab1ad34a29a67c"} ><Block type="list-item"   key={"0abace4721d445e086c3ac9e2444f17f"} ><Block type="paragraph"   key={"79badafd46c7484b99b13fb2b2b27e8b"} ><Text key={"3311f512c5c3458ab2839b8f31e6feb6"} >{`Start with a set A = \{ an arbitrary vertex r \}`}</Text></Block></Block><Block type="list-item"   key={"ac47645e47c74a7a81f28e93a7721ace"} ><Block type="paragraph"   key={"aff84968df1647a8a21918af32899bb1"} ><Text key={"b73216e1e39d43fb9fe6d82caa1a268f"} >For all vertices in A, find another vertex y in the graph not A and y is connected to a vertex x in A such that the weight on the edge  e(x,y) is the smallest among all such edges from a vertex in A to a vertex not in A. Add y to A, and add the edge (x,y) to MST</Text></Block></Block><Block type="list-item"   key={"172427ed66224304aeec5937aa386f0f"} ><Block type="paragraph"   key={"566e2442a10c4183afda17553556ac9b"} ><Text key={"bf81692c87534cba974c272684514009"} >Repeat 2 until A has all vertices in the graph.  </Text></Block></Block></Block><Block type="heading-3"   key={"95fbdae3f37344f3987a4c27eebba3a8"} ><Text key={"847ea31d020f4916b8adee276ca14ae4"} >Specifications</Text></Block><Block type="code"  data={{"syntax":"text"}}  key={"5a5c1c7fc8d7448a9096803949382223"} ><Block type="code-line"   key={"f8e6fddb41a544118e565f72fc0901fc"} ><Text key={"12e26f580ba94e159e88ba487e131104"} >mst (VERTEX source)</Text></Block><Block type="code-line"   key={"f6636efe62094342af4fe5dfc41d0245"} ><Text key={"c870bf13fc734104b49e0c021f24ba7f"} >mst_file (VERTEX source, FILE f)</Text></Block><Block type="code-line"   key={"a36345b305514891905244f4c883b1b7"} ><Text key={"ed18b92dc75f47ad9503148c7a14f6a9"} >mst_attr (VERTEX source)</Text></Block></Block><Block type="table"  data={{"aligns":["left","left"]}}  key={"c56ac4c314dd41ad936a1329e23dd38d"} ><Block type="table-row"   key={"b442ed86a03b44d7a12d3fb2d3621d34"} ><Block type="table-cell"   key={"cc07b76f3e0e4146afa3e80cb6d3db33"} ><Block type="paragraph"   key={"2818e845394e47039d15bf159a4bcc9d"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"c0443aa73e7e454ea6d6a99f1ceef38e"} >Characteristic</Text></Block></Block><Block type="table-cell"   key={"d5a2ceeea65f4c37a11a1dad374bc88a"} ><Block type="paragraph"   key={"aa8bd60985044190b16e746b56128e3d"} ><Text key={"d403c7d81b33423eb281200fee3419dc"} >Value</Text></Block></Block></Block><Block type="table-row"   key={"7e7a86fd9a8d400081a51f8bbbb7fe7e"} ><Block type="table-cell"   key={"9d247955fa8f4ed8a247844b0102ee06"} ><Block type="paragraph"   key={"4bb1446f94e44223ac0bb8b1b08b085e"} ><Text key={"02e296278e114485b6112f71639d7a37"} >Result</Text></Block></Block><Block type="table-cell"   key={"d07c58e08e4e40aab3a2a8c577ac544d"} ><Block type="paragraph"   key={"9f7298fb78574a97b92576b61a505277"} ><Text key={"8ff2ef8b55ce460ca5fef73155631c42"} >Computes a MST. The result is available in 3 forms:</Text></Block><Block type="list-unordered"   key={"a6acc19a8a224570894985e1c3743481"} ><Block type="list-item"   key={"9560555574df4c13b23c78776fdf9e7c"} ><Block type="paragraph"   key={"72a2e3536cda45ac82e7305d78493f6c"} ><Text key={"fa56fe55d3be4775a15fd4e3a7c9c9aa"} >streamed out in JSON format</Text></Block></Block><Block type="list-item"   key={"f1b109b4a182486fa02b8dccf8fa6865"} ><Block type="paragraph"   key={"99e346f7f70344cb8d77b849b0899acc"} ><Text key={"7b1bb967cf7a4a00af0d6d778de7f984"} >written to a file in tabular format, or</Text></Block></Block><Block type="list-item"   key={"56ff59b03cec4f4e93b5c22100921d71"} ><Block type="paragraph"   key={"64452055620b403a909239ecb1aaffad"} ><Text key={"06804187cd4f4653af557dc3582eed4f"} >stored as an edge attribute value.</Text></Block></Block></Block></Block></Block><Block type="table-row"   key={"abda0261fcdf483f835b4ff38e1bafbe"} ><Block type="table-cell"   key={"4607ea46f4894f629438b426f9e121e8"} ><Block type="paragraph"   key={"d7cfca9c077040ee91d57bcbac4bac56"} ><Text key={"deb383399d8543e69946f42e1b75a980"} >Input Parameters</Text></Block></Block><Block type="table-cell"   key={"d096fc78e2fe41e485afc841db252928"} ><Block type="list-unordered"   key={"445b05073ebd4ce49e3f29cf8f00956e"} ><Block type="list-item"   key={"a02ba8d8357a43af8a141096455c9b47"} ><Block type="paragraph"   key={"48128b89e67f4e5cbcad9742578f5589"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"a7078d4e071443a98122dacae3e27d7f"} >source: </Text><Text key={"a7078d4e071443a98122dacae3e27d7f"} >id of the source vertex</Text></Block></Block><Block type="list-item"   key={"1e1cad28f4d245ed943142ea91bcef5a"} ><Block type="paragraph"   key={"b0a7b17182e0444fa5f9efaf4ef2910c"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"817933c5e2c347be9146ed175da50285"} >filepath </Text><Text key={"817933c5e2c347be9146ed175da50285"} >(for file output only): the path to the output file</Text></Block></Block></Block></Block></Block><Block type="table-row"   key={"42b2c3c42f834fef889ba0f9fc68d40c"} ><Block type="table-cell"   key={"89d7b72c78934a28a5d05db45feaf784"} ><Block type="paragraph"   key={"ef76cf2e6c0e43d297bae1c384ed0b34"} ><Text key={"6c25971c676347f2a53d8282a75fc544"} >Result Size</Text></Block></Block><Block type="table-cell"   key={"a030e1663be34bf1b689f59407c0d1fe"} ><Block type="paragraph"   key={"ed5210cba9374c21b60b8d189533a43b"} ><Text key={"ce6ac68f89c14a178e503dd7189fdd35"} >V - 1 = number of vertices - 1</Text></Block></Block></Block><Block type="table-row"   key={"df642627c4c6462ebcc7c6aa494abf44"} ><Block type="table-cell"   key={"b25f48e63e30493c9431dff1bed50a80"} ><Block type="paragraph"   key={"7e80c2f95a924ed28a464f19e02feb7d"} ><Text key={"ec51c8c588924372ad3215c6ea65cb73"} >Computational Complexity</Text></Block></Block><Block type="table-cell"   key={"7f94cf1fca7b4357883719a1cb3c0eed"} ><Block type="paragraph"   key={"49967c1db86741d6a8279aa6a74037c0"} ><Text key={"c124c4a54fd8421485f1b7192516a2ed"} ></Text></Block></Block></Block><Block type="table-row"   key={"9eddadf1a752422faf281fba899184d8"} ><Block type="table-cell"   key={"28e477637f064d87a0c2edc6ef81f5ef"} ><Block type="paragraph"   key={"cdb331636a5c43ba9572ff44f22a3b70"} ><Text key={"cbcdd76867f543afab4432dd5e588de7"} >Graph Types</Text></Block></Block><Block type="table-cell"   key={"f76d944a56d043a9b30103197af45d85"} ><Block type="paragraph"   key={"68820d8b90ee4d13abebf0f020aac003"} ><Text key={"f80a21fe354e460cb5e54bb0330ae142"} >Undirected edges and connected</Text></Block></Block></Block></Block><Block type="paragraph"   key={"fe2b4589f2c3498d90439352d37c0383"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"75287c247a7b4c79af8274fd78677efc"} >Example</Text></Block><Block type="paragraph"   key={"42f6a1afc09a4b5f97a37fb7bc789c6f"} ><Text key={"94188185267d47a5894a993ac0b56451"} >In social10 graph, we consider only the undirected Coworker edges.  </Text></Block><Block type="image"  data={{"assetID":"-LdGdwZbZHDCW_JC4IAa","caption":"social10 graph with Coworker edges"}}  key={"d433ea9cb56f47e3aeff28a06cb344d4"} ><Text key={"21eb69b1cf084658b492cb90461ba61c"} ></Text></Block><Block type="paragraph"   key={"c1c32f06ab8f4bb68a0a5b8c3897277e"} ><Text key={"31ae3759e351491786267b5468fb7f1b"} >This graph has 3 components. Minimum Spanning Tree finds a tree for one component, so which component it will work on depends on what vertex we give as the starting point. If we select Fiona, George, Howard, or Ivy as the start vertex, then it work on the 4-vertex component on the left. You can start from any vertex in the component and get the same or an equivalent MST result.</Text></Block><Block type="paragraph"   key={"89eeedd6be78489a8c74e42dee1e6316"} ><Text key={"8ec33bcd146d4fdb824b9c2f81935406"} >The figure below shows the result of mst(("Ivy", "Person")). Note that the value for the one vertex is ("Ivy","Person"). In GSQL, this 2-tuple format which explicitly gives the vertex type is used when the query is written to accept a vertex of any type.</Text></Block><Block type="image"  data={{"assetID":"-LdGeDsZi_paB_WiTwfz","caption":"mst((\"Ivy\",\"Person\")) on social10 graph, with Coworker edges"}}  key={"2f7da9306bf34dcb86bd6dfcc8152f9d"} ><Text key={"720fcd29e2f447709bec45ee56eb4a12"} >mst(("Ivy","Person"))</Text></Block><Block type="paragraph"   key={"4ef77e6ba35846219352e3f8eefc25e5"} ><Text key={"ef9a045cba7240a1882dc1d9ff38bd69"} >File output:</Text></Block><Block type="code"  data={{"syntax":"text"}}  key={"69ab3a70140b45d1972610c9d44923b8"} ><Block type="code-line"   key={"7d6d8da137bc4711a76b6417853508b4"} ><Text key={"de552599a37241f78acdb97ee3250ebc"} >From,To,Weight</Text></Block><Block type="code-line"   key={"6906538527654774a08080c48d996a6f"} ><Text key={"671d1c7f3b43465d881ea6128f75dcb6"} >Ivy,Fiona,6</Text></Block><Block type="code-line"   key={"616ed8072d144f558eb3d7f4f3a69ddc"} ><Text key={"685c3f134fb243d9a60738ffa1a41835"} >Ivy,Howard,4</Text></Block><Block type="code-line"   key={"a9b176d4986f41cdb1752dd0aa452d76"} ><Text key={"8ae35c227cd3496c8974e36ec190621a"} >Ivy,George,4</Text></Block></Block><Block type="paragraph"   key={"34d088eea10b4e03aef848f9276b6e72"} ><Text key={"697997f8dd9d4c30aab3c38ec99d92ef"} >The attribute version requires a boolean attribute on the edge, and it will assign the attribute to "true" if that edge is selected in the MST:</Text></Block><Block type="image"  data={{"assetID":"-LdLJB-EGdesWwzhgtqs","caption":"mst_attr((\"Ivy\",\"Person\")) on social10 graph, with Coworker edges \u0026 edge attribute \"flag\""}}  key={"bdb1a1e3c18e47d58b877cd910d0c72a"} ><Text key={"a2a6e47c23614947a6abf3a0dfbe1f19"} >mst(("Ivy","Person")) on social10 graph, with Coworker edges</Text></Block><Block type="heading-2"   key={"30ab810ea04e4b3396fa467443919183"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"a01a38f08e7e44a9ae8112f4ec6ed309"} >Cycle Detection</Text></Block><Block type="heading-3"   key={"156955b633514384910e6207509bd58f"} ><Text key={"a3b9b90267f84e73b0e91160d07bba73"} >Description and Uses</Text></Block><Block type="paragraph"   key={"b7d658540e154970882b2051ea856e49"} ><Text key={"37567e23ccb34a7ba30789387d573885"} >The Cycle Detection problem seeks to find all the cycles (loops) in a graph. We apply the usual restriction that the cycles must be "simple cycles", that is, they are paths that start and end at the same vertex but otherwise never visit any vertex twice.</Text></Block><Block type="paragraph"   key={"505c1c0798ea44f096e8b97236438bd0"} ><Text key={"6fde0bdd8efb4b7c9f242150354566ff"} >There are two versions of the task: for directed graphs and undirected graphs. The GSQL algorithm library currently supports only directed cycle detection. The </Text><Inline type="link"  data={{"href":"https://en.wikipedia.org/wiki/Rocha%E2%80%93Thatte_cycle_detection_algorithm"}}  key={"3ee0425396044e929e0a2fd94ee9bb65"} ><Text key={"25c50dfb41d34771a9193fa3d5dcbba6"} >Rocha–Thatte algorithm</Text></Inline><Text key={"99eb3c0f8115499a93ea14ea82cccb9e"} > is an efficient distributed algorithm, which detects all the cycles in a directed graph. The algorithm will self-terminate, but it is also possible to stop at k iterations, which finds all the cycles having lengths up to k edges.</Text></Block><Block type="paragraph"   key={"cb5c77231a0848288732f0ef73eeeac9"} ><Text key={"c542f922e05f4b89a38e575a99623d79"} >The basic idea of the algorithm is to (potentially) traverse every edge in parallel, again and again, forming all possible paths. At each step, if a path forms a cycle, it records it and stops extending it.  More specifically:

</Text><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"c542f922e05f4b89a38e575a99623d79"} >Initialization: </Text><Text key={"c542f922e05f4b89a38e575a99623d79"} >
For each vertex, record one path consisting of its own id. Mark the vertex as Active.</Text></Block><Block type="paragraph"   key={"62317626e5cc4f7b93f4ecaaee964274"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"c748b53638c94e269c7f9747d3bb32ca"} >Iteration steps:
</Text><Text key={"c748b53638c94e269c7f9747d3bb32ca"} >Fo each Active vertex v:</Text></Block><Block type="list-ordered"   key={"0eab5e7fc04c4dd086d111b4877b8041"} ><Block type="list-item"   key={"996bf9fb93584b5697ae71f25a6c9619"} ><Block type="paragraph"   key={"f80981b2539f476a82f4967d53d70c35"} ><Text key={"f93a91f7d63e4b54a3a9ab45a4f708bd"} >Send its list of paths to each of its out-neighbors.</Text></Block></Block><Block type="list-item"   key={"b1ff80140df14e01aa6f929440b26928"} ><Block type="paragraph"   key={"0965a231b9e24100b3c81e732173c0d7"} ><Text key={"266270247a0e4c3db78fbc04a5a240a6"} >Inspect each path P in the list of the paths received:</Text></Block><Block type="list-unordered"   key={"7e8bf479b7b54b4682a00cb61876b69c"} ><Block type="list-item"   key={"537e40c4e69b4965afd1b1c003b83514"} ><Block type="paragraph"   key={"da1abf9a6a9f4e8d8ebb6aeed0f27b92"} ><Text key={"8c599ac14445486a8fec82c3922a5dec"} >If the first id in P is also id(v), a cycle has been found:</Text></Block><Block type="list-unordered"   key={"d8cd06c7dff7439088606af3984ee961"} ><Block type="list-item"   key={"45239bdee2094f7583cf946007a7f740"} ><Block type="paragraph"   key={"134b4fd65a804261b7ae40a9f622f681"} ><Text key={"3dea600f8ee64adfa289a40e196b7d10"} >Remove P from its list.</Text></Block></Block><Block type="list-item"   key={"bd8ae4f1496848ba84ee40377f9f7af8"} ><Block type="paragraph"   key={"257d2216f9b04353938b40142090655e"} ><Text key={"033cdf8aed694d55a04c13075ec7bbca"} >If id(v) is the least id of any id in P , then add P to the Cycle List.
(The purpose is to count each cycle only once.)</Text></Block></Block></Block></Block><Block type="list-item"   key={"66198832de8c4b80a1dfd8eb23e596d6"} ><Block type="paragraph"   key={"b7a31492db4c4b6baae0dbe5cd86d3bf"} ><Text key={"c8d70b9681fe4c988b8cffd00b58e51c"} >Else, if id(v) is somewhere else in the path, then remove P from the path list (because this cycle must have been counted already).</Text></Block></Block><Block type="list-item"   key={"84f988053a9e40989cf2fb8b8881c28a"} ><Block type="paragraph"   key={"f52ccee814224995a1be216d3a0ef586"} ><Text key={"b75f759aafba4bc189c3677e48e32232"} >Else, append id(v) to the end of each of the remaining paths in its list.</Text></Block></Block></Block></Block></Block><Block type="heading-3"   key={"1532e09a07504c56bc84df3a977f86c8"} ><Text key={"3a77082a31b04c0f8e4e8ee530e8d816"} >Specifications</Text></Block><Block type="code"  data={{"syntax":"text"}}  key={"babfc7ca9b3d41648f76c483993727dd"} ><Block type="code-line"   key={"036179b53cd94ee58a6171b818aa4c2f"} ><Text key={"721582fd7b43400b829f956a1759c085"} >cycle_detection (INT depth)</Text></Block><Block type="code-line"   key={"3dd112c2551d4a1dad11fc6d33f5477e"} ><Text key={"45c8f45e32134e3ea38d9ecdcb7b3dd2"} >cycle_detection_file (INT depth, FILE f)</Text></Block></Block><Block type="paragraph"   key={"20f658df9c3545fd8d726d61474d4952"} ><Text key={"02e59ef6b54d428bb83e7ae66b4fc727"} >The algorithm traverses all edges. A user could modify the GSQL algorithm so that it traverse only edges of a certain type.</Text></Block><Block type="table"  data={{"aligns":["left","left"]}}  key={"9ed93a9bee334ffb82851eb39bd6719b"} ><Block type="table-row"   key={"8c07b555b52c442d85388cafec1d305f"} ><Block type="table-cell"   key={"9cd9be3626c24e399ca802035585e85d"} ><Block type="paragraph"   key={"2cf02be66e8f4648b0e75c732b1f0f53"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"9f14aad6eeed41dfbe4b7492579974fc"} >Characteristic</Text></Block></Block><Block type="table-cell"   key={"9ebe82fd97104b66a9c8d4cdc8d6cdac"} ><Block type="paragraph"   key={"a4963f7becda4b8d950b250ebd1892f2"} ><Text key={"18ae360284ad426ab290b574ee4d3abb"} >Value</Text></Block></Block></Block><Block type="table-row"   key={"5c1b863425814cacb38f390cffa40483"} ><Block type="table-cell"   key={"7d85b352ac414c74916de4a761a30e30"} ><Block type="paragraph"   key={"6ce8668c2d734335a1b6dd47986bce63"} ><Text key={"207bc64aa02642fab2106844e7c9e30e"} >Result</Text></Block></Block><Block type="table-cell"   key={"8ff91a2234774c89814ba043ee286dbe"} ><Block type="paragraph"   key={"b4ac85adb3f245678627c50859bdc7b6"} ><Text key={"a5be603ea5e84f668d878b124969489b"} >Computes a list of vertex id lists, each of which is a cycle. The result is available in 2 forms:</Text></Block><Block type="list-unordered"   key={"d9cebf736602455d81f72a6fd961da40"} ><Block type="list-item"   key={"47a40b0347164097b7f08600fb9692bf"} ><Block type="paragraph"   key={"b2be6363a6ac4ecb8a500406842bc19b"} ><Text key={"b22c71f0f9564192b0290e58fb8cb5c8"} >streamed out in JSON format</Text></Block></Block><Block type="list-item"   key={"4289a3710adc429e903cedc93bd3a8ca"} ><Block type="paragraph"   key={"a546a5f8f9084964a3958ab68bed85b7"} ><Text key={"d839765c548f4b9493208465406f0e78"} >written to a file in tabular format</Text></Block></Block></Block></Block></Block><Block type="table-row"   key={"16f0d4ac52c14ac497a381a4f87af695"} ><Block type="table-cell"   key={"7db9c57af29d482090ce76fc4e0cbacf"} ><Block type="paragraph"   key={"e2fde3c40f074fc0a6f8e8d60442869d"} ><Text key={"4c8426f2736f4b29ab754c048ed39fb8"} >Input Parameters</Text></Block></Block><Block type="table-cell"   key={"e5975fed17c742e7a70234a35be21ad9"} ><Block type="list-unordered"   key={"2f393174028244e4a53697e5083ce911"} ><Block type="list-item"   key={"b8c06d7a194f40e09533b48e16e558cf"} ><Block type="paragraph"   key={"c1bf0d74bd2d47c5a2699f51b10d5569"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"33b7676251684590bd2c63c2ca0e4075"} >depth: </Text><Text key={"33b7676251684590bd2c63c2ca0e4075"} >the maximum cycle length to search for = maximum number of iterations</Text></Block></Block><Block type="list-item"   key={"67f11dadb9084c5ab6f1723e94786183"} ><Block type="paragraph"   key={"7d0bde9c85e44e4cafafb74c3d6dc53a"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"9e52e4a50c4c4489bae00b5dd31a6e8f"} >filepath </Text><Text key={"9e52e4a50c4c4489bae00b5dd31a6e8f"} >(for file output only): the path to the output file</Text></Block></Block></Block></Block></Block><Block type="table-row"   key={"d772b93b85f740f3b132d72d6d8f2386"} ><Block type="table-cell"   key={"5141839145e64c4eb492b5e1740be983"} ><Block type="paragraph"   key={"90f81d6262084531a3c1b59adea4d1fc"} ><Text key={"b4beb0b9877247ce86f8d561e5e98796"} >Result Size</Text></Block></Block><Block type="table-cell"   key={"82a5cbe5318b49919266f6ad35f3a552"} ><Block type="paragraph"   key={"c6ac5637726543b89ebc3210c870ae16"} ><Text key={"cdf1f528383d49de9a10008b348af07b"} >Number of cycles * average cycle length</Text></Block><Block type="paragraph"   key={"8d1430619ccd468a815cc0adcaa5ee23"} ><Text key={"595860aa0cf243e0b53038a36253b273"} >Both of these measures are not known in advance.</Text></Block></Block></Block><Block type="table-row"   key={"c40d2430f96e48838c2d4de2360131d2"} ><Block type="table-cell"   key={"47bcee9a1b01432ebec3ab85bbe18de9"} ><Block type="paragraph"   key={"ec00c7f11aa245958e22600d24b6ade4"} ><Text key={"ff8605a508284d24b77c57b5033de641"} >Computational Complexity</Text></Block></Block><Block type="table-cell"   key={"9c43115c08f145fabce12141f6086050"} ><Block type="paragraph"   key={"a7950e3b9a154d5ab95bf35f82c9425c"} ><Text key={"f64cd104ebb441478f975de28f8f14b5"} >O(E *k), E = number of edges.</Text></Block><Block type="paragraph"   key={"fd74411d178d456d8760a858bc4fb237"} ><Text key={"6d443c9ff2204e72ab596e54520a25ee"} >k = min(max. cycle length, depth paramteter)</Text></Block></Block></Block><Block type="table-row"   key={"ed16304ac8274c9c93fbd66305f6d4fa"} ><Block type="table-cell"   key={"a01df63f34464cb382b99080c61af4dc"} ><Block type="paragraph"   key={"c20d005ce7064ef3affd99a48b111909"} ><Text key={"3a76759c6eac43c89a88039c158d1f90"} >Graph Types</Text></Block></Block><Block type="table-cell"   key={"9347cba7016d4efdab4f7b60e1492f39"} ><Block type="paragraph"   key={"5df5798623f44ec78a5f65aab766836e"} ><Text key={"710a2de16ad840ca87a980d4e4d119b6"} >Directed</Text></Block></Block></Block></Block><Block type="paragraph"   key={"1c1b483bbc4b4d37b6d510852d29cd68"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"e926ed2936ff4398a4775099c0b13132"} >Example</Text></Block><Block type="paragraph"   key={"cec0782c39c44417834869239dd3e8a7"} ><Text key={"b7bd9e2abba047e587b2a21db74f3c17"} >In the social10 graph, there are 5 cycles, all with the Fiona-George-Howard-Ivy cluster.</Text></Block><Block type="image"  data={{"assetID":"-Lc29_MEelW_ucxGhP_e","caption":"cycle_detection(10) on social10 graph"}}  key={"618296613f5049abbab20d9c21a1c4a3"} ><Text key={"17c4d7866fc8465b9357b74a177f85d7"} ></Text></Block><Block type="code"  data={{"syntax":"text"}}  key={"e12e40b1a72f4cc0b153cb8e144bc1ad"} ><Block type="code-line"   key={"c1a2cf8fbedc45c0aa069f3111fcc7df"} ><Text key={"24430522988f4b0988cdd97155038943"} >[</Text></Block><Block type="code-line"   key={"47e689ca3d8d4c83bb59a30257c8d87b"} ><Text key={"edf7fc83010042138904cc51b1e0fff1"} >{`  \{`}</Text></Block><Block type="code-line"   key={"a5feb740cb24443fbbd45a07aa1503f9"} ><Text key={"8b61510159b3493c93429e36a3fbdda4"} >    "@@cycles": [</Text></Block><Block type="code-line"   key={"a4708c08a8ec43c1822f0867f2ea1337"} ><Text key={"6134db10cc0c49908c19e65987971306"} >      [</Text></Block><Block type="code-line"   key={"8f4d0f07cace4d968d52050029c2cfc5"} ><Text key={"2c51b124656b47c98b25330db55f6073"} >        "Fiona",</Text></Block><Block type="code-line"   key={"3f09a3494cae4fda8eb5dae26d0eccb6"} ><Text key={"6499ce3d99d941f7902f01eac399dbf3"} >        "Ivy"</Text></Block><Block type="code-line"   key={"2947b6023d5c4f7988c35f615e368a29"} ><Text key={"4b7ab4c64bfe4444b5a3ed9bc97cb6b6"} >      ],</Text></Block><Block type="code-line"   key={"c70f2de40a104cbfb19e15f00c14f6d9"} ><Text key={"6b83f831707949978f4aa5eec522f4a5"} >      [</Text></Block><Block type="code-line"   key={"aa348d2fd33f46c0a076a233149a1891"} ><Text key={"0256f550135e4ba7a36d9416798aa8c1"} >        "George",</Text></Block><Block type="code-line"   key={"124eb1b2300f46a286e83efd088b5d90"} ><Text key={"24987bb4a4834639b40aff830105ea06"} >        "Ivy"</Text></Block><Block type="code-line"   key={"3521622ff8944e5eb40dc22ca24d19bc"} ><Text key={"b8df53d5dd184c529eaee9b6b61df1b8"} >      ],</Text></Block><Block type="code-line"   key={"e2d1b600ea2a44cea1de1b5fbf032227"} ><Text key={"292525dbe1b84427bda3c97370867f18"} >      [</Text></Block><Block type="code-line"   key={"df0de1488a0f4ef8aff1a72674901caa"} ><Text key={"566c57e5084142849b9a4525a5b628ce"} >        "Fiona",</Text></Block><Block type="code-line"   key={"457cce907e4947e5a5d6dc0080f1d023"} ><Text key={"06e3ab2a784c479d9cbcf5c3ea34d16c"} >        "George",</Text></Block><Block type="code-line"   key={"8ea24f653b184e5aaa2793859e162a5d"} ><Text key={"981afdd00075410fb9e316eeeebacd86"} >        "Ivy"</Text></Block><Block type="code-line"   key={"b947c26e9d844cff9060090b594c768b"} ><Text key={"735154b4e1984bd6834655d1c8bb0b44"} >      ],</Text></Block><Block type="code-line"   key={"056b0f8c7779462d9c2617c483d79c58"} ><Text key={"e956bdc0c277437f8f44c52a7e2c4ed1"} >      [</Text></Block><Block type="code-line"   key={"520bf0a6866041a985060def7568616d"} ><Text key={"b505726d7266428886e960330b8f8ea2"} >        "George",</Text></Block><Block type="code-line"   key={"6511eed69e4f433299a78d539948d468"} ><Text key={"32071c87849b4ae88d37d663a45fba0f"} >        "Howard",</Text></Block><Block type="code-line"   key={"9efd6e02f9334d8ca7365fd169e601de"} ><Text key={"7e3c7aa5af204ed4becced127e28e62f"} >        "Ivy"</Text></Block><Block type="code-line"   key={"d2227482456e41688e9f851d56268ab8"} ><Text key={"f489e03cb5de4484983999e308fc3ea1"} >      ],</Text></Block><Block type="code-line"   key={"c2fd25e1009e4946848142dd6e599389"} ><Text key={"7caa2fb226114e3c8510a247f3a0bf5a"} >      [</Text></Block><Block type="code-line"   key={"b6b915db337440b39a4a33c21d78aa6c"} ><Text key={"8463d6c9cb5b4ed99eca6cb44837ed96"} >        "Fiona",</Text></Block><Block type="code-line"   key={"2f573fe7a41f4c739c8bf82c489674c1"} ><Text key={"bb6a46dfe331414ba1444be3e5585930"} >        "George",</Text></Block><Block type="code-line"   key={"6640790c134c4988b480475cd7d16abb"} ><Text key={"43d3d85613474aaba53830c921db41ca"} >        "Howard",</Text></Block><Block type="code-line"   key={"0cb04423c47644e997028b8af90f1e75"} ><Text key={"14a10ba76fc14b12b6a4666d422df1f0"} >        "Ivy"</Text></Block><Block type="code-line"   key={"7c9ec390ebfa42318b0acb35260f0a1c"} ><Text key={"9a5aee19d59846dc83074104c72ea7a5"} >      ]</Text></Block><Block type="code-line"   key={"ac7266aae6e14fe2aa70b27f99229a8d"} ><Text key={"324b8c49001e4aa093d26d6ba9ba2b63"} >    ]</Text></Block><Block type="code-line"   key={"852d934557b4485da5839b75f5d57c9a"} ><Text key={"f5c1baf23f0948088fae0a59cdffc848"} >{`  \}`}</Text></Block><Block type="code-line"   key={"7caee685cf3d44a0bff9f2792bda05c7"} ><Text key={"7ef272d9da9342fc93ac17cce27165b0"} >]</Text></Block></Block><Block type="heading-1"   key={"4274f6071af446eb8b685233de5fedd6"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"d2652bbd319740018e02fc0e29e37a24"} >Centrality Algorithms</Text></Block><Block type="paragraph"   key={"e8301fd8e7464efa9a57e35393068a4a"} ><Text key={"5fc255084a6c45dea31195c454259b46"} >Centrality algorithms determine the importance of each vertex within a network. Typical applications:</Text></Block><Block type="paragraph"   key={"8c3885409627460c9a62ab6a81834517"} ><Text key={"61f938cfad074f329ab036f242aad42f"} >PageRank is designed for directed edges.  The classic interpretation is to find the most "important" web pages, based on hyperlink referrals, but it can be used for another network where entities make positive referrals of one another.</Text></Block><Block type="paragraph"   key={"70f214b53a2045b59f9ec0d3799c4749"} ><Text key={"a0673e8db620451e9f35b6f5f8e4e973"} >Closeness Centrality and Betweenness Centrality both deal with the idea of "centrally located."</Text></Block><Block type="heading-2"   key={"c11df8faa83f4208b487f7a03cf10fae"} ><Text key={"d9ca16d243504d10a33fc31a537a8fc7"} >PageRank</Text></Block><Block type="heading-3"   key={"d6bb2be9311142e7928225e63a1860a3"} ><Text key={"f6f3d142735b41409e5691241d2d5b95"} >Description and Uses</Text></Block><Block type="paragraph"   key={"4b7f0ac10c7e4ef5bf9d4e966a8de93a"} ><Text key={"b58ef3f01ed24e478a3ed23359a6f491"} >The PageRank algorithm measures the influence of each vertex on every other vertex. PageRank influence is defined recursively: a vertex's influence is based on the influence of the vertices which refer to it. A vertex's influence tends to increase if (1) it has more referring vertices or if (2) its referring vertices have higher influence. The analogy to social influence is clear.</Text></Block><Block type="paragraph"   key={"e77f2b0e8e854cf0a2e18a02db306225"} ><Text key={"0bd71d14bf6c430a95bb7e16b5ab3226"} >A common way of interpreting PageRank value is through the Random Network Surfer model.  A vertex's pageRank score is </Text><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"0bd71d14bf6c430a95bb7e16b5ab3226"} >proportional to the probability that a random network surfer will be at that vertex at any given time.</Text><Text key={"0bd71d14bf6c430a95bb7e16b5ab3226"} > </Text><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"0bd71d14bf6c430a95bb7e16b5ab3226"} >A vertex with a high pageRank score is a vertex that is frequently visited</Text><Text key={"0bd71d14bf6c430a95bb7e16b5ab3226"} >, assuming that vertices are visited according to the following Random Surfer scheme:</Text></Block><Block type="list-unordered"   key={"5eb649a288654868919927d56d084844"} ><Block type="list-item"   key={"156f10ba0d65445a87dee07d60806a80"} ><Block type="paragraph"   key={"6e09cc01d96c4dfd8a7a0266c5ae6747"} ><Text key={"ac6e82be730149a9bc34133984a77da7"} >Assume a person travels or surfs across a network's structure, moving from vertex to vertex in a long series of rounds.</Text></Block></Block><Block type="list-item"   key={"d4555955265745abaf8ee0ecfaf9c012"} ><Block type="paragraph"   key={"d226b7b4ce1e4211a5ba96adc25818f6"} ><Text key={"4d0291b6a073403488d4400fdc2af73b"} >The surfer can start anywhere. This start-anywhere property is part of the magic of PageRank, meaning the score is a truly fundamental property of the graph structure itself.</Text></Block></Block><Block type="list-item"   key={"f61d671686ce41748941af11d93dda35"} ><Block type="paragraph"   key={"15f6b7c0e895424692dbc573cb9d09a5"} ><Text key={"989fbe60f25646bbaeeb1aff262209bb"} >Each round, the surfer randomly picks one of the outward connections from the surfer's current location. The surfer repeats this random walk for a long time.</Text></Block></Block><Block type="list-item"   key={"7aae22d856344be398e913a9762c2203"} ><Block type="paragraph"   key={"66779c9d57614145b7426c3e73771b67"} ><Text key={"671a90e679e645dc87f4d990c678b70b"} >But wait. The surfer doesn't always follow the network's connection structure. There is a probability (</Text><Text marks={[{"kind":"mark","type":"italic","data":{}}]}  key={"671a90e679e645dc87f4d990c678b70b"} >1-damping</Text><Text key={"671a90e679e645dc87f4d990c678b70b"} >, to be precise), that the surfer will ignore the structure and will magically teleport to a random vertex.</Text></Block></Block></Block><Block type="heading-3"   key={"3add92fd84be4f54a07339326224106e"} ><Text key={"babdb5396f5e4f3db9cfcf96258e0ea1"} >Specifications</Text></Block><Block type="code"  data={{"syntax":"text"}}  key={"54e364107332405eb7ada7725c217b00"} ><Block type="code-line"   key={"077cbaa7dbb845309b4e5a6bf86fdcab"} ><Text key={"04b7c4cad4164764b18ce6122f4779e5"} >pageRank(FLOAT maxChange, INT maxIter, FLOAT damping, BOOL display, INT outputLimit)</Text></Block><Block type="code-line"   key={"d136865389c245a986dc7d7c3328e9db"} ><Text key={"8a3ded5ff3994b03a2c22792afa2b7cc"} >pageRank_file(FLOAT maxChange, INT maxIter, FLOAT damping, FILE f)</Text></Block><Block type="code-line"   key={"289cd0bdde724ee59b5646cebf3d1a14"} ><Text key={"5d95e7613f0e4f949f224ad796c1ab23"} >pageRank_attr(FLOAT maxChange, INT maxIter, FLOAT damping)</Text></Block></Block><Block type="table"  data={{"aligns":["left","left"]}}  key={"dfea3c42cdd84ab3acb164ea21b0ccce"} ><Block type="table-row"   key={"c980467dc586402894944e50b6ba7d87"} ><Block type="table-cell"   key={"2509298e845e40018ae6696783745350"} ><Block type="paragraph"   key={"9156cdcfa53a497385df5bec8a1df1db"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"d526bc1c60124a5dac115d9c3fa76499"} >Characteristic</Text></Block></Block><Block type="table-cell"   key={"d0b9bee62c5a458c937a7c20bb3412fc"} ><Block type="paragraph"   key={"a8b8c48c4d2742cf885115929b7db8f1"} ><Text key={"d780c567f3214a52b41e3340bd410812"} >Value</Text></Block></Block></Block><Block type="table-row"   key={"d8b0bd4812664b9da807e7c39f64f4b1"} ><Block type="table-cell"   key={"5786a0fc129a487abae3edb46aea92f4"} ><Block type="paragraph"   key={"fab5b671c1854e1fad7987ad55c4b34a"} ><Text key={"57ec6ca80a3f4eec9dfa0a9780803960"} >Result</Text></Block></Block><Block type="table-cell"   key={"f0b138a6490740c58b8f378fc5ff4a55"} ><Block type="paragraph"   key={"37de700f29074170983e5a90a620686a"} ><Text key={"066bc7c3ca244dfe9eeafd81a35249c4"} >Computes a PageRank value (FLOAT type) for each vertex.  The result is available in 3 forms:</Text></Block><Block type="list-unordered"   key={"5a4265ac82ee4caca49b3149a178b789"} ><Block type="list-item"   key={"847e79b2d9044160ba6adcb6b474db9e"} ><Block type="paragraph"   key={"a4078cd2321d4914b8a7b105334676b9"} ><Text key={"2471b41b14eb491ba62a66801b7cc373"} >streamed out in JSON format</Text></Block></Block><Block type="list-item"   key={"c4d8237cabba4ecf8dedd6f2918b324d"} ><Block type="paragraph"   key={"e4a76068d29a4fac8fba2cdeaf1b4215"} ><Text key={"305011fbdc614172862a80909f376116"} >written to a file in tabular format, or</Text></Block></Block><Block type="list-item"   key={"ae0baa1b431d40f29c889cc014e38b28"} ><Block type="paragraph"   key={"9f930e22a6ad428bb481aaa83533ab14"} ><Text key={"6f05c0937c8645d7a4447ee6da90122e"} >stored as a vertex attribute value.</Text></Block></Block></Block></Block></Block><Block type="table-row"   key={"5f24fa35ac7e48b5b95d050381eeaae0"} ><Block type="table-cell"   key={"a48f378cc0ff44dc98be2bc829ee2676"} ><Block type="paragraph"   key={"57d970f621fa47638ac864d424548c47"} ><Text key={"b57c4fd93f484452880f92a7971505c2"} >Input Parameters</Text></Block></Block><Block type="table-cell"   key={"7f294049256642d7a0b2feed12a9b85c"} ><Block type="list-unordered"   key={"f6654452e0334c699e97ae128949d4b8"} ><Block type="list-item"   key={"69a2bfcfd8714bc290e6975dd80cf4c6"} ><Block type="paragraph"   key={"01dd59b9006a44afa1918cfc5d3764b2"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"19ac3c7518704d15a795daae8f8b6739"} >maxChange</Text><Text key={"19ac3c7518704d15a795daae8f8b6739"} >: PageRank will stop iterating when the largest difference between any vertex's current score and its previous score ≤ maxChange.  That is, the scores have become very stable and are changing by less that maxChange from one iteration to the next.
Suggested value: 0.001 or less.</Text></Block></Block><Block type="list-item"   key={"ba67626a478b4e7682e5dc53b440c552"} ><Block type="paragraph"   key={"0193bd23e4124051bd75927556798710"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"212876f1eb12480fb09d9a8189b810d7"} >maxIter</Text><Text key={"212876f1eb12480fb09d9a8189b810d7"} >: maximum number of iterations.
Suggested value: between 10 and 100.</Text></Block></Block><Block type="list-item"   key={"50680ddb0cc34e97b417ed9ff1219886"} ><Block type="paragraph"   key={"8d2b0bc585ed4f3bad5abd2b2d3ede42"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"bbc175534af845578a5f3edfaaff53ec"} >damping</Text><Text key={"bbc175534af845578a5f3edfaaff53ec"} >: fraction of score that is due to the score of neighbors. The balance (1 - damping) is a minimum baseline score that every vertex receives.
Suggested value: 0.85.</Text></Block></Block><Block type="list-item"   key={"549537048ee94c9db05b8a0225207c5a"} ><Block type="paragraph"   key={"3882a57b961342f084904081ade70276"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"555fbdba52564f118dd0ba6ec8a8f606"} >f </Text><Text key={"555fbdba52564f118dd0ba6ec8a8f606"} >(for file output only): the path to the output file</Text></Block></Block><Block type="list-item"   key={"3628b1600dd540e79f390a0ec8a60e8b"} ><Block type="paragraph"   key={"1771abe68d1c49c3ac08eff78ff7f9a8"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"bc29396db9954548b495f53b8493bc0f"} >display </Text><Text key={"bc29396db9954548b495f53b8493bc0f"} >(for JSON output only): If true, include the graph's edges in the JSON output, so that the full graph can be displayed.</Text></Block></Block><Block type="list-item"   key={"804c4a9a469040e89a0d2663978b41d7"} ><Block type="paragraph"   key={"1ef9ca3b4d1146c992c4499ef07d851d"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"b157062e1a914d14a3839dd2b3b3247b"} >outputLimit </Text><Text key={"b157062e1a914d14a3839dd2b3b3247b"} >(for JSON output only): maximum number of vertex values to output. Values will be sorted with highest value first.</Text></Block></Block></Block></Block></Block><Block type="table-row"   key={"f6670c5d05c348bd80b3bcef0755f2ee"} ><Block type="table-cell"   key={"b9ab8321714f42279993f1b0509e4299"} ><Block type="paragraph"   key={"817eb6bd6b9f4c5a8582a1a0a60f701e"} ><Text key={"aef49e2428dd49c7b18c0d27b0ec671a"} >Result Size</Text></Block></Block><Block type="table-cell"   key={"b8e0175f351d4a898167f2db0ff635e0"} ><Block type="paragraph"   key={"46c7f795a1304cb5925dafa68ae04434"} ><Text key={"f5f479209dee46038e2fc6b88a528892"} >V = number of vertices</Text></Block></Block></Block><Block type="table-row"   key={"f407ad13470d41898b67dc1fa94f2b85"} ><Block type="table-cell"   key={"b5e1b89a927e4f2381469f6da9a9745c"} ><Block type="paragraph"   key={"cf7ca6f546204c0f88fc1ed74f3038e6"} ><Text key={"e77c90f3ec5d437aa2a92af6cdf09ecd"} >Computational Complexity</Text></Block></Block><Block type="table-cell"   key={"6aade22061df4b23b8217830f82e2d23"} ><Block type="paragraph"   key={"1ff39416de1c479bb6dd668e9ff8c8a0"} ><Text key={"1fff136da8bf42078011f6c16807109b"} >O(E*k), E = number of edges, k = number of iterations.</Text></Block><Block type="paragraph"   key={"9a038ec8ac56448b8d97b9ee5be9e9b0"} ><Text key={"0e1052def3a54593a36cf1bf74e94ad0"} >The number of iterations is data-dependent, but the user can set a maximum. Parallel processing reduces the time needed for computation.</Text></Block></Block></Block><Block type="table-row"   key={"83caaa4447e0410285b15f1c1385bbc9"} ><Block type="table-cell"   key={"fba1a32c42e44b7681344a90a370664b"} ><Block type="paragraph"   key={"1b71b27f59b04fe6ad696a62325c2488"} ><Text key={"a7ca5e5e443e46febc1876f2e5a41b7a"} >Graph Types</Text></Block></Block><Block type="table-cell"   key={"d04709a2123b4a079e9e5f6f5edd4d5b"} ><Block type="paragraph"   key={"356cf22b2a8e48ea9461786d1fbaf6cc"} ><Text key={"a114db089eeb4f7da0d92800cc41d898"} >Directed edges</Text></Block></Block></Block></Block><Block type="heading-3"   key={"44f5410ee85f49e4bfc474b11fb15d22"} ><Text key={"33613df147864420ba6ec6ad704a0d8c"} >Example</Text></Block><Block type="paragraph"   key={"eb0d955af8154251960c2a4fa065100e"} ><Text key={"0ce6541ba96a4a448a7a88b6ae0656a0"} >We ran pageRank on our test10 graph (using Friend edges) with the following parameter values: damping=0.85, maxChange=0.001, and maxIter=25. We see that Ivy (center bottom) has the highest pageRank score (1.12). This makes sense, since there are 3 neighboring persons who point to Ivy, more than for any other person.  Eddie and Justin have scores have exactly 1, because they do not have any out-edges. This is an artifact of our particular version pageRank. Likewise, Alex has a score of 0.15, which is (1-damping), because Alex has no in-edges. </Text></Block><Block type="image"  data={{"assetID":"-LPI7RlT9vrlhXD3mCAE","caption":"pageRank_attr(0.001, 25, 0.85,\"json\",10) on social10 graph, with Friend edges"}}  key={"64eb3c3c6558445f95a5be5a572604ef"} ><Text key={"375df1a22a3549809f1c9645a040f0fa"} ></Text></Block><Block type="heading-2"   key={"3179a28b295e439db132f8df9a695620"} ><Text key={"3b76071412df4a6db53a45a354bfbfb1"} >Personalized PageRank</Text></Block><Block type="heading-3"   key={"7227a1f9c97448ada322bd92f9fcdec7"} ><Text key={"1e355977583e4b68bbf8e5f31fcc58b5"} >Description and Uses</Text></Block><Block type="paragraph"   key={"f67b69783a6a479ca04df50b5167e050"} ><Text key={"d788a7602d424a968a94b86199ee60fd"} >In the original PageRank, the damping factor is the probability of the surfer continues browsing at each step. The surfer may also stop browsing and start again from a random vertex. In personalized PageRank, the surfer can only start browsing from a given set of source vertices both at the beginning and after stopping.</Text></Block><Block type="heading-3"   key={"31858313f24446449026176fcf383493"} ><Text key={"e2e76b7c4fe04a4c82f11ac904887209"} >Specifications</Text></Block><Block type="code"  data={{"syntax":"text"}}  key={"5293a6335bed4b238190eb4637da4748"} ><Block type="code-line"   key={"b0fe7bf88e4444cd9d56efabf95d950b"} ><Text key={"1c19cf6d86944c35b5658b4ff4f8cf16"} >{`pageRank_pers(Set\<Vertex\> source, FLOAT maxChange, INT maxIter, FLOAT damping, INT outputLimit)`}</Text></Block><Block type="code-line"   key={"9ada8048a5564be6ae83bfbe23bdd79c"} ><Text key={"c450a2ebb7194c0dbc52b7ddd60dd1df"} >{`pageRank_pers_file(Set\<Vertex\> source, FLOAT maxChange, INT maxIter, FLOAT damping, FILE f)`}</Text></Block><Block type="code-line"   key={"e561e9509ad9444dbd3a7eacbfafbd02"} ><Text key={"67cca09112ca4763877eb84385a954f1"} >{`pageRank_pers_attr(Set\<Vertex\> source, FLOAT maxChange, INT maxIter, FLOAT damping)`}</Text></Block></Block><Block type="table"  data={{"aligns":["left","left"]}}  key={"54728f84f83d4ddf8dd97b7969a10d85"} ><Block type="table-row"   key={"b2e55642667146dc9fc7e6cd018e929b"} ><Block type="table-cell"   key={"c5c64a4c35754fccad2c2ffc9439a445"} ><Block type="paragraph"   key={"f98138ee49f0487fbb2fe40cc0814a8f"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"424ee5cfc280405cbb56aad6f090ec1f"} >Characteristic</Text></Block></Block><Block type="table-cell"   key={"8ae9237f75944570adc48023260f64a5"} ><Block type="paragraph"   key={"2f4e536f41164f5ea710516969d3fbcd"} ><Text key={"9660b178ae89452a8266c35eea6a1619"} >Value</Text></Block></Block></Block><Block type="table-row"   key={"1adfcdd91dbf400d88a2f28cc0115832"} ><Block type="table-cell"   key={"803f5721cba34e7c918d93b94ff3b0ea"} ><Block type="paragraph"   key={"aa5e564f88664fd7b26252d6fd0d02a5"} ><Text key={"e9d8bc52179c48a8afad312a3c5035e6"} >Result</Text></Block></Block><Block type="table-cell"   key={"3a6a00737a1f40c8863653a4a3483e3d"} ><Block type="paragraph"   key={"fdfbda98a33744e3b9eee6eb58a5a232"} ><Text key={"2ca4f757646448bc85b40e295f07b725"} >Computes a personalized PageRank value (FLOAT type) for each vertex.  The result is available in 3 forms:</Text></Block><Block type="list-unordered"   key={"4f9c3b80db204418a2a6df0d6b2f7965"} ><Block type="list-item"   key={"3c6a3c5f42f144bfa6e60d323f57f649"} ><Block type="paragraph"   key={"4e28736b697346eaabbb3b830b33e5cb"} ><Text key={"291a624414b54dbb88e28981db8fb339"} >streamed out in JSON format</Text></Block></Block><Block type="list-item"   key={"71b45c83c66646148821dd03164c334d"} ><Block type="paragraph"   key={"c2508c545b584b008c2e502718661375"} ><Text key={"8175a26141944451810a9ecf3b570dc5"} >written to a file in tabular format, or</Text></Block></Block><Block type="list-item"   key={"a751a74f7f8c4f02b4d5a102120d047c"} ><Block type="paragraph"   key={"cb0d42b1c77f41ef9dc49df35192f46b"} ><Text key={"38342c367ddf4f68bfb901070834e785"} >stored as a vertex attribute value.</Text></Block></Block></Block></Block></Block><Block type="table-row"   key={"0425668ded5d4ae6b629110f7da28d8a"} ><Block type="table-cell"   key={"407b4a1bc47e4f828b005ff4753e704b"} ><Block type="paragraph"   key={"84d48f848b98433b8fe0c7344bfd82ad"} ><Text key={"dfeae18b2a0e4e6ea3a7e10dac6e4cd1"} >Input Parameters</Text></Block></Block><Block type="table-cell"   key={"9d2f64e662284f4f906bbb591aea2ae2"} ><Block type="list-unordered"   key={"417d8676ca1a4084a6b379550ecd82f1"} ><Block type="list-item"   key={"b9eecbfd1ac04381a5e5e3295ff0d841"} ><Block type="paragraph"   key={"901f74d4ac0144d3be74e97428085292"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"4eada4b9dddb4984aaccaf6605049618"} >source</Text><Text key={"4eada4b9dddb4984aaccaf6605049618"} >: a set of source vertices </Text></Block></Block><Block type="list-item"   key={"d5984b12574f4220bbd378a3eaae02cd"} ><Block type="paragraph"   key={"1d528ce1582740f8a9967f1fa316efa3"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"7a933bf292e74d788267992d7fcdda9e"} >maxChange</Text><Text key={"7a933bf292e74d788267992d7fcdda9e"} >: personalized PageRank will stop iterating when the largest difference between any vertex's current score and its previous score ≤ maxChange.  That is, the scores have become very stable and are changing by less that maxChange from one iteration to the next.
Suggested value: 0.001 or less.</Text></Block></Block><Block type="list-item"   key={"5a5e0d62ed1a4a54b37fb5d7cdf02260"} ><Block type="paragraph"   key={"c2d2d21e38f94b0896237da91861b325"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"e6171fe037734e10af1535581dc23af6"} >maxIter</Text><Text key={"e6171fe037734e10af1535581dc23af6"} >: maximum number of iterations.
Suggested value: between 10 and 100.</Text></Block></Block><Block type="list-item"   key={"f5edda9664ad40658ac3a3f8218e8718"} ><Block type="paragraph"   key={"cfaa36d763264bb19c3d8325026e5f77"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"06290268672448ac8a836d36dad6c336"} >damping</Text><Text key={"06290268672448ac8a836d36dad6c336"} >: fraction of score that is due to the score of neighbors. The balance (1 - damping) is a minimum baseline score that every vertex receives.
Suggested value: 0.85.</Text></Block></Block><Block type="list-item"   key={"bdd0846c61534b2aaf72dd9d76d5fd2b"} ><Block type="paragraph"   key={"23d5264d281a4ee9994871c97237f41f"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"7ee440a17d85443d8f2933d0433296db"} >f </Text><Text key={"7ee440a17d85443d8f2933d0433296db"} >(for file output only): the path to the output file</Text></Block></Block><Block type="list-item"   key={"398aacb2738a4b9599ecab3c8ad2bb78"} ><Block type="paragraph"   key={"1c61718be55d40129465eee9737a993c"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"497931dcba2e4d3ca0bf5322f93636cb"} >outputLimit </Text><Text key={"497931dcba2e4d3ca0bf5322f93636cb"} >(for JSON output only): maximum number of vertex values to output. Values will be sorted with highest value first.</Text></Block></Block></Block></Block></Block><Block type="table-row"   key={"fba78b5e37ba4781b9e35b2db6bf3c4c"} ><Block type="table-cell"   key={"75cea8b0747041e28be2c0509be7568f"} ><Block type="paragraph"   key={"f12ed80841574a88aa2ea589b3584568"} ><Text key={"a098b20f2e6d4b73bef5b347ae191e4f"} >Result Size</Text></Block></Block><Block type="table-cell"   key={"33536a1f5e924c26994eb579acc1886f"} ><Block type="paragraph"   key={"93c711f3388546d3b62967c932cd231f"} ><Text key={"ded3f741188d43049f64d2cd5ede8fcd"} >V = number of vertices</Text></Block></Block></Block><Block type="table-row"   key={"e643b74163b74e9a8d4df86a1fbc7ead"} ><Block type="table-cell"   key={"7d1f7de29f79452da89f53db4ef5e868"} ><Block type="paragraph"   key={"fb79447f00e7421e8bfdf373110149f0"} ><Text key={"590f25eb8673485996a5fa830d92e0c0"} >Computational Complexity</Text></Block></Block><Block type="table-cell"   key={"a788f6ab01424c369c7c213a4af62c28"} ><Block type="paragraph"   key={"998c3c1154974712aabf744fdfeef5e6"} ><Text key={"b575ca6f487945e398e70f2471e1f17b"} >O(E*k), E = number of edges, k = number of iterations.</Text></Block><Block type="paragraph"   key={"f1022a30e56e479fb168766c92e1a003"} ><Text key={"351288fa30da408bb1e25cd5cbe32ab1"} >The number of iterations is data-dependent, but the user can set a maximum. Parallel processing reduces the time needed for computation.</Text></Block></Block></Block><Block type="table-row"   key={"a61e3c830871406d93f23711094c19ed"} ><Block type="table-cell"   key={"d73d754f0be84ec4b711d6a75dee9e27"} ><Block type="paragraph"   key={"471bb5a732aa45268885301c445a6551"} ><Text key={"634a17c2d1a94003afe700fcf5351341"} >Graph Types</Text></Block></Block><Block type="table-cell"   key={"4fe0e1fcd4004c2aa6d5a147572772aa"} ><Block type="paragraph"   key={"6ddebc436ba148beb0535df4acb609cc"} ><Text key={"ae0bcb06d8bc462d9960a72839af3ab3"} >Directed edges</Text></Block></Block></Block></Block><Block type="heading-3"   key={"0ec11f2260514336a2a75384a6ff579d"} ><Text key={"a78cb35c59784e20881fc87bc14bab3f"} >Example</Text></Block><Block type="paragraph"   key={"460ce50d9e054e02a367aa2a61a08483"} ><Text key={"0ecc34daa9554815a74fd454d2b09d96"} >We ran Personalized PageRank on our test10 graph using Friend edges with the following parameter values: damping=0.85, maxChange=0.001, maxIter=25, and  source="Fiona". In this case, the random walker can only start or restart walking from Fiona. In the figure below, we see that Fiona has the highest pageRank score in the result. Ivy and George have the next highest scores, because they are direct out-neighbors of Ivy and there are looping paths that lead back to them again. Half of the vertices have a score of 0, since they can not be reached from Fiona.</Text></Block><Block type="image"  data={{"assetID":"-LdLko-_Yta4Stn3KdYB","caption":"pageRank_pers_attr([(\"Fiona\",\"Person\")],0.001,25,0.85) on social10 graph, with Friend edges"}}  key={"5461dd1857b2434bb9f477a9d08cb832"} ><Text key={"6a01124809c248ea8eb7805fb7b40ba7"} ></Text></Block><Block type="heading-2"   key={"7d40a9e30e2b4ed6b59639cd8135e601"} ><Text key={"e5a900b9211c4d4a988d5822433b059e"} >Closeness Centrality</Text></Block><Block type="paragraph"   key={"a5452007414d4416b6297df2fc2981ea"} ><Text key={"dc32c1c774424040bb42df42f4e64836"} >We all have an intuitive understanding when we say a home, an office, or a store is "centrally located." Closeness Centrality provides a precise measure of how "centrally located" is a vertex. The steps below show the steps for one vertex v.</Text></Block><Block type="table"  data={{"aligns":["left","left"]}}  key={"abb50d45179e43cf99a25f17f226d6f5"} ><Block type="table-row"   key={"5c83a218a9b54afabf34b57e18e09e61"} ><Block type="table-cell"   key={"3b7b7bbc00794aa9af4d154436b49b01"} ><Block type="paragraph"   key={"6f7b8002899c4fbe8784f1509ed61ee6"} ><Text key={"783bdb43fedc42bca8c76568b4c15697"} >Description of Steps</Text></Block></Block><Block type="table-cell"   key={"3256b3d0a7a640cc907b4873021b0a8b"} ><Block type="paragraph"   key={"9307d3961753475488c204bc23f8c63f"} ><Text key={"ff8b4c9a23864610a15cc3eefef38ac0"} >Mathematical Formulation</Text></Block></Block></Block><Block type="table-row"   key={"6992efc960c94c57add3fa676a6cf2cb"} ><Block type="table-cell"   key={"afe713bd0d884387aea881e57d3f0b08"} ><Block type="paragraph"   key={"4fa8167b6a214c9b98db1ed643fbb06b"} ><Text key={"1993f896fea54f73902b57c7fa83aa15"} >1. Compute the average distance from
vertex v to every other vertex:</Text></Block></Block><Block type="table-cell"   key={"f81558355ff4400d8ddc041c6f66ee6b"} ><Block type="paragraph"   key={"ccb6bb887a62412895c6e4c9495e778e"} ><Text key={"3860c4d7dfc544e789449df14ac4129e"} ></Text><Inline type="inline-math"  data={{"formula":"d_{avg}(v) = \\sum_{u \\ne v} dist(v,u)/(n-1)"}}  key={"4d9b4be4a2bc4b79b484f949f43ccce7"} ><Text key={"9f6961129e8d471e9a2f8b8b69eb5d00"} ></Text></Inline><Text key={"2ecb5caaa40e461ea1a69852a9ca5e16"} > </Text></Block></Block></Block><Block type="table-row"   key={"f95fd02e63f6404699e9f7989c092ad7"} ><Block type="table-cell"   key={"6a42043027f8486399401ae9559b6659"} ><Block type="paragraph"   key={"be12535d604b4151a82e6640cca4795b"} ><Text key={"6bd1d9c4e49a492285b9a7a92cdd7178"} >2. Invert the average distance, so we have
average closeness of v:</Text></Block></Block><Block type="table-cell"   key={"7070bd760643467ca954e9fc11b13fa0"} ><Block type="paragraph"   key={"101fbff6962e430abc74883f38ac82ac"} ><Text key={"bffee257af524a019076c144813deae8"} ></Text><Inline type="inline-math"  data={{"formula":"CC(v) = 1/d_{avg}(v)"}}  key={"10982f2dd6d34de3ae932f305ec22174"} ><Text key={"6bffaf649d514a17b995b87801df64aa"} ></Text></Inline><Text key={"b9f2d888857d497ea7f06e9b12b675fa"} > </Text></Block></Block></Block></Block><Block type="paragraph"   key={"98adeabb391a40fa996bf0ce0b3b1530"} ><Text key={"b3b9a1167c2d470e8b730536a464f697"} >These steps are repeated for every vertex in the graph.</Text></Block><Block type="heading-3"   key={"0216fb85670842adbeb0d785e8d05294"} ><Text key={"9e85706de9ca4a7596df05d25ca09762"} >Specifications</Text></Block><Block type="code"  data={{"syntax":"text"}}  key={"92f148a3cf9c44f9a880c91ab84b6979"} ><Block type="code-line"   key={"681b4ac5a1c54983b118ca3c636d227f"} ><Text key={"8ef85491d64445209ba8588f212cbf66"} >closeness_cent(BOOL display, INT maxOutput)</Text></Block><Block type="code-line"   key={"da4be912c72d49c184decbb36e7d8370"} ><Text key={"a52c07ea614c43d3ace1dc81f9359f06"} >closeness_cent_file(BOOL display, STRING filepath)</Text></Block><Block type="code-line"   key={"13997760d84947fba2bfe0d1424d6648"} ><Text key={"b894922f3a854d4e9a4ed43e5537e9d0"} >closeness_cent_attr(BOOL display)</Text></Block></Block><Block type="paragraph"   key={"69505a1ab8bd4c19aef26a3762b42378"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"9ea0544a437142b9964af627bceefdcc"} >Parameters</Text></Block><Block type="table"  data={{"aligns":["left","left"]}}  key={"552e47f81a224a64a1f8c50185cb8668"} ><Block type="table-row"   key={"64d0bc0382404143a05f9a3d40ec694f"} ><Block type="table-cell"   key={"0db8ad3ad2d742c28c4cf920a0dff861"} ><Block type="paragraph"   key={"f0ee53a6f1154e0ab86aec608dd7b8c2"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"ee6ee0925b934c4f9eb29f12ab892007"} >Characteristic</Text></Block></Block><Block type="table-cell"   key={"6a7d7eea69c3460780bde1413a3b9afa"} ><Block type="paragraph"   key={"08aa9967f8a144f6a85c1618a02998eb"} ><Text key={"3663b5e9e002480b875f4e5a8d562490"} >Value</Text></Block></Block></Block><Block type="table-row"   key={"2aed3cd56c9b4e3389e7ed6f9bd83898"} ><Block type="table-cell"   key={"fd9cbade333148c98a083ace92858ae4"} ><Block type="paragraph"   key={"ec183c05c8dc475e95b05721bce57573"} ><Text key={"7c3d120abfd04a1f9465b9f7edf125bd"} >Result</Text></Block></Block><Block type="table-cell"   key={"68643c7ed7354f25be5d440a2082c4dd"} ><Block type="paragraph"   key={"3a6943e745804423abe290b407e8a10a"} ><Text key={"6c675dc3a8b242a19895827c4a8cba62"} >Computes a Closeness Centrality value (FLOAT type) for each vertex.  The result is available in 3 forms:</Text></Block><Block type="list-unordered"   key={"ff1d3b83b4134078be169b1a3cd13dd6"} ><Block type="list-item"   key={"3ebef6611a3d499d97ce260a093ccb3e"} ><Block type="paragraph"   key={"66b7eff89775473bb2ca6b00d0cfba9a"} ><Text key={"145ae2f4c6284c0baf2b55c099292cef"} >streamed out in JSON format</Text></Block></Block><Block type="list-item"   key={"e60527ff02254d02be7533978319e7c3"} ><Block type="paragraph"   key={"253fcb7eb3284310888a4786362a85dd"} ><Text key={"a5c6148796f84469a94d95b4a056dad2"} >written to a file in tabular format, or</Text></Block></Block><Block type="list-item"   key={"a4c8f13283a34b8eb1dc29566a91e286"} ><Block type="paragraph"   key={"60ca0013deba437c93cb0a4878ee21f9"} ><Text key={"449b8602fed74d67834b0559e8784bb4"} >stored as a vertex attribute value.</Text></Block></Block></Block></Block></Block><Block type="table-row"   key={"79682c45699f4a2c889535fe1f6215ab"} ><Block type="table-cell"   key={"33167cb5f2bd45599f3dce99c0c28d33"} ><Block type="paragraph"   key={"094b8239743941dc9db3b33411ee81a9"} ><Text key={"eb68eeaeed614b5f95a0591759806bcd"} >Required Input Parameters</Text></Block></Block><Block type="table-cell"   key={"54a16abb873846b59cafa828774c8b0d"} ><Block type="list-unordered"   key={"e95c340357a74e6bb0770405f38e906e"} ><Block type="list-item"   key={"638ca4cd88b54b649ff9ce4f2e664a77"} ><Block type="paragraph"   key={"660062bdd5a74019a9b7fa2e06e347f6"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"d2aa758ad11043978369cbfc157ad3af"} >display</Text><Text key={"d2aa758ad11043978369cbfc157ad3af"} >: If true, include the graph's edges in the JSON output, so that the full graph can be displayed.</Text></Block><Block type="paragraph"   key={"099028aef5a44d57b73c79fcf0bf765d"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"a2eb6119039f4e0085bbf3fd55e3b879"} >filepath </Text><Text key={"a2eb6119039f4e0085bbf3fd55e3b879"} >(for file output only): the path to the output file</Text></Block></Block><Block type="list-item"   key={"8c07575186aa424d89d3ae0a3b8b3184"} ><Block type="paragraph"   key={"b7184c52ff7c413e9055991f98424920"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"15689124c86d44f88ee1460ec8311cf5"} >maxOutput </Text><Text key={"15689124c86d44f88ee1460ec8311cf5"} >(for JSON output only): maximum number of vertex values to output. Values will be sorted with highest value first.</Text></Block></Block></Block></Block></Block><Block type="table-row"   key={"b0149f2d80704dc395179e22bec45099"} ><Block type="table-cell"   key={"f064112657774796be8da5c69c72d982"} ><Block type="paragraph"   key={"d3afc5a0b3904c9a827bf96ddf1c5b45"} ><Text key={"b5335fc80f6b4597a2f16f499e1c6ad1"} >Result Size</Text></Block></Block><Block type="table-cell"   key={"d2f41b2f79094e9d99e7aef259613b10"} ><Block type="paragraph"   key={"21aa6ce9fc2f40fc8622872698b7b915"} ><Text key={"d7db1c34253c4f23b454e0160e8eec2d"} >V = number of vertices</Text></Block></Block></Block><Block type="table-row"   key={"48739012777142bdbd871b1bd33c1f25"} ><Block type="table-cell"   key={"f55f122a294f49b4890c15ff3e6111d4"} ><Block type="paragraph"   key={"4378ac656c6144628c6b76cfbe0bf8e0"} ><Text key={"0cfb641fab6e4e7799da5cb37393a40b"} >Computational Complexity</Text></Block></Block><Block type="table-cell"   key={"6557c0c17b5a4391bb63ff068e9890b2"} ><Block type="paragraph"   key={"9bbec071e4b54a5faec0c3c0b0604477"} ><Text key={"56c37959ae944152ac8d11219506826d"} >O(E*k), E = number of edges, k = number of iterations.</Text></Block><Block type="paragraph"   key={"dbcb0f0929284196889aa1048da8bef6"} ><Text key={"c5e586aaab2243cb85491f6cb5c882ee"} >The number of iterations is data-dependent, but the user can set a maximum. Parallel processing reduces the time needed for computation.</Text></Block></Block></Block><Block type="table-row"   key={"f356aae2cf9846f99314fd49ea5db1b0"} ><Block type="table-cell"   key={"5510ab569e924e64b0db90e40fce0183"} ><Block type="paragraph"   key={"9295508bca3b491f8aa88a53cf852eea"} ><Text key={"859cce59f9224a758217411b05e574d1"} >Graph Types</Text></Block></Block><Block type="table-cell"   key={"3b8bf4445cf04ff384cab8b4805f1ca8"} ><Block type="paragraph"   key={"a197c5e77cc84848b77500304197f9c3"} ><Text key={"7bc7819832e5400f959118b09a3ed058"} >Directed or Undirected edges, Unweighted edges</Text></Block></Block></Block></Block><Block type="heading-3"   key={"e59b9d7e43f14dc69d004f8fb6c06ba4"} ><Text key={"68086e8f339d4aff92dbcd189a72541d"} >Example</Text></Block><Block type="paragraph"   key={"a65b18b7b00d40b19f0adb66affb4c43"} ><Text key={"19e6fa9789bc4b7199ad7e2435a9f807"} >Closeness centrality can be measured for either directed edges (from v to others) or for undirected edges. Directed graphs may seem less intuitive, however. because if the distance from Alex to Bob is 1, it does not mean the distance from Bob to Alex is also 1.</Text></Block><Block type="paragraph"   key={"f586e0a1ce5a40859ee9036b5cd2b7e5"} ><Text key={"eb1e6891788d4ebcaec12aa85fe0729f"} >For our example, we wanted to use the topology of the Likes graph, but to have undirected edges. We emulated an undirected graph by using both Friend and Also_Friend (reverse direction) edges. </Text></Block><Block type="image"  data={{"assetID":"-LPTkMEW3swUQTRbNd9Z","caption":"closeness_cent(\"json\",10) on social10 graph, with Friend and Also_Friend edges"}}  key={"8d005aff34f742e3a565de5edbec61f3"} ><Text key={"c3cbdae15b0c4f1ca76f394f79ba5f1c"} ></Text></Block><Block type="heading-2"   key={"ea63c3ab775e4ae8893e4bbe4a8a4836"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"fb1aa41f753047b49d6e1b29fef37b56"} >Betweenness</Text><Text key={"fb1aa41f753047b49d6e1b29fef37b56"} > Centrality</Text></Block><Block type="paragraph"   key={"36d2faba5a044ba2801d6874daeec125"} ><Text key={"b3fc30218f8e4e56813f18280575a124"} >The Betweenness Centrality of a vertex is defined as the number of shortest paths which pass through this vertex, divided by the total number of shortest paths. That is</Text></Block><Block type="paragraph"   key={"39ceb00cb2f44dfb82e0f5db267559f6"} ><Text marks={[{"kind":"mark","type":"italic","data":{}}]}  key={"ff4c33089413448e946d0f0218d3be12"} ></Text><Inline type="inline-math"  data={{"formula":" BC(v) =\\sum_{s \\ne v \\ne t}PD_{st}(v)= \\sum_{s \\ne v \\ne t} SP_{st}(v)/SP_{st} ,"}}  key={"1922115e93154b54ade228516d67fe13"} ><Text key={"8c5be4d6886a4a46bc159340ba37d488"} ></Text></Inline><Text marks={[{"kind":"mark","type":"italic","data":{}}]}  key={"b3e23b0391bf433a8fab82e80c9ee009"} ></Text></Block><Block type="paragraph"   key={"16077395da774f4aa6136a6e19b20641"} ><Text key={"6724a482165d4fbcb18d56f39323a190"} >where </Text><Inline type="inline-math"  data={{"formula":" PD "}}  key={"af60b8df6a8c4477b55f129fc475b022"} ><Text key={"532313a58247429dabad6e3aa00d8c4a"} ></Text></Inline><Text key={"7323823b6b4f4a2a9e783de99d920777"} >is called the pair dependency, </Text><Inline type="inline-math"  data={{"formula":"SP_{st}"}}  key={"7d8de1377b0d412eb7741689b877d5c1"} ><Text key={"3e95a59dc92e42c7b665549a97a9a4fe"} ></Text></Inline><Text key={"648b7d6967784c71aa20e19da4790222"} >is the total number of shortest paths from node s to node t and </Text><Inline type="inline-math"  data={{"formula":" SP_{st}(v) "}}  key={"1d3a25c496ca4e7eb4c773ac8c9a861c"} ><Text key={"919e197d6bf54923ba9a6cc31e373137"} ></Text></Inline><Text key={"32c2af15b6f146a597b54b654630c814"} >is the number of those paths that pass through v. </Text></Block><Block type="paragraph"   key={"d53a48c1e4644b499bf2201fd039b9a3"} ><Text key={"ac7db2c066704e8ebf6b726f9ff6eb49"} >The TigerGraph implementation is based A Faster Algorithm for Betweenness Centrality by Ulrik Brandes, Journal of Mathematical Sociology 25(2):163-177, (2001). For every vertex s in the graph, the pair dependency starting from vertex s to all other vertices t via all other vertices v is computed first,</Text></Block><Block type="paragraph"   key={"c1b35f8e22704566813c61d5dbce16e4"} ><Text key={"d6b1d53b72cd42079822c87a511ae23d"} ></Text><Inline type="inline-math"  data={{"formula":" PD_{s*}(v) = \\sum_{t:s \\in V} PD_{st}(v)"}}  key={"89345187c6c54d25a0e9b250701680f7"} ><Text key={"6bf094b6102e4033a2e247ea8db7e621"} ></Text></Inline><Text key={"878dd79813194ad1bd83c164a9a78992"} >. </Text></Block><Block type="paragraph"   key={"9d6ac583d6f049aa966129a6920bd638"} ><Text key={"835ea7430b0849739bff500673f1a5ae"} >Then betweenness centrality is computed as</Text></Block><Block type="paragraph"   key={"9ba9c047206f41278674935e24679468"} ><Text key={"2ef18f4266ea4ca3b073b22d9e245a0c"} > </Text><Inline type="inline-math"  data={{"formula":"BC(v) =\\sum_{s:s \\in V}PD_{s*}(v)/2"}}  key={"b6c27386f2ce48ecb650e3072a051da7"} ><Text key={"afc25ce93b14404487be19025853192e"} ></Text></Inline><Text key={"94de512f26194540ad17953501da9812"} >.</Text></Block><Block type="paragraph"   key={"0196ebfedf884ab3a1e5fa91e3ba5bc5"} ><Text key={"35cfc31ffd9f4d63b18a5e585fbacf98"} >According to Brandes, the accumulated pair dependency can be calculated as</Text></Block><Block type="paragraph"   key={"ac2ae382fafd4374b96fbc2120cf4023"} ><Text key={"222b190e21204363972297ab56a945b5"} ></Text><Inline type="inline-math"  data={{"formula":"PD_{s*}(v) =\\sum_{w:v \\in P_s(w)} SP_{sv}(v)/SP_{sw} \\cdot (1+PD_{s*}(w)) ,"}}  key={"0176b24ba4974d869405113693d69e56"} ><Text key={"aafa022ac9ce409c973a4732b2fb5126"} ></Text></Inline><Text key={"816ad92ddf664aa5a76146a895b6b832"} ></Text></Block><Block type="paragraph"   key={"248a02d1a1aa467893ae471ec8f425b1"} ><Text key={"b76f657466a54a9aae9742baefca4942"} >where the set of predecessors of vertex w on shortest paths from s </Text><Inline type="inline-math"  data={{"formula":"P_s(w)"}}  key={"5ad5232be3b94ab5863da6afc53b3db2"} ><Text key={"59db0385fb3b40f4bc1562c2f6b530ec"} ></Text></Inline><Text key={"f9b3863d89554168bbc45cf19b778624"} >is defined as</Text></Block><Block type="paragraph"   key={"beee6f585e2a4e78854007df7a86da04"} ><Text key={"86da7d286b02426391c9ad2f1e4d0c20"} ></Text><Inline type="inline-math"  data={{"formula":" P_s(w) = \\{u \\in V: \\{u, w\\} \\in E, dist(s,w) = dist(s,u)+dist(u,w) \\} ."}}  key={"086fd82b088c4e47913aa0cb07520932"} ><Text key={"b5c3257eccc64f48a0fa1afcdc063428"} ></Text></Inline><Text key={"cfa67d620ff946719284aef053d7eb35"} ></Text></Block><Block type="paragraph"   key={"bd587e358c9149d3a6e60bcd4add79d5"} ><Text key={"b4c927dd81434027af738a2d5dfb87bb"} >For each single vertex, the algorithm works in two phases. The first phase calculates the number of shortest paths passing through each vertex. Then starting from  the vertex on the most outside layer in a non-incremental order with pair dependency initial value of 0, traverse back to the starting vertex. </Text></Block><Block type="paragraph"   key={"350b8a345ef34a19acb9ef5f87c843f8"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"39949181a7f74516a641cedc61143115"} >Specifications</Text></Block><Block type="code"  data={{"syntax":"text"}}  key={"8f5f45a353474c15ba4c11393ef69d9e"} ><Block type="code-line"   key={"7fd73e870d7144b39e93545a512dcb78"} ><Text key={"4cc6e9edd702433f80af0dbd6188f954"} >closeness_cent()</Text></Block><Block type="code-line"   key={"cf6018e3e99645a2a43d4b34af71749d"} ><Text key={"fe3e54a8f77741d09cb731a29caa80f7"} >closeness_cent_file(STRING filepath)</Text></Block><Block type="code-line"   key={"0969210a22054403a4d5418f1177c63f"} ><Text key={"b87e221be6c94a1aa0d899091d8d7c76"} >closeness_cent_attr()</Text></Block></Block><Block type="paragraph"   key={"d48a6a17b49647da925b5e54ed32084c"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"a100866bcb5b42fb9cc1440eadba7d0c"} >Parameters</Text></Block><Block type="table"  data={{"aligns":["left","left"]}}  key={"5b6a5fce2c7d448691966d52eaa7c389"} ><Block type="table-row"   key={"8acd6d4e88d0412a8834b5d9e78b5a29"} ><Block type="table-cell"   key={"e20fb3dfee8c4e13b832ce555ed7de64"} ><Block type="paragraph"   key={"22bd01704080401697c0139960c72f5a"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"565929a2ebd84d0cb3c042ad836eac3c"} >Characteristic</Text></Block></Block><Block type="table-cell"   key={"3a9be56feadc4bd9ad6766fd17ddb90c"} ><Block type="paragraph"   key={"da9a795aaa5c4c0b98e902ff9023f23d"} ><Text key={"38d83a21a0144b5a8335e2a3d13f9444"} >Value</Text></Block></Block></Block><Block type="table-row"   key={"38bc176960954ab3a3b949b6ae009604"} ><Block type="table-cell"   key={"e39bcdde7b59471fa2ce814c62880171"} ><Block type="paragraph"   key={"91c00973072c4aa597ecd44a444dba82"} ><Text key={"df1ffc1849a94ed8b2f6c3a082e4b670"} >Result</Text></Block></Block><Block type="table-cell"   key={"58e7eb32f05045e6a4c86fb90b3ba41f"} ><Block type="paragraph"   key={"30501566847140ceb5d56814f5ef9c5c"} ><Text key={"10b3ab648edd413cbe1dda1caaf6ff3c"} >Computes a Closeness Centrality value (FLOAT type) for each vertex.  The result is available in 3 forms:</Text></Block><Block type="list-unordered"   key={"65a259c9ee7e46b7aa331d95b75a8450"} ><Block type="list-item"   key={"52d6e11975af4f1aae09c0b65a30de43"} ><Block type="paragraph"   key={"e01701a7eda4490eb15e7060ee11aede"} ><Text key={"88ef77528b394433af17f73f64b6cc4d"} >streamed out in JSON format</Text></Block></Block><Block type="list-item"   key={"f8b22ea9eef3435884cdd3c7e0f89dec"} ><Block type="paragraph"   key={"5ccd60f4a06d4ebd999ab0d6ebbb2642"} ><Text key={"1ad58e3cf9544aedb1830120f9ed2d3d"} >written to a file in tabular format, or</Text></Block></Block><Block type="list-item"   key={"af5673f2752347d8af23f99eb4708c20"} ><Block type="paragraph"   key={"3720728beede4e69ae588dcda939092c"} ><Text key={"71aa9b47ad33458b806755e3cf11a914"} >stored as a vertex attribute value.</Text></Block></Block></Block></Block></Block><Block type="table-row"   key={"7fdd9186eded464db7fdcb74bdd28bd8"} ><Block type="table-cell"   key={"8a904d6fde504994876b4889eb456e8a"} ><Block type="paragraph"   key={"ad44fb68a5cc42b19ad0f32890128802"} ><Text key={"b6e9b88d6b314fc1b496bd48aca70d63"} >Required Input Parameters</Text></Block></Block><Block type="table-cell"   key={"f25e5798b84a40d8a452b687158b5161"} ><Block type="paragraph"   key={"74ee20d26e86479ebcab1c8e77453e9e"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"465c69130b1d42939977ff4f8e30b774"} ></Text></Block><Block type="list-unordered"   key={"a59ca166f2344213a0bdf790227782ea"} ><Block type="list-item"   key={"c2f1f54d31144d81bf09aeb5f1600435"} ><Block type="paragraph"   key={"c0ddae48129449449f2014118ab8b2b3"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"2353320d18ce4bedba7f573eb31f02cd"} >filepath </Text><Text key={"2353320d18ce4bedba7f573eb31f02cd"} >(for file output only): the path to the output file</Text></Block></Block></Block></Block></Block><Block type="table-row"   key={"f677665ca427434fa103e40c7dd88e10"} ><Block type="table-cell"   key={"80db73c17ecb41419a3819381d53b540"} ><Block type="paragraph"   key={"283ee98fa0444948a9a66b6a720ea359"} ><Text key={"b9926cb3c149445fa367e98604d89c5a"} >Result Size</Text></Block></Block><Block type="table-cell"   key={"354d9d04d10541d8b7884efd7cf1b33a"} ><Block type="paragraph"   key={"ef41277bfc6e4e8bab7044ee3e7f8460"} ><Text key={"2d5528d078c54ab18b28d34a62d9f3ba"} >V = number of vertices</Text></Block></Block></Block><Block type="table-row"   key={"7e5051b2b4624117820abb8d8462ff70"} ><Block type="table-cell"   key={"267fb82553614b4290a0beb99b82fd6e"} ><Block type="paragraph"   key={"475801defbc647f6af95fd851277cf69"} ><Text key={"b17e375ba234402a95f6c67f02df5a27"} >Computational Complexity</Text></Block></Block><Block type="table-cell"   key={"58a4673fb4af4c8bb5c824203d2a6a66"} ><Block type="paragraph"   key={"7a4ada6132e54f26b237629e74b19ae1"} ><Text key={"aad93b2852ec42948c05f57c3818e683"} >O(E*V), E = number of edges, V = number of vertices.</Text></Block><Block type="paragraph"   key={"7a1139b731464d4ab58eac97640ddbee"} ><Text key={"e3195fe79b8f406393d34788e82efe68"} >The number of iterations is data-dependent, but the user can set a maximum. Parallel processing reduces the time needed for computation.</Text></Block></Block></Block><Block type="table-row"   key={"8f21ebc2e70d4f86a60bf8fc47aca91f"} ><Block type="table-cell"   key={"e5eea2426d3747f0b81b00e1f957cc0d"} ><Block type="paragraph"   key={"46f568f9942543f2987377a945eaab5f"} ><Text key={"bb76e3f01ddb46d0aaa56c45f29d0942"} >Graph Types</Text></Block></Block><Block type="table-cell"   key={"f50865659cbb47a7bd6e3b63e80f6791"} ><Block type="paragraph"   key={"e1f4fad2ed884445876725cc0d3320ee"} ><Text key={"b5d00b950ac249c0b134f6ee13807012"} >Directed or Undirected edges, Unweighted edges</Text></Block></Block></Block></Block><Block type="heading-3"   key={"caa61b13d19241debcbbefed0fe18dae"} ><Text key={"1e13d82c5f494054bcf657b0859abba4"} >Example</Text></Block><Block type="paragraph"   key={"1ef41394a00d4006abb1b04ad4bf5fe4"} ><Text key={"edd19c13c58c47048c20c03aa567644e"} >Betweenness centrality can be  (work in progress...)</Text></Block><Block type="heading-1"   key={"5213a4bc43ac45cc83d8951c5650a94b"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"e508e73218e94898b26133082a2539a9"} >Community  Algorithms</Text></Block><Block type="paragraph"   key={"167d4a063edf4900a6fe82a3b863bdd2"} ><Text key={"9bb66db0d6ff4ba9b2b65c23438e1daf"} >These algorithms evaluate how a group is clustered or partitioned, as well as its tendency to strengthen or break apart.</Text></Block><Block type="heading-2"   key={"23cd571a6a724458916aa880463dfaab"} ><Text key={"287c6179412e474abd9b8edd15920716"} >Connected Components </Text></Block><Block type="heading-3"   key={"6cd3782813aa4410ac000a0fc493a8ae"} ><Text key={"84ac0b4fb7c5438c8dea3ae903b353e7"} >Description and Uses</Text></Block><Block type="paragraph"   key={"104d6a3dc3ee4838bd24c1a5019e10ae"} ><Text key={"d130d2e62b084b1d9bba2089492e9792"} >A component is the maximal set of vertices, plus their connecting edges, which are interconnected. That is, you can reach each vertex from each other vertex. In the example figure below, there are three components.</Text></Block><Block type="paragraph"   key={"5a63a7dc89754f30b6693adef4a2bab3"} ><Text key={"433134d676a44d4e88e6b38aadf1e5b4"} >This particular algorithm deals with undirected edges. If the same definition (each vertex can reach each other vertex) is applied to directed edges, then the components are called Strongly Connected Components. If you have directed edges but ignore the direction (permitting traversal in either direction), then the algorithm finds Weakly Connected Components.</Text></Block><Block type="heading-3"   key={"0ceabb14948447979d8c730e1bfaf4de"} ><Text key={"ca0a00d3409541789e26622e603ae2aa"} >Specifications</Text></Block><Block type="code"  data={{"syntax":"text"}}  key={"ef57ae62b6514ba3bf6f6210a6d8038f"} ><Block type="code-line"   key={"e662a9e2f38947c2826b89a274de8e6f"} ><Text key={"fe666e1494a9431fa5c13e2694d8241a"} >conn_comp()</Text></Block><Block type="code-line"   key={"aa139669676e4dd7904563843b9c102f"} ><Text key={"3937c6bcacc64a9997d81883b60348d5"} >conn_comp_file(STRING filepath)</Text></Block><Block type="code-line"   key={"618c53825c714219951e515314cedc68"} ><Text key={"372fa1a173004797843500c2714d3ec0"} >conn_comp_attr()</Text></Block></Block><Block type="table"  data={{"aligns":["left","left"]}}  key={"5b137b0af49747e789c1769694b29c6f"} ><Block type="table-row"   key={"9e8726e3655543baa664e1c3b8b5ec1b"} ><Block type="table-cell"   key={"1ad689708d564f2395ea51e8bc8400c2"} ><Block type="paragraph"   key={"6103580faa26498cae216be6d612a129"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"c4ac10781e2b49bea79231fe9fffe09d"} >Characteristic</Text></Block></Block><Block type="table-cell"   key={"37e34a1a34b54b2cacd74311fe55f3a6"} ><Block type="paragraph"   key={"54eca0854fb14a22af9400ddae59e343"} ><Text key={"7b3d302ebc79475c81a210fff97d4310"} >Value</Text></Block></Block></Block><Block type="table-row"   key={"4ca49f114851427bb1f7d4b469eb62e8"} ><Block type="table-cell"   key={"1b6db4ff6f914859908279cb3c32f284"} ><Block type="paragraph"   key={"0c77b24593af42458f50aee314ba5d3d"} ><Text key={"ab0e429e50b74cabb1b234da9a689f61"} >Result</Text></Block></Block><Block type="table-cell"   key={"f0e9b7b560bc469ca7d96082fddf80c1"} ><Block type="paragraph"   key={"0f0d97bc890247de9d421fb7335d28f1"} ><Text key={"e83a6226f5da4ccab90286d9958a6e29"} >Assigns a component id (INT)  to each vertex, such that members of the same component have the same id value. The result is available in three forms:</Text></Block><Block type="list-unordered"   key={"4b40db9ea13a4fc8a09109e4fe74d8b2"} ><Block type="list-item"   key={"a6008cf1d76f4437914d83f0242a0d88"} ><Block type="paragraph"   key={"c6e679f8a9c94e5f8b5320ae1df9cea8"} ><Text key={"51f38e82d19a4ac6af4c5797e27b8fd6"} >streamed out in JSON format</Text></Block></Block><Block type="list-item"   key={"a0015e7d30a84f019ae3e39be5f564bf"} ><Block type="paragraph"   key={"c91c287f3ce241b186d350a542df0183"} ><Text key={"6d080d5fcd3d4934a7905f4aec937fe8"} >written to a file in tabular format, or</Text></Block></Block><Block type="list-item"   key={"105f662f4f9842bf8594ff46731077d4"} ><Block type="paragraph"   key={"a5837644b4b64f1a8f20edfae81c1da8"} ><Text key={"1874832cbc6145ceae86a85e844127f8"} >stored as a vertex attribute value.</Text></Block></Block></Block></Block></Block><Block type="table-row"   key={"607bf03179b54988994a22233851d5e0"} ><Block type="table-cell"   key={"699bf488ad60431abfc0a48e7c3a7270"} ><Block type="paragraph"   key={"1494ad679c154d799f40c5888e800b78"} ><Text key={"43234290d13a441eb8e316c9f0bad206"} >Input Parameters</Text></Block></Block><Block type="table-cell"   key={"194118182aa24095bc98c806cb35c96b"} ><Block type="list-unordered"   key={"202c961ee9cb4d58bd20f2a19ca59ea0"} ><Block type="list-item"   key={"4613678f54184b3dbd01fbc5818c5da6"} ><Block type="paragraph"   key={"b95fff3a1ce24ad4a1ce70212de1cd59"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"2bf6dc5455744556944847f2f189614e"} >filepath</Text><Text key={"2bf6dc5455744556944847f2f189614e"} > (for file output only): the path to the output file</Text></Block></Block></Block></Block></Block><Block type="table-row"   key={"5443804eda26435eb08924d37c9e0bc7"} ><Block type="table-cell"   key={"16dd2ef8abed4701b4a6a8c41d1366d1"} ><Block type="paragraph"   key={"ac5c8d3d7bdb47a59fba92a10ad99bc0"} ><Text key={"054520949469484f9dd8843efe3f3d2e"} >Result Size</Text></Block></Block><Block type="table-cell"   key={"fcb11108ac884d4994e519c44a900207"} ><Block type="paragraph"   key={"94baa0dc4fb64b6b8d8e1b1ebb52c586"} ><Text key={"b007c2b2cc4f400a8325054bac2eadc6"} >V = number of vertices</Text></Block></Block></Block><Block type="table-row"   key={"e3589c3a3cfe48ab9d5661f717b89a54"} ><Block type="table-cell"   key={"a2904328d30d4d83b37020222d38d0ef"} ><Block type="paragraph"   key={"f62969515dcc419cb73662b41090420a"} ><Text key={"9e1da749cc56446b835d4bc126dd526b"} >Computational Complexity</Text></Block></Block><Block type="table-cell"   key={"84c26a99b7f749ed95a1f128afaf5ab1"} ><Block type="paragraph"   key={"c2465b9e629046949ddd6b335c006673"} ><Text key={"ac345b61c6924468ad66f8c939e71bed"} >O(E*d), E = number of edges, d = max(diameter of components)</Text></Block></Block></Block><Block type="table-row"   key={"5f28d20cbe064e5da918ec2bf48b619d"} ><Block type="table-cell"   key={"d2e4a43ef6834ca4b42b98ec385bc184"} ><Block type="paragraph"   key={"45814853af014d289b15953847ac4cbd"} ><Text key={"8fb8ab2b29954648a66c7312b0db3192"} >Graph Types</Text></Block></Block><Block type="table-cell"   key={"fd594d51a5424c278bfec5cc52a77a09"} ><Block type="paragraph"   key={"6d975c0e9be9442291b316dcd00cb97b"} ><Text key={"6b159f14ff7b40a0965791aec6c3788f"} >Undirected edges</Text></Block></Block></Block></Block><Block type="heading-3"   key={"c3135229a8d44147a4934570f34e3273"} ><Text key={"70cfa7701d2a49399520a9c220346c62"} >Example</Text></Block><Block type="paragraph"   key={"7b08628cbc484fc6bb6c441c16c98a4a"} ><Text key={"bd5211c65e2441f3adb51d964c4414ad"} >It is easy to see in this small graph that the algorithm correctly groups the vertices:</Text></Block><Block type="list-unordered"   key={"7b54407ad67e4601b142f46563ae13a6"} ><Block type="list-item"   key={"bea98063de064651a74ff6d60cbfa966"} ><Block type="paragraph"   key={"51339b4fc4374367a73aa47e73438bac"} ><Text key={"340f204fe1754030b2e2b100d1b4ac53"} >Alex, Bob and Justin all have Community ID = 2097152</Text></Block></Block><Block type="list-item"   key={"f05f8635952d4a18ba17e9511a2b16e5"} ><Block type="paragraph"   key={"57f53eac794c45a08180ab7cf5e73677"} ><Text key={"c84f72b49def456795d10922dff173b1"} >Chase, Damon, and Eddie all have Community ID = 5242880</Text></Block></Block><Block type="list-item"   key={"bd1235e117cf401b80ba89d19ee5d785"} ><Block type="paragraph"   key={"6781091830c24f5c99b18222afae8eb4"} ><Text key={"99b7603843cd41df8b5c03c0dccb45ea"} >Fiona, George, Howard, and Ivy all have Community ID = 0</Text></Block></Block></Block><Block type="paragraph"   key={"a863552303a74a3b9375bdf7a11ee174"} ><Text key={"a5b43412ce08413281f13a05e5ff1ee1"} >Our algorithm uses the TigerGraph engine's internal vertex ID numbers; they cannot be predicted.  </Text></Block><Block type="image"  data={{"assetID":"-LPUMvlq5-s_RigUtCiO","caption":"conn_comp(true, \"json\") on social10 graph with Coworker edges"}}  key={"b0138ec9beaa49afa7f9772085376d63"} ><Text key={"3379223501ef4d6a803bb149815e90ef"} ></Text></Block><Block type="heading-2"   key={"5b3a90ffa94145b48dd8f99c4163314e"} ><Text key={"dea6a1a1315a40ec8a20104f600ea8f9"} >Strongly Connected Components</Text></Block><Block type="heading-3"   key={"3730c48f1bc04be0967001ea81655a78"} ><Text key={"ee9108ef355e41ba932184edaa21238b"} >Description and Uses</Text></Block><Block type="paragraph"   key={"58ec20765bce4efd88fb940742e10118"} ><Text key={"14f4ef9826a34bf598465fb99997fbb9"} >A strongly connected component (SCC) is a subgraph such that there is a path from any vertex to every other vertex. A graph can contain more than one separate SCC. An SCC algorithm finds the maximal SCCs within a graph. Our implementation is based on the Divide-and-Conquer Strong Components (DCSC) algorithm[1]. In each iteration, pick a pivot vertex v randomly, and find its descendant and predecessor sets, where descendant set D_v is the vertex reachable from v, and predecessor set P_v is the vertices which can reach v (stated another way, reachable from v through reverse edges). The intersection of these two sets is a strongly connected component SCC_v. The graph can be partitioned to 4 sets: SCC_v, descendants D_v excluding SCC_v, predecessors P_v excluding SCC, and the remainders R_v. It is proved that </Text><Text marks={[{"kind":"mark","type":"italic","data":{}}]}  key={"14f4ef9826a34bf598465fb99997fbb9"} >any SCC</Text><Text key={"14f4ef9826a34bf598465fb99997fbb9"} > is a subset of one of the 4 sets [1]. Thus, we can divide the graph into different subsets and detect the SCCs independently and iteratively.  </Text></Block><Block type="paragraph"   key={"0510d4ca7bfc443e91b42a3ad47acca7"} ><Text key={"8ca82b8a70ae4f6199894bc42d9c7030"} >The problem of this algorithm is unbalanced load and slow convergence when there are a lot of small SCCs, which is often the case in real world use cases [3]. We added two trimming stages to improve the performance: size-1 SCC trimming[2] and weakly connected components[3]. </Text></Block><Block type="paragraph"   key={"4f4297dc9f114b3584691bfbe72b1dcd"} ><Text key={"34925d3ecce54efaa6a083d30f01f5ca"} >The implementation of this algorithm requires reverse edges for all directed edges considered in the graph.</Text></Block><Block type="paragraph"   key={"e958d1adbf3448b6b43380f41123b7d6"} ><Text key={"f75075900d334d2ab0303ea68f3da6f1"} >[1] Fleischer, Lisa K., Bruce Hendrickson, and Ali Pınar. "On identifying strongly connected components in parallel." International Parallel and Distributed Processing Symposium. Springer, Berlin, Heidelberg, 2000.</Text></Block><Block type="paragraph"   key={"9c61d61f83834362ac2bd946c0e7c96d"} ><Text key={"d5377dbf0f1242e6ae1ff0944e9489b9"} >[2] Mclendon Iii, William, et al. "Finding strongly connected components in distributed graphs." Journal of Parallel and Distributed Computing 65.8 (2005): 901-910.</Text></Block><Block type="paragraph"   key={"c416013ee8164d45a9654972f2616acb"} ><Text key={"3d30927e45824a4783090fddd18ed6ec"} >[3] Hong, Sungpack, Nicole C. Rodia, and Kunle Olukotun. "On fast parallel detection of strongly connected components (SCC) in small-world graphs." Proceedings of the International Conference on High Performance Computing, Networking, Storage and Analysis. ACM, 2013.</Text></Block><Block type="heading-3"   key={"440259f025644b18816395bbab04a17a"} ><Text key={"3c440a04bc924e6c98e009a909d214cc"} >Specifications</Text></Block><Block type="code"  data={{"syntax":"text"}}  key={"aaf3c9410a3c46918c4eb0b3a54063bd"} ><Block type="code-line"   key={"fafb07d8ded249969e09e7dbe02d8636"} ><Text key={"92a618ff0ae4489d9329cc0efac8285b"} >scc(INT iter = 500, INT iter_wcc = 5, INT top_k_dist)</Text></Block><Block type="code-line"   key={"2c0758b240f94715861e5893d4aba21e"} ><Text key={"5c6ecbdb35e849899bf6a97ce4ff76e8"} >scc_file(INT iter = 500, INT iter_wcc = 5, INT top_k_dist, FILE f)</Text></Block><Block type="code-line"   key={"6b6381618a824daab2131c9ede26a552"} ><Text key={"0f372a522fdb48d4857a75919b6f4e30"} >scc_attr(INT iter = 500, INT iter_wcc = 5, INT top_k_dist)</Text></Block></Block><Block type="table"  data={{"aligns":["left","left"]}}  key={"524341904d07416594fdbb4cb984a7d1"} ><Block type="table-row"   key={"9bc7f4e9cad84ba5841977b530ada000"} ><Block type="table-cell"   key={"15f521dbcfeb4e87956ecdfccea4129c"} ><Block type="paragraph"   key={"8e5516d15af94e5cb8ed9b7301a20771"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"393713270fa44b9d98109f9be5565e45"} >Characteristic</Text></Block></Block><Block type="table-cell"   key={"130ea1e9f12d4774a48c8854381c6eba"} ><Block type="paragraph"   key={"9bf6dc1c95df42b9954a47ac37ae5c1f"} ><Text key={"3611a7b742334a40b3063f309a940391"} >Value</Text></Block></Block></Block><Block type="table-row"   key={"fda1371b19a04e6781768b22637d8031"} ><Block type="table-cell"   key={"dad691b655614104b758a3e8d1eab5ce"} ><Block type="paragraph"   key={"fc482659092b48d9b9ac019572a51814"} ><Text key={"bd9d377ce2b14e498ca6859badbfd41e"} >Result</Text></Block></Block><Block type="table-cell"   key={"c846ab3e18fb492b97566d43f6f2272d"} ><Block type="paragraph"   key={"6e81ac10111745849343ba214585755d"} ><Text key={"fac24a481b5145bd88cb92f9cadd128e"} >Assigns a component id (INT)  to each vertex, such that members of the same component have the same id value. The result is available in three forms:</Text></Block><Block type="list-unordered"   key={"0046792956354f7d923b62874b7958d5"} ><Block type="list-item"   key={"a7fe917728784bf29e4ca8a9f01571cc"} ><Block type="paragraph"   key={"c8473e738e154c49a88101506032f66a"} ><Text key={"d569f2f0a7b3432589c957e9a8721110"} >streamed out in JSON format</Text></Block></Block><Block type="list-item"   key={"d09e85c6b2b24f87b120f8ca4f7b0727"} ><Block type="paragraph"   key={"a273f7d860cd412985e21feac92aa1c8"} ><Text key={"3eec3c88556b41b9bfc8ebf12cf091aa"} >written to a file in tabular format, or</Text></Block></Block><Block type="list-item"   key={"4031fd9d54ab4510b9860616816a9f32"} ><Block type="paragraph"   key={"89007c0863684dd0b00870994109e8d1"} ><Text key={"dd14e5df8af04b64982ab8fb9fa274d5"} >stored as a vertex attribute value.</Text></Block></Block></Block></Block></Block><Block type="table-row"   key={"2bbf3f33fd2d42f483ca5909011c4f2f"} ><Block type="table-cell"   key={"d0b20e94ae6948a8894ee608d496fe40"} ><Block type="paragraph"   key={"79944aa5fb0e45bcac5797b8b0317f58"} ><Text key={"b02e204d97d847e993399a2dcdfa2f04"} >Input Parameters</Text></Block></Block><Block type="table-cell"   key={"f8355f8aa3be42b5a7b16e3e092d0f9e"} ><Block type="list-unordered"   key={"b802733dd09349ae99b2200b8ff8b6bc"} ><Block type="list-item"   key={"58c61fa08dd94b48abc656c03cb7cc6d"} ><Block type="paragraph"   key={"d79dfe7e393944d1b1dc0bec2b147f40"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"7372aaaa90074c72a62fecc4d4806f46"} >iter</Text><Text key={"7372aaaa90074c72a62fecc4d4806f46"} >: number of maximum iteration of the algorithm</Text></Block></Block><Block type="list-item"   key={"628ee6e635034fb0985eceb8fec8ec51"} ><Block type="paragraph"   key={"8fabd02891904ad6a09994c89e942679"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"03151d47a6974665b3a65fd2d4820d23"} >iter_wcc</Text><Text key={"03151d47a6974665b3a65fd2d4820d23"} >: find weakly connected components for the active vertices in this iteration, since the largest SCCs are already found after several iterations; usually a small number(3 to 10)</Text></Block></Block><Block type="list-item"   key={"3568fa27dba1443d8a5bc846b04a8b89"} ><Block type="paragraph"   key={"8618e001c212431f839ec327894fd9bf"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"373c9f27be764d40bb39e28243e144c5"} >top_k_dist</Text><Text key={"373c9f27be764d40bb39e28243e144c5"} >: top k result in SCC distribution</Text></Block></Block><Block type="list-item"   key={"220d150773744dfbb82aa19d438f025e"} ><Block type="paragraph"   key={"11f3529d67c84b009eb02c6fa3dda560"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"db14467c7e974d24a4c8055ab211d660"} >f</Text><Text key={"db14467c7e974d24a4c8055ab211d660"} > (for file output only): the path to the output file</Text></Block></Block></Block></Block></Block><Block type="table-row"   key={"52905c33b3644675884164a9d998de10"} ><Block type="table-cell"   key={"50bff9e7fa3c47afadf2ef350285b95c"} ><Block type="paragraph"   key={"27bb070a3ab24deabc2b69b0df1cf222"} ><Text key={"00265cdf755c4085899b87d93ef6d126"} >Result Size</Text></Block></Block><Block type="table-cell"   key={"e3801af6539b46698e801f8b22739ebb"} ><Block type="paragraph"   key={"ead535b0e69d4189a9906fdb6f949860"} ><Text key={"56388db5621e4f03820e8873850baa41"} >V = number of vertices</Text></Block></Block></Block><Block type="table-row"   key={"57142161df2547668b8a0af861a9edc3"} ><Block type="table-cell"   key={"8cb81b26249645f99f16e8fe0de280f2"} ><Block type="paragraph"   key={"b25348eed8af4bd0b8012ed338ac49f7"} ><Text key={"ff57744fc7264c2aa3f03887451b0654"} >Computational Complexity</Text></Block></Block><Block type="table-cell"   key={"4cf04d54be364da48806a843b85b725e"} ><Block type="paragraph"   key={"7095d0bd04404001822f049f115b57e7"} ><Text key={"72fcd3996f684bb5a16f1981170903cb"} >O(iter*d), d = max(diameter of components)</Text></Block></Block></Block><Block type="table-row"   key={"b2358037ac0444e293f5f7e16acaa6e4"} ><Block type="table-cell"   key={"a6850747077c43d79d90587096ebac21"} ><Block type="paragraph"   key={"23bef1cb9b7849abbb24c8f1553263cf"} ><Text key={"bc634de2ff4443299baa31105c94b2e6"} >Graph Types</Text></Block></Block><Block type="table-cell"   key={"638077547a474827bbf17de2e668f74e"} ><Block type="paragraph"   key={"93cc67cb1866479fb6dcbf4de49f8d27"} ><Text key={"fc957b33bac349a29f2fd4870176bc3f"} >Directed edges with reverse direction edges as well</Text></Block></Block></Block></Block><Block type="heading-3"   key={"4c091a8d40364965b83395810e8f5970"} ><Text key={"8bbdec887b3c4abd9d4bea935c299188"} >Example</Text></Block><Block type="paragraph"   key={"a8d22142dd314da495c680375d75fde2"} ><Text key={"4843e6dce8e14392be930593d2a6e865"} >We ran scc on the social26 graph. A portion of the JSON result is shown below.</Text></Block><Block type="code"  data={{"syntax":"text"}}  key={"651c0442403c45f19b98426179a3632a"} ><Block type="code-line"   key={"6b98944d63ee4e359de0d10183c5b79b"} ><Text key={"711bc8a0ec9b4aa492554a3f5cc87ae4"} >[</Text></Block><Block type="code-line"   key={"e94e50fb84bd40f5bb47558c1975378c"} ><Text key={"89286f5d1c044742982de4d644d8b4b6"} >{`  \{`}</Text></Block><Block type="code-line"   key={"5f8b65da852b404095d8d1dfc1664721"} ><Text key={"9bf76a2dcda348ca83f154cab1697f8b"} >    "i": 1</Text></Block><Block type="code-line"   key={"da56ddd271214c458ce108bd837d4b7b"} ><Text key={"451143a57b39414991616b4ed2734321"} >{`  \},`}</Text></Block><Block type="code-line"   key={"febeb8b669ea437089c4b6e9805c406a"} ><Text key={"2f559052d197487891ef79201ca0f2c5"} >{`  \{`}</Text></Block><Block type="code-line"   key={"67e42e5e04444b28895ff2c3a73b1d9a"} ><Text key={"be4bba2f556c4a1fa52c548463b6b0ea"} >    "trim_set.size()": 8</Text></Block><Block type="code-line"   key={"c384ba0c2a0141c6abc5df426d6242b2"} ><Text key={"64db9cada67b4913806fb800dd39667f"} >{`  \},`}</Text></Block><Block type="code-line"   key={"13faf9bee2ad4f01bace7bffc31e6898"} ><Text key={"aeaa17e798ed4a1c9ae41ff56830a32f"} >{`  \{`}</Text></Block><Block type="code-line"   key={"50483ea28be846938498612b67a0c966"} ><Text key={"2cd6fd5598a94a9a8ae375c844cc5a1b"} >    "trim_set.size()": 5</Text></Block><Block type="code-line"   key={"98e63e0a457241b98cd945f212256d57"} ><Text key={"59036075e5f94ea09b5ad9768254358e"} >{`  \},`}</Text></Block><Block type="code-line"   key={"6fb65fa4279f4cad9ec7c2d29460f4ce"} ><Text key={"5a6a6822e6134895a4d3abd891266214"} >{`  \{`}</Text></Block><Block type="code-line"   key={"06423f00a3c04510851d588cf0b67129"} ><Text key={"7127393833da41eab54b234ea1e37da4"} >    "trim_set.size()": 2</Text></Block><Block type="code-line"   key={"d0633aaa4c5848efb07a2802f357ed11"} ><Text key={"469475b5b4fb498a86ed0504c1694fd1"} >{`  \},`}</Text></Block><Block type="code-line"   key={"bb1caf658de344738f23e0cadbf8421e"} ><Text key={"19e83c862ea64bc3919e9a08e3653be0"} >{`  \{`}</Text></Block><Block type="code-line"   key={"449152c99c8d4886bb2b0ec9c55997e8"} ><Text key={"80b303527aed488f9f2f431e8c3e0973"} >    "trim_set.size()": 2</Text></Block><Block type="code-line"   key={"42678d7771444bad80872c889daeea1e"} ><Text key={"ae4313b40c794bfeb2ca3e35df9be08f"} >{`  \},`}</Text></Block><Block type="code-line"   key={"8a7aa96605bc436183094b7f8cd76281"} ><Text key={"5648a60526e34845acfb396e7bffb509"} >{`  \{`}</Text></Block><Block type="code-line"   key={"eaa8f73b433f4c0aa554f7ca13f0bc2f"} ><Text key={"7fed86accc4b4419b5e84b59bb1ffd76"} >    "trim_set.size()": 0</Text></Block><Block type="code-line"   key={"1a47ee3da1844b168cbd2f57f78c7f25"} ><Text key={"fb3e370e278342b3a5bd2c4fa385f650"} >{`  \},`}</Text></Block><Block type="code-line"   key={"194d4997216342b7ba0606087a9344b4"} ><Text key={"1c7d62763d83477eb0d7e5ec1885d99a"} >{`  \{`}</Text></Block><Block type="code-line"   key={"bc89d853ad8e45f9a4704a5f5405b06b"} ><Text key={"0fd4d9cc1a014b47acc29f33cd4679d5"} >    "@@cluster_dist_heap": [</Text></Block><Block type="code-line"   key={"9a46668d92144f7fbc09b2358a920a50"} ><Text key={"f01176b0bc224263a88f5a0b34bce1e1"} >{`      \{`}</Text></Block><Block type="code-line"   key={"22646b8b623441ba892fe44e82ba96f0"} ><Text key={"7f17c7e184ca49808f26a7583c85137a"} >        "csize": 9,</Text></Block><Block type="code-line"   key={"02b66c2b0d334b2abcb3346914d47698"} ><Text key={"f2355a04a1834a2ea15cd4f350d3f47e"} >        "num": 1</Text></Block><Block type="code-line"   key={"c7fddad4112c4b239c7786debbada6ab"} ><Text key={"4da153d7fb2d45c7913d06de53cfa5cc"} >{`      \},`}</Text></Block><Block type="code-line"   key={"dcf189780e784d2980562846d2a053d8"} ><Text key={"c0e43d664cea4c21bd85b3368d115da2"} >{`      \{`}</Text></Block><Block type="code-line"   key={"813ccf84456440ccaac2bfea0ff2be28"} ><Text key={"6a7f5200ca61477da9c0de1f62c47770"} >        "csize": 1,</Text></Block><Block type="code-line"   key={"3f2bedd3b28f4b0dab9b91257bc9ea12"} ><Text key={"8ff5fe9c154a47be8d506ff73bc16835"} >        "num": 17</Text></Block><Block type="code-line"   key={"51c781734c9b4fea92bf6b283632b7c0"} ><Text key={"728103a2d47a4c30ba1f4596da18ebf7"} >{`      \}`}</Text></Block><Block type="code-line"   key={"3eddc7370c7045e882b20756b4669931"} ><Text key={"671c48b3f88e4a21a14ddfeb480b5c20"} >    ]</Text></Block><Block type="code-line"   key={"1f5fe7f7ab7c4e35bdcaa17be44e1e43"} ><Text key={"dace5b25eb8442b0a14fd4731470e2c1"} >{`  \},`}</Text></Block></Block><Block type="paragraph"   key={"fc71b0bfbe5a448fb71d71951de9236f"} ><Text key={"a993a84eefa441b2b986c36eaa0a8c45"} >The first element </Text><Text marks={[{"kind":"mark","type":"code","data":{}}]}  key={"a993a84eefa441b2b986c36eaa0a8c45"} >"i"=1</Text><Text key={"a993a84eefa441b2b986c36eaa0a8c45"} > means the whole graph is processed in just one iteration. The 5 </Text><Text marks={[{"kind":"mark","type":"code","data":{}}]}  key={"a993a84eefa441b2b986c36eaa0a8c45"} >"trim_set.size()"</Text><Text key={"a993a84eefa441b2b986c36eaa0a8c45"} > elements mean there were 5 rounds of size-1 SCC trimming. The final </Text><Text marks={[{"kind":"mark","type":"code","data":{}}]}  key={"a993a84eefa441b2b986c36eaa0a8c45"} >"@@.cluster_dist_heap" object" </Text><Text key={"a993a84eefa441b2b986c36eaa0a8c45"} >reports on the size distribution of SCCs.There is one SCC with 9 vertices, and 17 SCCs with only 1 vertex in the graph.</Text></Block><Block type="heading-2"   key={"e1533f848b9546e8afc2b39dc42afe07"} ><Text key={"9304072fed934147bd2c55b174d42370"} >Label Propagation</Text></Block><Block type="heading-3"   key={"dc726522808948319e8a2bcc1c4d9885"} ><Text key={"b9cd357adcf64ac4b08bee4b6cfe2e91"} >Description and Uses</Text></Block><Block type="paragraph"   key={"e810f992987947a18b698539c2f8a72f"} ><Text key={"66a25dde7fb04f7cb787f5610e37839e"} >Label Propagation is a heuristic method for determining communities.  The idea is simple: If the plurality of your neighbors all bear the label X, then you should label yourself as also a member of X. The algorithm begins with each vertex having its own unique label. Then we iteratively update labels based on the neighbor influence described above. It is important that they the order for updating the vertices be random. The algorithm is favored for its efficiency and simplicity, but it is not guaranteed to produce the same results every time.</Text></Block><Block type="paragraph"   key={"31b5d79691a9470190aa9cddcdba2f3b"} ><Text key={"0d30c3170a214abebd2a7403b2f4e64d"} >In a variant version, some vertices could initially be known to belong to the same community,. If they are well-connected to one another, they are likely to preserve their common membership and influence their neighbors,</Text></Block><Block type="heading-3"   key={"6ec6a755f03641209a14c4ad189e3c68"} ><Text key={"838711ad4a46491ba39160c613304a11"} >Specifications</Text></Block><Block type="code"  data={{"syntax":"text"}}  key={"210f2ecfbd214205a32f704fb996cb5f"} ><Block type="code-line"   key={"a30307f53ea84caa860515a120d85a47"} ><Text key={"02b4e72b242d4303af25969de602a9b8"} >label_prop(INT maxIter)</Text></Block><Block type="code-line"   key={"4521e26bb0eb43309084d60ba02b6b30"} ><Text key={"6579c212379d4dceaa1a23e089eda28c"} >label_prop_file(INT maxIter, FILE filepath)</Text></Block><Block type="code-line"   key={"3e29937633764763b9ea795c0afb8036"} ><Text key={"82688dd1764343f8a90eed590f7da860"} >label_prop_attr(INT maxIter)</Text></Block></Block><Block type="table"  data={{"aligns":["left","left"]}}  key={"9f641cb291c5465fa48f9d0245e1f242"} ><Block type="table-row"   key={"45546b082ae541428a20da0d17ce44e9"} ><Block type="table-cell"   key={"b40d4e71b3004bc4bb35e805cb17582d"} ><Block type="paragraph"   key={"c3475d5e1b0a48cb9c41744da4c731c9"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"6a6a00e927404fbba25d91cad29d612c"} >Characteristic</Text></Block></Block><Block type="table-cell"   key={"c6b46fa27a86474f84f11b88679686c7"} ><Block type="paragraph"   key={"dcd3e2206d0649339eecec55e548a0a3"} ><Text key={"0f0746603b6641fb8c8594869e546f63"} >Value</Text></Block></Block></Block><Block type="table-row"   key={"7ff4e6e58101482bb3171af7c57201ce"} ><Block type="table-cell"   key={"19c5a2ba0751468294dc0506adc52148"} ><Block type="paragraph"   key={"998b64c06d5840fe8b51c0cfaeba477c"} ><Text key={"5dd6a913a59941e6971316ad3d4f4ac1"} >Result</Text></Block></Block><Block type="table-cell"   key={"6d5010ed3f82403b9edf31c104399ded"} ><Block type="paragraph"   key={"0bc4d30b0d714847b6b1f0ebfda66593"} ><Text key={"8e29eb49ad474edc95851b2d5314527d"} >Assigns a component id (INT) to each vertex, such that members of the same component have the same id value. The result is available in three forms:</Text></Block><Block type="list-unordered"   key={"7548e7ab4fe74355b881805d2e0346c1"} ><Block type="list-item"   key={"20488cf9405a4ce18d50c04c79474e69"} ><Block type="paragraph"   key={"12e7105652704495b3452eba9612f306"} ><Text key={"c6a5661724ab486a805eb68de8bbd929"} >streamed out in JSON format</Text></Block></Block><Block type="list-item"   key={"d3b7e6b0bd784eea95f2d8729e44b8b2"} ><Block type="paragraph"   key={"052173e48a854cf18f1e1df94ad1fffc"} ><Text key={"7bf85ff348ba4b73b03b727620a8f0a9"} >written to a file in tabular format, or</Text></Block></Block><Block type="list-item"   key={"f22480a330db4c0bb74af0cd20d4c057"} ><Block type="paragraph"   key={"0977078583d249cc9eca05c4b926788b"} ><Text key={"71de27d286794f308041c5f099bc8800"} >stored as a vertex attribute value.</Text></Block></Block></Block></Block></Block><Block type="table-row"   key={"525680f99523444a85fafa90caec94ba"} ><Block type="table-cell"   key={"31778a00e46f4bc1b9097c063042a2a1"} ><Block type="paragraph"   key={"ff41c551ed5f42f98e44509a9a0f77dc"} ><Text key={"d3ce125a73e046f4af9679b254405900"} >Input Parameters</Text></Block></Block><Block type="table-cell"   key={"120a7ef93b7b46f59149446f8f5750af"} ><Block type="list-unordered"   key={"cadd6b0da86c4713a90d216efaf30e2b"} ><Block type="list-item"   key={"8c8f13e2d8324877ab7d29313ade5d25"} ><Block type="paragraph"   key={"defe3f720aa04deb9384a4321b24f0ae"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"1d3b536650de4ed98b26cb79fcb20b7f"} >maxIter</Text><Text key={"1d3b536650de4ed98b26cb79fcb20b7f"} >: the maximum number of update iterations.</Text></Block></Block><Block type="list-item"   key={"12e174105ca54aa4b0f459dfa0d75aa0"} ><Block type="paragraph"   key={"14284f6e51c9411cb5fb3fe89b2142f0"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"978801ef88f8417fa305475f0da56088"} >filepath</Text><Text key={"978801ef88f8417fa305475f0da56088"} > (for file output only): the path to the output file</Text></Block></Block></Block></Block></Block><Block type="table-row"   key={"039665e36cf2410b8578f99dd2a7e65b"} ><Block type="table-cell"   key={"12414c516c374c97ace8311fa74d1536"} ><Block type="paragraph"   key={"f836df62e20940578beb9a58c9d40071"} ><Text key={"ebbe676d168a4b778f0123205aa26e4a"} >Result Size</Text></Block></Block><Block type="table-cell"   key={"ea257a8b993542ecab1a41aec0aee200"} ><Block type="paragraph"   key={"9b63f96272c34b10861c4783982d26fc"} ><Text key={"e2892ff5fd414ad6bddda7593c0138c0"} >V = number of vertices</Text></Block></Block></Block><Block type="table-row"   key={"4ef9d1d6f14643c197060a278f62e8ca"} ><Block type="table-cell"   key={"77088ec2a9ed40c3817dd3766e3924d4"} ><Block type="paragraph"   key={"b161246253214d809b61eab7480459b3"} ><Text key={"71fc812628814c0ab6eaf6e41167329a"} >Computational Complexity</Text></Block></Block><Block type="table-cell"   key={"16c06e643b174b2596888091417afb4f"} ><Block type="paragraph"   key={"9b2d7f8079724d1e8798888c4ff43427"} ><Text key={"216132619dbd4b13806d03e5d93e1710"} >O(E*k), E = number of edges, k = number of iterations.</Text></Block></Block></Block><Block type="table-row"   key={"b3f984888eb54c35a9dcc5d17021d0c5"} ><Block type="table-cell"   key={"685b450c8861493abdd22ecdc2595f55"} ><Block type="paragraph"   key={"ccef420ea1c1482ba30a1e9a372472e2"} ><Text key={"6c81ecc417dc4d5280a93548c291ff4b"} >Graph Types</Text></Block></Block><Block type="table-cell"   key={"3abb5cf9be014ea1b049859e19d09e0d"} ><Block type="paragraph"   key={"6492da94a4df4813aa3c623a48cb03aa"} ><Text key={"061428a7218d4e7290acca6ab02624de"} >Undirected edges</Text></Block></Block></Block></Block><Block type="heading-3"   key={"0203d9e84b4a449cbe9d4c07ea96c1fb"} ><Text key={"ee833d126c174633892fae195376666d"} >Example</Text></Block><Block type="paragraph"   key={"bd411dcd72174abe9eae85a26a638c00"} ><Text key={"d88f76348c604c9f83fae3b53e99d097"} >This is the same graph that was used in the Connected Component example. The results are different, though. The quartet of Fiona, George, Howard, and Ivy have been split into 2 groups. See can see the symmetry:</Text></Block><Block type="list-unordered"   key={"b8d7480b94fb4b80a3865670b3a2513e"} ><Block type="list-item"   key={"d6debac9c6d8491a88cd8f7286016e94"} ><Block type="paragraph"   key={"0f39f4ae9d304b6e8a37971baef2cf67"} ><Text key={"cf524be9f7b54375b5e892c185ab77bf"} >{`(George & Ivy) each connect to (Fiona & Howard) and to one another.`}</Text></Block></Block><Block type="list-item"   key={"411230b29d204f34a4751b55370f6e0c"} ><Block type="paragraph"   key={"926de1a751ff43ba8771453dc78f9b21"} ><Text key={"2d88ae4586b24fd4ab385f1f6e1a172d"} >{`(Fiona & Howard) each connect to (George & Ivy) but not to one another.`}</Text></Block></Block></Block><Block type="paragraph"   key={"ec6a93fea7294a3e82e59c5bc1dd77c2"} ><Text key={"47461921de9242ce802d219bacdc760c"} >Label Propagation tries to find natural clusters and separations within connected components.  That is, it looks at the quality and pattern of connections.  The Component Component algorithm simply asks the Yes or No question: Are these two vertices connected?</Text></Block><Block type="paragraph"   key={"52680612d79c455ca312602db895e802"} ><Text key={"0595ff18d85a4f559793f1dc14cbf7f9"} >We set maxIter to 10, but the algorithm reached steady state after 3 iterations.</Text></Block><Block type="image"  data={{"assetID":"-LPbqXOnpHcAKTvazgYM","caption":"label_prop(10) on social10 graph with Coworker edges"}}  key={"9495908682014fb4ab4e87a12630f407"} ><Text key={"913ee4b709fd48b98355bb89aa28ef9a"} ></Text></Block><Block type="heading-2"   key={"84307cdbc2004949b96c804084cd9d35"} ><Text key={"7be13ac04bc74160b8a42713286e7956"} >Louvain Modularity for Community Detection (Deprecated)</Text></Block><Block type="heading-3"   key={"957cb8a1cf48499f83f1c20c84e7739b"} ><Text key={"69b0e93e02cb4744b9b15ea43cb454b8"} ></Text></Block><Block type="hint"  data={{"style":"warning"}}  key={"07e84d0f8d67442985faa85a8e9281f3"} ><Block type="paragraph"   key={"759be8ae73b94e71941193df13325821"} ><Text key={"81ad97e505f94c81a201ae30ebb4b84a"} >This algorithm is deprecated because a much higher performance algorithm (louvain_parallel) should be used instead of the original louvain algorithm.</Text></Block></Block><Block type="heading-3"   key={"d4b04364c0d84357b8a22794ef7bb550"} ><Text key={"c68ecd68f26543a7a5615a10faf39ff7"} >Description and Uses</Text></Block><Block type="paragraph"   key={"4292223ca0cb448b922f8c3b01c5b3a1"} ><Text key={"fe3000794c2b404c825b82b2b60c00c7"} >The modularity score for a partitioned graph assesses the difference in density of links within a partition vs. the density of links crossing from one partition to another. The assumption is that if a partitioning is good (that is, dividing up the graph into communities or clusters), then the within-density should be high and the inter-density should be low.</Text></Block><Block type="paragraph"   key={"bdc4527c38c34ff380ec4b31167ae2a7"} ><Text key={"d2b4c89026174a5ca3cd3db3ac84776a"} >Also, we use changes in modularity to guide optimization of the partitioning.  That is, we begin with a candidate partitioning and measure its modularity. Then we make an incremental change and confirm that the modularity has improved. </Text></Block><Block type="paragraph"   key={"46b8aab190cc4e58ad7fcb5a7635ffc2"} ><Text key={"33195241eaac45c19b1b59ffb7992555"} >The most most efficient and empirically effective method for calculating modularity was published by a team of researchers at the University of Louvain. The Louvain method uses agglomeration and hierarchical optimization:</Text></Block><Block type="list-ordered"   key={"abcbf0bd090d45618c3f0380f2fa713e"} ><Block type="list-item"   key={"2f6dd71cdd74485482a9fc8727fe4621"} ><Block type="paragraph"   key={"7d1903caa2394df386b6e6945a6391aa"} ><Text key={"04d8c1d362494530a0857c4483090896"} >Optimize modularity for small local communities.</Text></Block></Block><Block type="list-item"   key={"0ca5c47771404ccdb80377be40955048"} ><Block type="paragraph"   key={"401c03f01f3e47269f42c731ae100153"} ><Text key={"91c7ca4f03eb474a9a037ce8ecddb886"} >Treat each optimized local group as one unit, and repeat the modularity operation for groups of these condensed units.</Text></Block></Block></Block><Block type="heading-3"   key={"4dcb9cdb7ee4469293aebd6c6195b5bb"} ><Text key={"094f1d12426b449d915ae80696fb21db"} >Specifications</Text></Block><Block type="code"  data={{"syntax":"text"}}  key={"d0669a086ec64ca586a6dea803b74862"} ><Block type="code-line"   key={"10a0f93b9f974f7aa263717c813a6819"} ><Text key={"adbde7f2815e4accad0a9d49ff827363"} >louvain()</Text></Block><Block type="code-line"   key={"47839b4587e847889c6f31b69eaf2b42"} ><Text key={"dab5916db941428393e2cc6796a7fec1"} >louvain_file(FILE filepath)</Text></Block><Block type="code-line"   key={"aa0e67475146402da17622dd90a30e36"} ><Text key={"4ce408f235954213b59cfb505e64b1ba"} >louvain_attr()</Text></Block></Block><Block type="heading-2"   key={"98735f282c494c2eb6890abaa1d111a8"} ><Text key={"39b40b156aa5438d9d64c57832616ca9"} >Louvain Method with Parallelism and Refinement</Text></Block><Block type="heading-3"   key={"6ad2693cd43d47a7b91fe2a5d35cdf31"} ><Text key={"27b5146c50314428b62a73e683851fa1"} >Description and Uses</Text></Block><Block type="paragraph"   key={"7678a0e8777045ec8940c23c8159aff3"} ><Text key={"60a62790a6934ac6a25bbbc7f39a70e5"} >The Louvain Method for community detection [1] partitions the vertices in a graph by approximately maximizing the graph's modularity score. The modularity score for a partitioned graph assesses the difference in density of links within a partition vs. the density of links crossing from one partition to another. The assumption is that if a partitioning is good (that is, dividing up the graph into communities or clusters), then the within-density should be high and the inter-density should be low.</Text></Block><Block type="paragraph"   key={"fef501a3b0e64b958a49fef7679e0f27"} ><Text key={"cf6eff5ecd4a4fee93ca63cbc65d0081"} >The most efficient and empirically effective method for calculating modularity was published by a team of researchers at the University of Louvain. The Louvain method uses agglomeration and hierarchical optimization:</Text></Block><Block type="list-ordered"   key={"04754ae0580b4b19bcdf15995f6134a1"} ><Block type="list-item"   key={"b058f5eaf45a4b6eab24d206db18d618"} ><Block type="paragraph"   key={"68dcc5504e9948d484647e9d2242a796"} ><Text key={"d7d2fdaa38d741f285614ff7dbd169b1"} >Optimize modularity for small local communities.</Text></Block></Block><Block type="list-item"   key={"b7f18d2d2df544b1b4aded1a7552ab3e"} ><Block type="paragraph"   key={"b8b5e0c05c054096a400dd97f9f10f19"} ><Text key={"8651c9e97d8a4f44aeef730fafef308d"} >Treat each optimized local group as one unit, and repeat the modularity operation for groups of these condensed units.</Text></Block></Block></Block><Block type="paragraph"   key={"a5b97af3e72148e98b0abb754660597f"} ><Text key={"8477d443563b46d18c604c8f8c414d1c"} >The original Louvain Method contains two phases. The first phase incrementally calculates the modularity change of moving a vertex into every other community, and moves the vertex to the community with highest modularity change. The second phase coarsens the graph by aggregating the vertices which are assigned in the same community into one vertex. The first phase and second phase make up a pass. The Louvain Method performs the passes iteratively. In other words, the algorithm assigns an initial community label to every vertex, then performs the first phase, during which the community labels are changed, until there is no modularity gain. Then it aggregates the vertices with same labels into one vertex, and calculates the aggregated edge weights between new vertices. For the coarsened graph, the algorithm conducts first phase again to move the vertices into new communities. The algorithm continues until the modularity is not increasing, or runs to the preset iteration limits. </Text></Block><Block type="paragraph"   key={"df68cc094bf04877850af62a2980f688"} ><Text key={"eba649791ca846c89f3e4458b3d40b56"} >However,  phase one is sequential, and thus slow for large graphs. An improved Parallel Louvain Method  Louvain Method (PLM) calculates the best community to move to for each vertex in parallel [2]. In Parallel Louvain Method(PLM), the positive modularity gain is not guaranteed, and it may also swap two vertices to each other’s community. After finishing the passes, there is an additional refinement phase, which is running the first phase again on each vertex to do some small adjustments for the resulting communities. [3].</Text></Block><Block type="paragraph"   key={"99f7312d8bc344fea4c8cd7882e380e8"} ><Text key={"76c5dd395c274ab68427be19b70c59cb"} >[1] Blondel, Vincent D., et al. "Fast unfolding of communities in large networks." Journal of statistical mechanics: theory and experiment 2008.10 (2008): P10008.</Text></Block><Block type="paragraph"   key={"0e45631a13fe4e3e8dc0b634956e59d7"} ><Text key={"7df2609e87934f5eadb2416ab46d7e42"} >[2] Staudt, Christian L., and Henning Meyerhenke. "Engineering parallel algorithms for community detection in massive networks." IEEE Transactions on Parallel and Distributed Systems 27.1 (2016): 171-184.</Text></Block><Block type="paragraph"   key={"d156ebc5676e4c93937f8530704afc9a"} ><Text key={"a1652a975ec44275bb722c6b32d879e5"} >[3] Lu, Hao, Mahantesh Halappanavar, and Ananth Kalyanaraman. "Parallel heuristics for scalable community detection." Parallel Computing 47 (2015): 19-37.</Text></Block><Block type="heading-3"   key={"0e8f60003a7d4527bc990e89d1d71765"} ><Text key={"37dae0f26bb54b629bf1e9c1ff58b3e4"} >Specifications</Text></Block><Block type="code"  data={{"syntax":"text"}}  key={"f252cdb9cbde4e3382221960b100ea3c"} ><Block type="code-line"   key={"4b4f66e8bec64d87a8686df5db1c2f0b"} ><Text key={"29ca36feaa614feab846529757968699"} >louvain_parallel(INT iter1 = 10, INT iter2 = 10, INT iter3 = 10, INT split = 10, INT outputLevel = 0)</Text></Block><Block type="code-line"   key={"53b377c0b85d48e1b958213a5bf7554f"} ><Text key={"2699edff2f754e2c92e3427ae1a4098a"} >louvain_parallel_file(INT iter1 = 10, INT iter2 = 10, INT iter3 = 10, INT split = 10, INT outputLevel = 0, FILE fComm, FILE fDist)</Text></Block><Block type="code-line"   key={"1388af2122194d2b8ac8ebe360201c65"} ><Text key={"57445a5d3ac447e095f63b3d0ed32e95"} >louvain_parallel_attr(INT iter1 = 10, INT iter2 = 10, INT iter3 = 10, INT split = 10, INT outputLevel = 0)</Text></Block></Block><Block type="table"  data={{"aligns":["left","left"]}}  key={"aece6c2c1b214e7fbda4d8ff8dcd6e74"} ><Block type="table-row"   key={"589435a8b32648a29b0bad6c0c65cbf2"} ><Block type="table-cell"   key={"a2565a5ccedf4294aee495ee28fb3304"} ><Block type="paragraph"   key={"e111ecb33cdc47dd8bbd8f52a5ba2ebc"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"dbc1d1961f054150940a5bb2f8993b75"} >Characteristic</Text></Block></Block><Block type="table-cell"   key={"bf3da24292844c0da75adbe3ad7bb6c7"} ><Block type="paragraph"   key={"60ecb2dd5f794d379b8ebf2b63b6c0b6"} ><Text key={"ecc142f0ab1b4a04b77c7072386f8027"} >Value</Text></Block></Block></Block><Block type="table-row"   key={"24462272d588427998f5726df6300b29"} ><Block type="table-cell"   key={"0bd1c991939145c3b0a14b17fd7b4f0d"} ><Block type="paragraph"   key={"249af847d81d45c39ed8fb9cdc8f94dc"} ><Text key={"2623d51c373a427baaac3210a6297ad6"} >Result</Text></Block></Block><Block type="table-cell"   key={"cd819f48a2294b308d9a46c9d14ad700"} ><Block type="paragraph"   key={"a83a533c214d4cffa363da2ff2b455c0"} ><Text key={"3dba2ba1fda247cfaf76f5ebafd0dd60"} >Assigns a component id (INT) to each vertex, such that members of the same component have the same id value. The result is available in three forms:</Text></Block><Block type="list-unordered"   key={"c4ae27dd58f5467f97fa7ea54cb68448"} ><Block type="list-item"   key={"202b10dd8fea43f1a08e07f6dcde5188"} ><Block type="paragraph"   key={"1c43219a57b14ea9b44becc0a8766769"} ><Text key={"a58cb32effdc469ca40ba1805606c9f7"} >streamed out in JSON format</Text></Block></Block><Block type="list-item"   key={"e528e7f380cc4745aed89136d5d9a535"} ><Block type="paragraph"   key={"67617304e6d14459b79e02dc7e84b0d7"} ><Text key={"24549418c4574f63b091762453c38976"} >written to a file in tabular format, or</Text></Block></Block><Block type="list-item"   key={"621874eb27e341e4a9af6d87b01375b9"} ><Block type="paragraph"   key={"0b76a4a55d1f4bebb908e85ddad81b20"} ><Text key={"ba2ba3936c84414780a959118a10ecdf"} >stored as a vertex attribute value.</Text></Block></Block></Block></Block></Block><Block type="table-row"   key={"78748f01ed8c46fabf74e78c7b15768c"} ><Block type="table-cell"   key={"ce060fb22ce040d1878231fdb275975a"} ><Block type="paragraph"   key={"8139ed720871469c9c1cd03f7af17c85"} ><Text key={"aaef3a973b25484a9e72118636ab4773"} >Input Parameters</Text></Block></Block><Block type="table-cell"   key={"992b5f65e5234afcb1d7b821f8fdc877"} ><Block type="list-unordered"   key={"6ba903e86ae441c7b8ad211a19934a01"} ><Block type="list-item"   key={"2a99203126f4418a8f024938af31ce8f"} ><Block type="paragraph"   key={"42674cc20f134f1fb5e54903dbb6f108"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"f4a68e9d3cf94df68421d104407b148f"} >iter1</Text><Text key={"f4a68e9d3cf94df68421d104407b148f"} >: the max number of iterations for the first phase. Default value is 10</Text></Block></Block><Block type="list-item"   key={"ab2d523e15b943e3b9f5e8255e3641c6"} ><Block type="paragraph"   key={"ec527ecff8c14213ae57b55ba2736e53"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"4751b0e4719b46e3b76fbccb17823931"} >iter2</Text><Text key={"4751b0e4719b46e3b76fbccb17823931"} >: the max number of iterations for the second phase. Default value is 10</Text></Block></Block><Block type="list-item"   key={"eaee0dad5c7145d7b9eecb5b939097f3"} ><Block type="paragraph"   key={"b03283fc51014db7a5fc4d4138efd35f"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"d2a19ce709cc48898ef9178c932d03f9"} >iter3</Text><Text key={"d2a19ce709cc48898ef9178c932d03f9"} >: the max number of iterations for the refinement phase. Default value is 10</Text></Block></Block><Block type="list-item"   key={"b70df6bc6cb04211be8ed6da61db284b"} ><Block type="paragraph"   key={"584e44a39f084e279009f49fa8557752"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"3f6602217b9f4b6783c761a82d44b622"} >split</Text><Text key={"3f6602217b9f4b6783c761a82d44b622"} >: the number of splits in phase 1. Increase the number to save memory, at the expense of having longer running time. Default value is 10.</Text></Block></Block><Block type="list-item"   key={"3da761affaae4d3b81281853ff045e13"} ><Block type="paragraph"   key={"66e1bf3c51d9419797044e900a4c928b"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"a9397129bcdf44499f066826b3171a72"} >outputLevel</Text><Text key={"a9397129bcdf44499f066826b3171a72"} >: different detail level of community distribution shown in the result. Choice "0" only lists number of communities grouped by community size, while choice "1" also lists the members</Text></Block></Block><Block type="list-item"   key={"def9d9e9b32d44e2a07143f421f30f57"} ><Block type="paragraph"   key={"6d95158fe8784a1faf0f2198dac54490"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"e746dbc799244fa2a667a296ffe4e081"} >fComm</Text><Text key={"e746dbc799244fa2a667a296ffe4e081"} >(for file output only): the path to the output file for community labels</Text></Block></Block><Block type="list-item"   key={"3b9503909e354caf9bf2339f9185fc20"} ><Block type="paragraph"   key={"e17da13c7f6a470ebadf00e88cd6d64b"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"b8c615d753f246129769b8e6fb36ba30"} >fDist</Text><Text key={"b8c615d753f246129769b8e6fb36ba30"} >(for file output only): the path to the output file for community distribution</Text></Block></Block></Block></Block></Block><Block type="table-row"   key={"8abccb25f1884cbe974d4edb038b9c1e"} ><Block type="table-cell"   key={"44eb48db6b434165bd66f58e4a9c9443"} ><Block type="paragraph"   key={"b9160ee207c6408db3e8658b7324d7f3"} ><Text key={"6d2129f43d6e42079ff2c1707a42b5ca"} >Result Size</Text></Block></Block><Block type="table-cell"   key={"f07e416e7dd94d52887e04c511c5c57e"} ><Block type="paragraph"   key={"09823ba51d6e428bb58b093465d2577c"} ><Text key={"6950ac087713458382817cb5d7ea3fb5"} >V = number of vertices</Text></Block></Block></Block><Block type="table-row"   key={"11b93f777de246e19aecf78be4d253a3"} ><Block type="table-cell"   key={"5a0d8d76bab248deb5c0a865c4eb36cb"} ><Block type="paragraph"   key={"4e483b5e9126460c8f07f04b120fa13d"} ><Text key={"cd86ac0437c44145acb68001e99b78d3"} >Computational Complexity</Text></Block></Block><Block type="table-cell"   key={"1929ebdd3e224156a3ba943c035c29ac"} ><Block type="paragraph"   key={"16328877701b40ec8a023b064a98acad"} ><Text key={"c982768afad6497d83a5cdca851a909f"} >O(V^2*L), V = number of vertices, L = (iter1 * iter2 + iter3) = total number of iterations</Text></Block></Block></Block><Block type="table-row"   key={"6d3606acd43a4d68bac5440ff457df41"} ><Block type="table-cell"   key={"4caa87fe401f4a79b311a3c2b17d2bb0"} ><Block type="paragraph"   key={"c1aeccfa13434356ba329b3be773dece"} ><Text key={"57e3999aad5049a088f8cf20ed298dd1"} >Graph Types</Text></Block></Block><Block type="table-cell"   key={"af2466ca74bd4715b758e1e20c4c1312"} ><Block type="paragraph"   key={"9cb89f085fc2412fa37f731f6019db8a"} ><Text key={"d5a8794203d94c188fdf7cb5629d03ab"} >Undirected, weighted edges</Text></Block><Block type="paragraph"   key={"8bd491038949416f863b9de7243b8b2c"} ><Text key={"f31b4cc8a8284e88a78d4d0a7f4be23a"} >A edge weight attribute is required.</Text></Block></Block></Block></Block><Block type="heading-3"   key={"8c03470981a847f1b71ce4b4c75e9bcc"} ><Text key={"19e9c45f06ca4527bdc72f69b739c40e"} >Example</Text></Block><Block type="paragraph"   key={"94a3fe31789d4ad59eabd04c704a8ac7"} ><Text key={"2d7d437d2aeb480187cfdc4e6fb53b4f"} >If we use louvain_parallel for social10 graph, it will give the same result as the result of as the connected components algorithm. The social26 graph is a connected graph which is quite dense. The connected components algorithm groups all the vertices into the same community, and label propagation does not consider the edge weight. On the contrary, louvain_parallel detects 7 communities in total, and the cluster distribution is shown below (csize is cluster size):</Text></Block><Block type="code"  data={{"syntax":"text"}}  key={"36e2c5b46ec2442699a2231ef4c99cd4"} ><Block type="code-line"   key={"16486066a75b482e8cd6da5558395550"} ><Text key={"b7b29711939e4591b5919438b4146551"} >{`\{`}</Text></Block><Block type="code-line"   key={"c0946c80e2814e95894c71e9ac3c6ac5"} ><Text key={"754fb7646d1149c7948fc1d0d03d7c28"} >    "@@clusterDist": [</Text></Block><Block type="code-line"   key={"19006a5c308b45a8be7d69a7c5f4d866"} ><Text key={"d6944d7ac69849eb98e01a5c17950083"} >{`      \{`}</Text></Block><Block type="code-line"   key={"aa20a5ba46354c6dbc930baa4d8df7ba"} ><Text key={"8ebbea5698a24528933a5bfc7f5baf7b"} >        "csize": 2,</Text></Block><Block type="code-line"   key={"06283aab6bd04108973e9d57614e9709"} ><Text key={"df131870d05c4210b0c9fe800a6d3a5f"} >        "number": 1</Text></Block><Block type="code-line"   key={"9c85ac32a444434a82aae911b2e7697b"} ><Text key={"172d893f33124220b74753c459a68316"} >{`      \},`}</Text></Block><Block type="code-line"   key={"9f3cb07ac4444f40b642ca8bc4d541d0"} ><Text key={"f73fa7e56ee84287814479ea72b2b790"} >{`      \{`}</Text></Block><Block type="code-line"   key={"6f6bee4f24fe42b4a404860469b306ae"} ><Text key={"eea0b8d0b3aa48f9aa99d62a2981a514"} >        "csize": 3,</Text></Block><Block type="code-line"   key={"28b0200b9f7c46b1be87eaa2559303c2"} ><Text key={"c82b7e1b5c9e45c8abb7dc521d48565f"} >        "number": 2</Text></Block><Block type="code-line"   key={"21753c83a6584485a02c91763fac6fbe"} ><Text key={"66a02b714b9f48c99b6f1cd51277a231"} >{`      \},`}</Text></Block><Block type="code-line"   key={"84a01d8af4ba4532b843868d662f7a51"} ><Text key={"ccc58ee2ae144f44b4576baa7243cae9"} >{`      \{`}</Text></Block><Block type="code-line"   key={"c415baaa63a6444d9035a5bcac7af5a2"} ><Text key={"5c9fc4b7fa9c452f96a0be6cfd4f521f"} >        "csize": 4,</Text></Block><Block type="code-line"   key={"8c5317193f4e4c51abce65dadb29299b"} ><Text key={"a8dd553cc2b240d9a607fbbfa5517bd7"} >        "number": 2</Text></Block><Block type="code-line"   key={"d540a0afd42e4109bcd43e1707f2f91e"} ><Text key={"0f0d9f15274741298f85db20daaca3d8"} >{`      \},`}</Text></Block><Block type="code-line"   key={"2169b175264f4042a049d34da1fad84e"} ><Text key={"09bc8cb9aff2424fbfc93a43afcda03d"} >{`      \{`}</Text></Block><Block type="code-line"   key={"f649a65ec6ad47fdaf4f084a49a6a43a"} ><Text key={"ecd31710c0154f70b93806c9e123eb9e"} >        "csize": 5,</Text></Block><Block type="code-line"   key={"c5c869f3d7fe49f380abecea8a6408a0"} ><Text key={"e58ac967cb124d339778b2f0d8a83341"} >        "number": 2</Text></Block><Block type="code-line"   key={"f244efc5ba8847cc88288c42285020fb"} ><Text key={"3747b14cdb2840f198d314453fa06935"} >{`      \}`}</Text></Block><Block type="code-line"   key={"40208001a59040bc91044be23f335979"} ><Text key={"66480a5b8dc044d3907606a27d34428c"} >    ]</Text></Block></Block><Block type="heading-2"   key={"5fd0c9ec8cee4187ad123243635049ce"} ><Text key={"d2ed2c8352fa4fe3ac9751a69fef6bbb"} >Triangle Counting</Text></Block><Block type="heading-3"   key={"b4826f8b26d34f55ac79cd5f946e3e19"} ><Text key={"6e6a1d54058a473f916a4925f215136a"} >Description and Uses</Text></Block><Block type="paragraph"   key={"209a5f6ebbf543138be0917195edeab5"} ><Text key={"ef4957ffffb940b1ac288d8c619ce0ca"} >Why triangles? Think of it in terms of a social network:</Text></Block><Block type="list-unordered"   key={"00f45f32a1314e16be56380d25134169"} ><Block type="list-item"   key={"1676e1597d5c4c64a0ef658a9a6e7710"} ><Block type="paragraph"   key={"0f995799e3404917b1da8cf691554590"} ><Text key={"36559ba1301f4d8f993bbea11cb6357b"} >If A knows B, and A also knows C, then we complete the triangle if B knows C. If this situation is common, it indicates a community with a lot of interaction. </Text></Block></Block><Block type="list-item"   key={"d5f4dd5e5cc04a4398035329368038c2"} ><Block type="paragraph"   key={"04b7fc29132a49769665560b93516773"} ><Text key={"cef53a7046484691bf8d9d1ef824347b"} >The triangle is in fact the smallest multi-edge "complete subgraph," where every vertex connects to every other vertex.</Text></Block></Block></Block><Block type="paragraph"   key={"4bb00bd494c9496481f4954fc5d2e977"} ><Text key={"9a699ffdaf2e4199a3a4358faeca46f2"} >{`Triangle count (or density) is a measure of community and connectedness. In particular, it addresses the question of transitive relationships: If A--\> B and B--\>C, then what is the likelihood of A--\> C? `}</Text></Block><Block type="paragraph"   key={"4affa7becccd4115839a3a18b0eb497e"} ><Text key={"6428ccb9d9ae4ceb885f9fcf401c3276"} >Note that it is computing a single number: How many triangles are in this graph? It is not finding communities within a graph.</Text></Block><Block type="paragraph"   key={"d57fa6b2570542eeafadad739cff8330"} ><Text key={"068c0378f24446bba1083f6cb4780be3"} >{`It is not common to count triangles in directed graphs, though it is certainly possible. If you choose to do so, you need to be very specific about the direction of interest: In a directed graph, If A--\> B and B--\> C, then`}</Text></Block><Block type="list-unordered"   key={"6581356a6c0f40268af40c92386f4722"} ><Block type="list-item"   key={"60f97871a84e44d099a9d7f7646d6b01"} ><Block type="paragraph"   key={"804d4b10097542d7af0adf19dbb7ae87"} ><Text key={"58e90ea134dc484f93dbd0db1412a4c2"} >{`if A--\>C, we have a "shortcut".`}</Text></Block></Block><Block type="list-item"   key={"f4b9a05845af4068a5aa35e7bce19503"} ><Block type="paragraph"   key={"604941fcdd6a4c8da4257ef9d51c362a"} ><Text key={"783e649d192e4641b023dd8a43f9a215"} >{`if C--\>A, then we have a feedback loop.`}</Text></Block></Block></Block><Block type="heading-3"   key={"957b266698534fe9acbdeb6a60e67aec"} ><Text key={"f9af56d49af7416cbd3a48915c53a727"} >Specifications</Text></Block><Block type="paragraph"   key={"41704cd0d2ff4c83973840d2cbeb8e1a"} ><Text key={"564ba39d3d044fa2bbf399dc1744667d"} >We present two different algorithms for counting triangles. The first, tri_count(), is the classic edge-iterator algorithm. For each edge and its two endpoint vertices S and T, count the overlap between S's neighbors and T's neighbors. </Text></Block><Block type="code"  data={{"syntax":"text"}}  key={"4b47391738af44ecb8980cebe11832d0"} ><Block type="code-line"   key={"6a8bfdd4e81b4a6383bfb389d93d2ee5"} ><Text key={"db2211553a2041bb968461688d6f6163"} >tri_count()</Text></Block><Block type="code-line"   key={"bddc01f073024e12b54e3126ff0831ec"} ><Text key={"ece84d77da8f4347b1164e1c0580fad9"} >tri_count_file(FILE filepath)</Text></Block><Block type="code-line"   key={"e019d9777c42460e8c6152263041bbc2"} ><Text key={"7d43d77778f54b28918a2a49734cd982"} >tri_count_attr()</Text></Block></Block><Block type="paragraph"   key={"0a376dc39be046d6aac7c7670027b6f9"} ><Text key={"dc0d111947b342cc97351457d3e734ef"} >One side effect of the simple edge-iterator algorithm is that it ends up considering each of the three sides of a triangle.  The count needs to be divided by 3, meaning we did 3 times more work than a smaller algorithm would have.</Text></Block><Block type="paragraph"   key={"d549c3c17da5486d812f1e05b248bd50"} ><Text key={"96a4baaf78d44a068a9822a791846fd2"} >tri_count_fast() is a smarter algorithm which does two passes over the edges.  In the first pass we mark which of the two endpoint vertices has fewer neighbors. In the second pass, we count the overlap only between marked vertices. The result is that we eliminate 1/3 of the neighborhood matching, the slowest 1/3, but at the cost of some additional memory.</Text></Block><Block type="code"  data={{"syntax":"text"}}  key={"52055e2ec60a4a1697e0964daee3333c"} ><Block type="code-line"   key={"6b21373768664c0984b3ab3650868c73"} ><Text key={"7aa26a012b9b41f794647f36c02f03a9"} >tri_count_fast()</Text></Block><Block type="code-line"   key={"58c800807eca4aa39576afaa03b9848e"} ><Text key={"a9f98d0153c74c47860bccbc9a0ae8d6"} >tri_count_fast_file(FILE filepath)</Text></Block><Block type="code-line"   key={"c292caf02f0041ebb4b12cd60937030b"} ><Text key={"7180888fb028440182b6960f41bbe73d"} >tri_count_fast_attr()</Text></Block></Block><Block type="table"  data={{"aligns":["left","left"]}}  key={"7889192ee7cc48a8a78a7118872c1505"} ><Block type="table-row"   key={"61554580554947d0b165e069c6c20b71"} ><Block type="table-cell"   key={"44ef46e32f444458b578dd746f75c6ca"} ><Block type="paragraph"   key={"15ae08d95d0a4f199173e05efc39fc09"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"7cead3f1d65841a0a40397ec40c4fa41"} >Characteristic</Text></Block></Block><Block type="table-cell"   key={"912a9836c7734589a4685a5a9cd7649d"} ><Block type="paragraph"   key={"e417d54d6ea34fc1a01531530a7f553f"} ><Text key={"f741c9ddee5c419d8dc07fa968e9e826"} >Value</Text></Block></Block></Block><Block type="table-row"   key={"3fd64bc6d2bc4458beb1e298fcafe3cb"} ><Block type="table-cell"   key={"5fae233a090440e6b01f1ab03196306b"} ><Block type="paragraph"   key={"9f662af72e4446a69969bb864456305e"} ><Text key={"7009105c8b27456e989aa7fde79d40a5"} >Result</Text></Block></Block><Block type="table-cell"   key={"ee5a265aa9a24b8eaa499adcf2bca346"} ><Block type="paragraph"   key={"2c82aef9c67d43f0b70eed857bf80cfc"} ><Text key={"d2da7e32a5614bea8abfd78c03ef60b5"} >Returns the number of triangles in the graph.</Text></Block></Block></Block><Block type="table-row"   key={"c8c49a0656b7452e840913c8df62e31b"} ><Block type="table-cell"   key={"fb5b27359a754c33a1bcffdb49b9d0a1"} ><Block type="paragraph"   key={"b6fe81f07d0e47158bb856a4bf02e4d8"} ><Text key={"972ca171f3d44c83b9bd0788c0c56a61"} >Input Parameters</Text></Block></Block><Block type="table-cell"   key={"a6c57663b53846edbdce26f70b92125f"} ><Block type="paragraph"   key={"f29b553ed62d471b8ea3aa002ebe4564"} ><Text key={"731156cbc0104e528d283ba5d3d018ca"} >None</Text></Block></Block></Block><Block type="table-row"   key={"9e883d345ae546ec9a66550cbeef3ce3"} ><Block type="table-cell"   key={"2f55875adc4449a685c23cdd83fce181"} ><Block type="paragraph"   key={"123500855cc24685a405646c5dffc4c9"} ><Text key={"4664adc599cf4ed4907adbdb84ebd287"} >Result Size</Text></Block></Block><Block type="table-cell"   key={"69feb2e4203f4977b03045720b2c3abc"} ><Block type="paragraph"   key={"461aa0a9ed3544cbafaf33df5c74652c"} ><Text key={"9181c9d53bda49bdb6f7aa6ec407cb07"} >1 integer</Text></Block></Block></Block><Block type="table-row"   key={"ead63ed1ed4b42f3bde52ae3fa56d196"} ><Block type="table-cell"   key={"a473bfaf5e4e4968be3074d1861046bd"} ><Block type="paragraph"   key={"062c93192f09472aafe82e03251826e2"} ><Text key={"ba24b31aca71418082a924e1c351ffbf"} >Computational Complexity</Text></Block></Block><Block type="table-cell"   key={"6d860430d0174ab3a0ddbf7f874411f3"} ><Block type="paragraph"   key={"f80662aa62be430aa3177c9b65acabdb"} ><Text key={"e9e5c3552a7a413989739e6b01c1f100"} >O(V * E), V = number of vertices, E = number of edges</Text></Block></Block></Block><Block type="table-row"   key={"9626795f4b2a48f89eff4cca8c288cee"} ><Block type="table-cell"   key={"4f380330984a4c59b7fa5c1fb7f010a9"} ><Block type="paragraph"   key={"6ae146758d574ee9bf990b68b0fa27f6"} ><Text key={"a79cf46f857d4ac886996bb7378b2857"} >Graph Types</Text></Block></Block><Block type="table-cell"   key={"ed8036d791fe440fa43a53241f0dd755"} ><Block type="paragraph"   key={"e5725a409444409f87e29ef40026d8dd"} ><Text key={"d142e79cf81249f8b5c90e01a9e70aa5"} >Undirected edges</Text></Block></Block></Block></Block><Block type="heading-3"   key={"35a514f6134941478dae3dc1bcd02253"} ><Text key={"3814c748c9674ec9b2edb0093702b2bc"} >Example</Text></Block><Block type="paragraph"   key={"e957e2acda594739bbdd9d261f1189a9"} ><Text key={"d4cc0af1145e4f859b4666187a9b6e4d"} >In the social10 graph with Coworker edges, there are clearly 4 triangles.</Text></Block><Block type="image"  data={{"assetID":"-LPdG-T3mRDr5pFtD8fh"}}  key={"b505997c5384441d98dbbfe2dd71b6d2"} ><Text key={"99794e00d1964e3f9d552def8df9246d"} ></Text></Block><Block type="code"  data={{"syntax":"text"}}  key={"24f43e2257384952925956c8abb0f440"} ><Block type="code-line"   key={"511b25eccd3d47f9963fbf99389a260d"} ><Text key={"62deb0ab00e64dc9a8ea9d7686a27945"} >{`\{`}</Text></Block><Block type="code-line"   key={"96629aae43904c609d7024d94d1f5b73"} ><Text key={"8ef1f367bdee45709c8f331df522aad6"} >  "error": false,</Text></Block><Block type="code-line"   key={"586be9043f464a8b84e6a07076b2f36b"} ><Text key={"5f68c6f166924fbe9ee2027a3a730028"} >  "message": "",</Text></Block><Block type="code-line"   key={"d2a4aec406444122b887ba753ae5cb2c"} ><Text key={"012deacd5aa74101878e70223e026b42"} >{`  "version": \{`}</Text></Block><Block type="code-line"   key={"cd580154f72d430586e70a76af7d2f4f"} ><Text key={"f4f82ade2e274251b1e90e0926e42b98"} >    "edition": "developer",</Text></Block><Block type="code-line"   key={"067bffd73ba74ad79e3269e47b725117"} ><Text key={"2657a9c9c0b84d8fb48d5dfb3007f23b"} >    "schema": 0,</Text></Block><Block type="code-line"   key={"66bf09a532c240e1bc2544c3b8db2611"} ><Text key={"d3d2fe281c734eacb91e2fd89f6b3cc1"} >    "api": "v2"</Text></Block><Block type="code-line"   key={"74c5adda736a45faa6b40ab4a9bff380"} ><Text key={"b9e03c09067d4e9488f2449f8a389efd"} >{`  \},`}</Text></Block><Block type="code-line"   key={"28d4afc1c06a47719d043bf077d23e7e"} ><Text key={"22ded94ffbc24e258739b3c311ffcf81"} >  "results": [</Text></Block><Block type="code-line"   key={"b01dcefe429a4783b7bfbd4fd6c452ec"} ><Text key={"ae0b6db60fdf4b6fa25d32abf6416a5c"} >{`    \{"num_triangles": 4\}`}</Text></Block><Block type="code-line"   key={"d7af9242a40341b0a53a1a27117714bf"} ><Text key={"e85ddd8f58374f3083fda93493d3d952"} >  ]</Text></Block><Block type="code-line"   key={"2a60122de6c048359ac5f815b583493e"} ><Text key={"590821eb2ec94e62ae86efdf9e200231"} >{`\}`}</Text></Block></Block><Block type="heading-1"   key={"929ee47fa0a4415c816bf4399b271358"} ><Text key={"b66ae18fee2b40e7ac8249c1640a4482"} >Similarity Algorithms</Text></Block><Block type="paragraph"   key={"6392adb7518843f98aebdc0a2f898f5f"} ><Text key={"b15e8c0d3ef64734965e049564e48d93"} >There are many ways to measure the similarity between two vertices in a graph, but all of them compare either (1)  the features of the vertices themselves,  (2) the relationships of each of the  two vertices, or (3) both. We use a graph called movie to demonstrate our similarity algorithms.</Text></Block><Block type="heading-2"   key={"13fa0a1075004ae89b91b4e1229e9b1a"} ><Text key={"952fcf8c2df545e4a105e1c1a0e5c547"} >Cosine Similarity of Neighborhoods, Single Source</Text></Block><Block type="heading-3"   key={"83b5806ae3a74dc6909136700e7f6d23"} ><Text key={"abd7d7633b1a4b52ac558717b9057a4c"} >Description and Uses</Text></Block><Block type="paragraph"   key={"352141e7d131487584b6075f164dd7b1"} ><Text key={"f0dc32af5dee47459a00e6a1e1eaed2d"} >To compare two vertices by cosine similarity,  first selected properties of each vertex are represented as a vector. For example, a property vector for a Person vertex could have the elements (age, height, weight). Then the cosine function is applied to the two vectors.  </Text></Block><Block type="paragraph"   key={"9aa1005ecd024674928240f6954602a4"} ><Text key={"3067dac37c24416ba5c8fe2cfffba81a"} >The cosine similarity of two vectors A and B is defined as follows:</Text></Block><Block type="math"  data={{"formula":"cos(A,B)=\\frac{A\\cdot B}{||A||\\cdot ||B||} = \\frac{\\sum_iA_i B_i}{\\sqrt{\\sum_iA^2_i}\\sqrt{\\sum_iB^2_i}}"}}  key={"e835ca08c85c4b31832f176f57b85ef3"} ><Text key={"5f614f4c8ac04c37b4514139d52b8df5"} ></Text></Block><Block type="paragraph"   key={"06d956a1b40c49449d31436855ccc1fc"} ><Text key={"ffb0fc938d9246968440b7782aeaf533"} >If A and B are identical, then cos(A, B) = 1. As expected for a cosine function, the value can also be negative or zero. In fact, cosine similarity is closely related to the Pearson correlation coefficient.</Text></Block><Block type="paragraph"   key={"7dc35782d69748289d0cf70e0c654f96"} ><Text key={"f82adff1ed6c4238acd228d78d72de90"} >For this library function, the feature vector is the set of edge weights between the the two vertices and their neighbors. </Text></Block><Block type="paragraph"   key={"f8ad8d9b95a1438e99158eb5050d7fdd"} ><Text key={"bad85c31638a48a196cd0f818ff15790"} >In the movie graph shown in the figure below, there are Person vertices and Movie vertices. Every person may give rating to some of the movies. The rating score is stored on the Likes edge using the weight attribute. For example, in the graph below, Alex give a rating of 10 to the movie "Free Solo".</Text></Block><Block type="image"  data={{"assetID":"-LUH6WBRvh06lkiTX4hg","caption":"movie graph"}}  key={"d500372cc436423595603e3943413cfe"} ><Text key={"a76e5361646f4f2db63571f713a314c7"} ></Text></Block><Block type="heading-3"   key={"57cf31b7d2904dc286c65fc7f6b61bde"} ><Text key={"ee478e168a704ecb978ec4339faa257d"} >Specifications</Text></Block><Block type="code"  data={{"syntax":"text"}}  key={"6edfbc551723413ab0ed220212395ee9"} ><Block type="code-line"   key={"2e58cea735d44486843c5015cb10951e"} ><Text key={"e37223cd8563400790e2e45a1411047e"} >cosine_nbor_ss(VERTEX source, INT topK)</Text></Block><Block type="code-line"   key={"d009c94b22604fe78fe927ea63f29ac9"} ><Text key={"6889c7f9f291466aac96e5e5b6d0d661"} >cosine_nbor_ss_file(VERTEX source, INT topK, FILE filepath)</Text></Block><Block type="code-line"   key={"ce7567df46c84df28cf49f99b32ed4d3"} ><Text key={"59b248e0402049acb0dac49de1bc0dac"} >cosine_nbor_ss_attr(VERTEX source)</Text></Block></Block><Block type="table"  data={{"aligns":["left","left"]}}  key={"6d994212711746eb88c34556b99230ea"} ><Block type="table-row"   key={"028d3d50db2841d683808b81572d1330"} ><Block type="table-cell"   key={"0eca10ea2b9f4fc0aa608e403712f92d"} ><Block type="paragraph"   key={"77fce78e30f349e6a8cfee97fe5a8b99"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"fa65b4f5a83a463ead35d15cdd094951"} >Characteristic</Text></Block></Block><Block type="table-cell"   key={"1a1b813290fd4e14a8732fb9e8c9c1c9"} ><Block type="paragraph"   key={"e0883a85044244609dd7dab2322ad4ce"} ><Text key={"f7a9d81b32e2441aab0ec57d4b21b750"} >Value</Text></Block></Block></Block><Block type="table-row"   key={"3835c9f3d26f4cd19a25de0da978c49a"} ><Block type="table-cell"   key={"95570ae7a644457baaeaede8ae9dc992"} ><Block type="paragraph"   key={"8e82ccee8cf744efae889491ccb44d22"} ><Text key={"7b39916f34544d51b8f0dd9cd1aba696"} >Result</Text></Block></Block><Block type="table-cell"   key={"fc49e217c2054600b6fd4156331fd21b"} ><Block type="paragraph"   key={"1f3b9c8f3daa4c9285d96256ef6e7b3e"} ><Text key={"912a6f5cbb734b7cb27628c02204a515"} >the topK vertices in the graph which have the highest similarity scores, along with their scores. </Text></Block><Block type="paragraph"   key={"e613508eca08475b9694ed3285f0d5cb"} ><Text key={"58d5eab9d1994a69b734642aed539628"} >The result is available in three forms:</Text></Block><Block type="list-unordered"   key={"b73bc294d8d043bd929e1df3ae332369"} ><Block type="list-item"   key={"c9c043b64ee94902af96b09e0bb2eec0"} ><Block type="paragraph"   key={"98b6776d2c0d469a957a91e1fc73450a"} ><Text key={"b6d1f41f899e43d8b0971124ae66a238"} >streamed out in JSON format</Text></Block></Block><Block type="list-item"   key={"44bcdfb244b346e28ddba738cbe2d1ee"} ><Block type="paragraph"   key={"41a669d730844e23a30dc810f6da6c61"} ><Text key={"6ff7cd3baaa649dbadf8bd70a1f1de25"} >written to a file in tabular format, or</Text></Block></Block><Block type="list-item"   key={"b72bad2a0b9b4d44b24a3880f576d17c"} ><Block type="paragraph"   key={"94ff6180041e4b2785ac7652b4bcd922"} ><Text key={"4876fb06262c45a48d855fc6ba497932"} >stored as a vertex attribute value.</Text></Block></Block></Block></Block></Block><Block type="table-row"   key={"2e7bb5ddd8bb4a99aaa13a52d97b0188"} ><Block type="table-cell"   key={"8e7559efba1a4988b6ecf507fd767e1c"} ><Block type="paragraph"   key={"efdff770574848ada942e9f2512ee2ae"} ><Text key={"545bee6429014f31a210f1dd75a32ec8"} >Input Parameters</Text></Block></Block><Block type="table-cell"   key={"5ba8552b9b2149aa98b08d2886775177"} ><Block type="list-unordered"   key={"26b13ad8b0f74f89bc3715ad9cf30f26"} ><Block type="list-item"   key={"e4b3a56d818f4fdfb1de271da1e8a713"} ><Block type="paragraph"   key={"4ec6e372cc11400b85aac03c140d2e29"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"bec3b9a1068e4320abea7e9570575033"} >source</Text><Text key={"bec3b9a1068e4320abea7e9570575033"} >: the source vertex</Text></Block></Block><Block type="list-item"   key={"9afd8109c15d4b9da966795aba5fe57b"} ><Block type="paragraph"   key={"b6fbc77e77eb4baeb0700241892bcb0e"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"712b8b2dfd1a4e3492dae370bf93368c"} >topK</Text><Text key={"712b8b2dfd1a4e3492dae370bf93368c"} >: the number of vertices</Text></Block></Block><Block type="list-item"   key={"bda8ab7dc69149d7927dd7edfc29d27e"} ><Block type="paragraph"   key={"629222b5077747dca756ec001f1591dc"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"bde56e08c68e44b08ab11937b5f47498"} >filepath</Text><Text key={"bde56e08c68e44b08ab11937b5f47498"} > (for file output only): the path to the output file</Text></Block></Block></Block></Block></Block><Block type="table-row"   key={"3ece195dd2fc4330ad1479f5b9575d8b"} ><Block type="table-cell"   key={"526cdefbb41e4b6daa9f4fb39aff3dc9"} ><Block type="paragraph"   key={"8aa1f0baba6549589ae6437097c961f3"} ><Text key={"83b07eb53a8d4fb98814851e45a13b4c"} >Result Size</Text></Block></Block><Block type="table-cell"   key={"14f426ae49914a47aaac65ff0bcd905b"} ><Block type="paragraph"   key={"cb74e69f18c54444baffa946509df752"} ><Text key={"9b03e0e450134615ad414e41ba046447"} >topK</Text></Block></Block></Block><Block type="table-row"   key={"37e40b1a0105458581c522fca15cca3e"} ><Block type="table-cell"   key={"2a9d25c4a23d49ad80f3e16feca25671"} ><Block type="paragraph"   key={"3d0ffefbaa0e496ca1fe4b1296b8fb6c"} ><Text key={"3abf4a2280d543c6806323b3b08cc176"} >Computational Complexity</Text></Block></Block><Block type="table-cell"   key={"1736010e001745638c1477072e0ef479"} ><Block type="paragraph"   key={"a8c1ec3188b24e20a0311976285e6069"} ><Text key={"6cb5c1d6dd4e4bca8b509f0c280d8ad8"} >O(D^2), D = outdegree of vertex v</Text></Block></Block></Block><Block type="table-row"   key={"07356d4a99ba4ea2a7ee14eed5485ca3"} ><Block type="table-cell"   key={"081ff86c819944bab389626e6972ae73"} ><Block type="paragraph"   key={"8786f553ccd144bb902708b76c593620"} ><Text key={"a7f5d55818e248be9cc378acfa148b02"} >Graph Types</Text></Block></Block><Block type="table-cell"   key={"0101749da3d14149940655274adeebd7"} ><Block type="paragraph"   key={"7f25d243d64f416c9037168ce4c52ecb"} ><Text key={"473ea3ccb066493584373e8eca02dcc1"} >Undirected or directed edges, weighted edges</Text></Block></Block></Block></Block><Block type="paragraph"   key={"34321df58bbb44fcb855a497601a138d"} ><Text key={"b4063b010fca4cf980634077d611c611"} >{`The output size is always K (if K \<= N), so the algorithm may arbitrarily chose to output one vertex over another, if there are tied similarity scores.`}</Text></Block><Block type="heading-3"   key={"87ce462f4d3a4af09a6345fc6b349df4"} ><Text key={"f64fbaae2ca74dc6899860686f741fd9"} >Example</Text></Block><Block type="paragraph"   key={"3445e8ddf54340aba3ec8d4415b52467"} ><Text key={"2ac314be54a5476eaa503c616a075705"} >Given one person's name, this algorithm calculates the  cosine similarity between this person and each other person where there is at one movie they have both rated..</Text></Block><Block type="paragraph"   key={"8e1c1f08885d4c82859ba3f09903784a"} ><Text key={"7b21bda52c37484baba728bc21de2b69"} >In the previous example, if the input is Alex, and topK is set to 5, then we calculate the cosine similarity between him and two other persons, Jing and Kevin. The JSON output shows the top k similar vertices and their similarity score in descending order. The output limit is 5 persons, but we have only 2 qualified persons:</Text></Block><Block type="code"  data={{"syntax":"text"}}  key={"967a110bfdde4fb8b1fba1ba8f2dee19"} ><Block type="code-line"   key={"33036f73b59f4fe6b6e79e9d25c8ac40"} ><Text key={"7f86b73f36ab445ebedfd974d021590f"} >[</Text></Block><Block type="code-line"   key={"d206afa67c224d6a93463cc52780dc24"} ><Text key={"e19808077d624334892ebad6978d13f1"} >{`  \{`}</Text></Block><Block type="code-line"   key={"301acbc366554721a4d5d73da261aa88"} ><Text key={"730fb2c0d5ef44ee933f2f60a7943d2e"} >    "@@result_topk": [</Text></Block><Block type="code-line"   key={"310fd7ba529d4a289fd21754bf3745bf"} ><Text key={"d0a61b3fba9e49f3b4179c2cca2cd7d1"} >{`      \{`}</Text></Block><Block type="code-line"   key={"8e91575d09a0470f8de7c52f21e91fe0"} ><Text key={"610354b771ad48b8a19bbdb843a2719e"} >        "vertex1": "Alex",</Text></Block><Block type="code-line"   key={"07c320437f8f49b4a25f51f149430d86"} ><Text key={"2a5c671b72664ba5a50ffbdc2350345e"} >        "vertex2": "Jing",</Text></Block><Block type="code-line"   key={"9b4abdaeb33c457a886742b9a68164bb"} ><Text key={"0c7c9555748148089cf9029544ba385a"} >        "score": 0.42173</Text></Block><Block type="code-line"   key={"8a00bdfd70fd49e2b369e92a1b91ef35"} ><Text key={"6de4c7e28b524f1690a5211105c7e88e"} >{`      \},`}</Text></Block><Block type="code-line"   key={"bab8ee3861984310a7e6a4e2618dc2cc"} ><Text key={"d61d45a8f8f6494eb9e463b5da4f78c5"} >{`      \{`}</Text></Block><Block type="code-line"   key={"cea86dd25e484a52bd5ddfc8cbd6e0f9"} ><Text key={"375f00502471420f867caa76a5021208"} >        "vertex1": "Alex",</Text></Block><Block type="code-line"   key={"c88bfb4650ee4cdab9793c2210063898"} ><Text key={"56cf8d5bbced4d8686a217a048e4cf6e"} >        "vertex2": "Kevin",</Text></Block><Block type="code-line"   key={"ae78122fd9cc41869948ffaef7bc6835"} ><Text key={"a2608fc9c9d54baeb1006c2c7b25ce51"} >        "score": 0.14248</Text></Block><Block type="code-line"   key={"135a08aee9db4c01972d905edf28abec"} ><Text key={"cd02d5bb81b64bd186ff48df69a60b33"} >{`      \}`}</Text></Block><Block type="code-line"   key={"3505ff76e67c4315bb8b8515799febe9"} ><Text key={"5f098f5a93954587b608171c938a3ca5"} >    ]</Text></Block><Block type="code-line"   key={"a3b3ed5f49924c409b6301b750f500b1"} ><Text key={"5a77070360754c92974a111d17002e0b"} >{`  \}`}</Text></Block><Block type="code-line"   key={"9c5efe71195341da9a4ac4802a16f1e7"} ><Text key={"3bb1216ca98247ea9eaccc49a02d86c9"} >]</Text></Block></Block><Block type="paragraph"   key={"971974f46b4841acbddf9a9004671e14"} ><Text key={"7e39cf87af214af49d985ac853f71f82"} >The FILE version output is not necessarily in descending order. It looks like the following:</Text></Block><Block type="code"  data={{"syntax":"text"}}  key={"71c0fcbee6b64070853cf6bcec898f5f"} ><Block type="code-line"   key={"1a5076bfb83d4957bc98b76de8259c14"} ><Text key={"65c60492ed1f44849445ca86f8d0aa32"} >Vertex1,Vertex2,Similarity</Text></Block><Block type="code-line"   key={"d3669eabc05a4e5394390521b9fb5ba8"} ><Text key={"bd45eed3ee8f468ba2b3d267ddf69b3f"} >Alex,Kevin,0.142484</Text></Block><Block type="code-line"   key={"6f032f6ad7844d11a5b7d9fa85361e8c"} ><Text key={"7bdd7a0a2e3a40f2823c1c3cf1d757d8"} >Alex,Jing,0.421731</Text></Block></Block><Block type="paragraph"   key={"895d0bcae01c4d40881127c70d26af76"} ><Text key={"80a2154c7c9843c48e998ab1aa62cd9d"} >The ATTR version inserts an edge into the graph with the similarity score as an edge attribute whenever the score is larger than zero. The result looks like this:</Text></Block><Block type="image"  data={{"assetID":"-LiATtHjZO23nLPRpVJB"}}  key={"98226d8c4a704cefa585749d376e3797"} ><Text key={"3ed329822dd44ef0a00c9948ab207f89"} ></Text></Block><Block type="paragraph"   key={"b04e508006074d7ba7d5221b1a838da2"} ><Text key={"1538c9d978084072818a594ae05cfdf4"} ></Text></Block><Block type="heading-2"   key={"31526b88a9c1424ba09d55f6017f87da"} ><Text key={"fbb551d1cc4a4766b7b95383be62f40f"} >Cosine Similarity of Neighborhoods, All Pairs</Text></Block><Block type="heading-3"   key={"a53d4f2e74454320bf9ae9a28bf4254b"} ><Text key={"d3b5d427c5b641a1a0d7a7f4c393e9e1"} >Description and Uses</Text></Block><Block type="paragraph"   key={"b9e8ea41b4344006a67f038a31d76a68"} ><Text key={"faa44e46267e45ceba9175cc5e5e2a13"} >This algorithm computes the same similarity scores as the cosine similarity of neighborhoods, single source algorithm (cosine_nbor_ss), except that it considers ALL pairs of vertices in the graph (for the vertex and edge types selected by the user). Naturally, this algorithm will take longer to run. For very large and very dense graphs, this may not be a practical choice.</Text></Block><Block type="heading-3"   key={"fc3a4495c1484c079ba72311d77f05d2"} ><Text key={"0a7b1f00ae2d43b6afe211ec8f07610e"} >Specifications</Text></Block><Block type="code"  data={{"syntax":"text"}}  key={"548294e7daa64e79ac7bb9014df16300"} ><Block type="code-line"   key={"e1b870c98d114e9397356728438c2eb7"} ><Text key={"eb39bc1311984c7bb10038e8d2180932"} >cosine_nbor_ap(INT topK)</Text></Block><Block type="code-line"   key={"5375f19a2c5d42778176a1be321272b4"} ><Text key={"6417d4e430af4ccf962666fbfb44da06"} >cosine_nbor_ap_file(INT topK, FILE filepath)</Text></Block><Block type="code-line"   key={"433f0aecbf8e4a4881419c8c73967477"} ><Text key={"a484989b87ca4b5dba95656d8ad6a266"} >cosine_nbor_ap_attr(INT topK)</Text></Block></Block><Block type="table"  data={{"aligns":["left","left"]}}  key={"ea54e09b1404413da3a8096bfa4ef6b1"} ><Block type="table-row"   key={"e513f3ecd6b447dcaf06122d75565eb8"} ><Block type="table-cell"   key={"ecd08de21d1c4a24a37c00b1ead91f1c"} ><Block type="paragraph"   key={"5227ba3a6d1245afa23327071659b5fa"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"9e1c4128853f4fd7bcab6e2b76761716"} >Characteristic</Text></Block></Block><Block type="table-cell"   key={"5ad1042aee2f438c8163817c4fea67fc"} ><Block type="paragraph"   key={"dea4601cb37a411dad6e4e77783532c6"} ><Text key={"7e726afbcdb241279038fb57f0a1c039"} >Value</Text></Block></Block></Block><Block type="table-row"   key={"8ee67b8a01a4486baff9e7a6e941f94b"} ><Block type="table-cell"   key={"bc142d187bd243c187cb25e9f8279a0e"} ><Block type="paragraph"   key={"806a7e8c55384d48b71fdf6d4b05727b"} ><Text key={"bde4d2ae0f2c476b90b2c8fcd1d1d426"} >Result</Text></Block></Block><Block type="table-cell"   key={"a03f47f6ffe04f20ab2e42516928834e"} ><Block type="paragraph"   key={"bbb934069ce943dc920111b90d9b71ae"} ><Text key={"1dbebe43df774c56947c62ece43b2b4d"} >the topK vertex pairs in the graph which have the highest similarity scores, along with their scores. </Text></Block><Block type="paragraph"   key={"8590fa46977341cc916b27ed1c8184ad"} ><Text key={"b35b87199be74372961e5f3976bea4f7"} >The result is available in three forms:</Text></Block><Block type="list-unordered"   key={"d14addc51fec46e79d26a7bb5d92c409"} ><Block type="list-item"   key={"b66c60b69ce14d2a90cdb97cb03cfaf5"} ><Block type="paragraph"   key={"bdfcbf65cea04b118f82634f9e15b08b"} ><Text key={"b236fcde1feb47ddb7185db87dc2b90e"} >streamed out in JSON format</Text></Block></Block><Block type="list-item"   key={"8a864f6aa5864656a4d9bf29f08185aa"} ><Block type="paragraph"   key={"a1720eccb482495f87156081c532f6ba"} ><Text key={"f2774be0c75740359ade7505e8213eeb"} >written to a file in tabular format, or</Text></Block></Block><Block type="list-item"   key={"3dbe9e8fa84a4506848663bdffb6f861"} ><Block type="paragraph"   key={"3d35df2257a541e886886bae4e37d0af"} ><Text key={"5f83d8f7dda946caaf257f76783369df"} >stored as a vertex attribute value.</Text></Block></Block></Block></Block></Block><Block type="table-row"   key={"ade0ba194b774e2998752434fad811de"} ><Block type="table-cell"   key={"e7b20ed4fcad4789811a5d493ec702ee"} ><Block type="paragraph"   key={"c30f2f16625b4ae58160f7d8fc89ff12"} ><Text key={"c83cb61e9e4f4eefb016f74b91f46257"} >Input Parameters</Text></Block></Block><Block type="table-cell"   key={"e39867c871ae45ac935db7752a5366d4"} ><Block type="list-unordered"   key={"62c477714c134aadbd73f93b6dadc23c"} ><Block type="list-item"   key={"abcb03c207a643c7a980cc11f2e53306"} ><Block type="paragraph"   key={"348e56a7e0cd4d9092d88f2fc0196635"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"4661886090354140b6b61e9303469282"} >topK</Text><Text key={"4661886090354140b6b61e9303469282"} >: the number of vertex pairs</Text></Block></Block><Block type="list-item"   key={"f71e62c56a06446ca3200a48aecc7abc"} ><Block type="paragraph"   key={"bca4af70ded0473ca85665549c517070"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"a613acb14b144acaad81f1395f8b6585"} >filepath</Text><Text key={"a613acb14b144acaad81f1395f8b6585"} > (for file output only): the path to the output file</Text></Block></Block></Block></Block></Block><Block type="table-row"   key={"7f123c2b19ff46d194b6cab82b2849e7"} ><Block type="table-cell"   key={"761854d771144509a9f91fdb831ea59d"} ><Block type="paragraph"   key={"08854488f4634667bd91d2d96597c25a"} ><Text key={"18bf5aae0ebf4647a771bc9516ae65ba"} >Result Size</Text></Block></Block><Block type="table-cell"   key={"9056d932cbdc410f86c8f390ea2c9cb2"} ><Block type="paragraph"   key={"f7de5be80bc54162a6e21d61fb498560"} ><Text key={"828b6ebcf7054c60a279a9313210efe0"} >topK</Text></Block></Block></Block><Block type="table-row"   key={"c358553581d4446e93e3c938d63f380e"} ><Block type="table-cell"   key={"300a69ac48dc473a83072d17f1532b8d"} ><Block type="paragraph"   key={"3a7e9296e09e49be9f23a394ffeee1a6"} ><Text key={"85fa5a44c5184fccbd6645fe227d725f"} >Computational Complexity</Text></Block></Block><Block type="table-cell"   key={"eb021378aa964db58deb03c1e59e2836"} ><Block type="paragraph"   key={"5e3fcb882adf4e93a96fa4dca8213c80"} ><Text key={"9a52db4a7a1841ada4804584423f5e63"} >O(E^2 / V), V = number of vertices, E = number of edges</Text></Block></Block></Block><Block type="table-row"   key={"54956dd6f4304f1fb705987ef5d6606f"} ><Block type="table-cell"   key={"fb52bc4b05c442ddb8403c021b09070b"} ><Block type="paragraph"   key={"779fcf87d9fc49b2ae68f4b65c0951ac"} ><Text key={"c2e93108e99047748ea97a5b59b14d53"} >Graph Types</Text></Block></Block><Block type="table-cell"   key={"823f42ba92c3445faa5e4b8fed3e4ba6"} ><Block type="paragraph"   key={"0a1492d05bed475c898b4f7bbd361a7c"} ><Text key={"e5dbcde0281f4c90b21b5b33b6e459fd"} >Undirected or directed edges, weighted edges</Text></Block></Block></Block></Block><Block type="heading-3"   key={"4eec9007e9b04ed5b2b91fc85ebc36d5"} ><Text key={"4c3b203aaf484fe0afbd27c09a88392d"} >Example</Text></Block><Block type="paragraph"   key={"da806e44a9ed452983c43b89092375ac"} ><Text key={"cfd92dd2e30d482ebffa6e9e2f0ea067"} >Using the movie graph, calculate the cosine similarity between all pairs and show the top 5 pairs: cosine_nbor_ap(5). This is the JSON result:</Text></Block><Block type="code"  data={{"syntax":"text"}}  key={"ceff72ed95284fbdb12660ac9cc2b4ba"} ><Block type="code-line"   key={"04b5e91c424949539b4e04746e1462ba"} ><Text key={"c3f93ddb42624e3f8b2b961dfec926c7"} >[</Text></Block><Block type="code-line"   key={"dd402967addb4264996425c5e6e4d630"} ><Text key={"704f834f73ac4433a60235a2e3423375"} >{`  \{`}</Text></Block><Block type="code-line"   key={"4f7b7184ccfe48ffacbaa75a3182821c"} ><Text key={"46da1ab276b24f3f9ed2e7bf97c2f81f"} >    "@@total_result": [</Text></Block><Block type="code-line"   key={"acaeb0b669dc4d61a9e85f5a120c740b"} ><Text key={"4f603404a31b40abb3acdaf02e8d3881"} >{`      \{`}</Text></Block><Block type="code-line"   key={"f9eb35d7dd0f4e4aa50214332e63c500"} ><Text key={"1855f28dd34049f9a2cd6cc989426f69"} >        "vertex1": "Kat",</Text></Block><Block type="code-line"   key={"f6f2ffdb0b26488fac6474f96400fc09"} ><Text key={"5372faa396d54e40839ef8d529e6e5d3"} >        "vertex2": "Neil",</Text></Block><Block type="code-line"   key={"7897ef2d64454b2dadd10e42cf5deb28"} ><Text key={"fa3388dee6584d2694d6bd0442d15bc5"} >        "score": 0.67509</Text></Block><Block type="code-line"   key={"bc75d94a512449d99a2f13931aed8d8c"} ><Text key={"54fef7005e3f4106bb99fa88d0b908b4"} >{`      \},`}</Text></Block><Block type="code-line"   key={"9d0dbcce4cfa4363a9d8b89948fb1b37"} ><Text key={"4c63e2c8c29c4d20b9db1904981d4ef7"} >{`      \{`}</Text></Block><Block type="code-line"   key={"fc00a7e886b04f29a4a78f07a5c9cf13"} ><Text key={"be67a4c74c0647c2a7b5382c05124860"} >        "vertex1": "Jing",</Text></Block><Block type="code-line"   key={"ba78002f80dd45fca027979bca438695"} ><Text key={"485110f607144afaaafe7b6f56ce7661"} >        "vertex2": "Neil",</Text></Block><Block type="code-line"   key={"ee134549e3b34117bdeead65588078fa"} ><Text key={"4bc771d81bc446a185074d98f7cd97cb"} >        "score": 0.46377</Text></Block><Block type="code-line"   key={"773a228689bd4a5db4cf49a0857453ad"} ><Text key={"1541a82cb1d04a549af0febe05e160d3"} >{`      \},`}</Text></Block><Block type="code-line"   key={"ed45d85fa6b746e1b1c413f628b33538"} ><Text key={"9238768ae28f491384d4167967f2e1f5"} >{`      \{`}</Text></Block><Block type="code-line"   key={"9760ef93381d4bbfaf33fb262e860623"} ><Text key={"7836af644fb94ecab0f2aa733f6f8eb8"} >        "vertex1": "Kevin",</Text></Block><Block type="code-line"   key={"25f6ab0e57af4e528845b5b8bfb21081"} ><Text key={"6d29507c8b5f45e6890ec1111cb97433"} >        "vertex2": "Neil",</Text></Block><Block type="code-line"   key={"85597569af6847e3ae724ee0a34e41ae"} ><Text key={"aa335f2f9222464bb27972c990fd7e2c"} >        "score": 0.42436</Text></Block><Block type="code-line"   key={"435b5184f5ff438fb494d16c3df7a920"} ><Text key={"7ddab34716d4404f9d13e363c7624bf9"} >{`      \},`}</Text></Block><Block type="code-line"   key={"51d7649657cd415290da5651b29d9297"} ><Text key={"f3ccbdddd3964546a91d98929ff0b8d4"} >{`      \{`}</Text></Block><Block type="code-line"   key={"f8c7a7db390143ba8574db8abd41be1e"} ><Text key={"970798a0540d45c7afc61494ec77a974"} >        "vertex1": "Jing",</Text></Block><Block type="code-line"   key={"8d2a417e92bc4ac4b85be565d7066513"} ><Text key={"0a7195bdb6d44743aa80926c4bd6ee57"} >        "vertex2": "Alex",</Text></Block><Block type="code-line"   key={"848c2136a93b431a832a50cb67f8a266"} ><Text key={"4294f99d269e492999cb1da11e992cce"} >        "score": 0.42173</Text></Block><Block type="code-line"   key={"0ab97889f5df428981e81cfff78e57e6"} ><Text key={"c77886c1bec04e668dfe88b03d19884a"} >{`      \},`}</Text></Block><Block type="code-line"   key={"51baefbc02ae4fcdb1c5879a79fa3629"} ><Text key={"7e009e8c10bf47b880559111bf8e8884"} >{`      \{`}</Text></Block><Block type="code-line"   key={"7b243a88872049f7b377497b92c36418"} ><Text key={"c8c3f5b9fe8d4e6e9c67311b0e32c5e3"} >        "vertex1": "Kat",</Text></Block><Block type="code-line"   key={"6766e55c52bd4a7c88b8aa9988390508"} ><Text key={"abd1d1c8a71b40d98d0a57456d4cdcb2"} >        "vertex2": "Kevin",</Text></Block><Block type="code-line"   key={"9dd851d7a81b4ad898e5889620952b5c"} ><Text key={"c100a925cda14533910892f77495a0cf"} >        "score": 0.3526</Text></Block><Block type="code-line"   key={"ce196d6f1a5647e39a6b110b3b6eb5e9"} ><Text key={"c60855873f564af9a99320bd0c4958b6"} >{`      \}`}</Text></Block><Block type="code-line"   key={"243b0e7388704d8eac05c714e0808694"} ><Text key={"9edfbe21ca544be28cc2513e48d65a9b"} >    ]</Text></Block><Block type="code-line"   key={"3761a85ed8ce45b290e97477305da668"} ><Text key={"a674d8b68e21431099835e225bdbd58d"} >{`  \}`}</Text></Block><Block type="code-line"   key={"aac8edaf45464ff1844ca12fb517a6ec"} ><Text key={"75e1ad4853a249d3aba097b0be6ce7f1"} >]</Text></Block></Block><Block type="paragraph"   key={"58173cf5292d4b389a5bafeb1e7bdb22"} ><Text key={"9dac36317975419dbb30ab1009e510fc"} >The FILE output is similar to the output of cosine_nbor_file.</Text></Block><Block type="paragraph"   key={"8c3c7ad841484443b6787ac4b9590101"} ><Text key={"194f79156ffa4a66bf426d9912cc96a2"} >The ATTR version will create k edges:</Text></Block><Block type="image"  data={{"assetID":"-LUH74VHnI76CtUWitgS"}}  key={"468729775f9d4069b426152a75cede83"} ><Text key={"4252f8c8030844ff805a85bac4fc4da1"} ></Text></Block><Block type="heading-2"   key={"12db094d290943ea84de69380b7df3d7"} ><Text key={"f42d8fc07aeb41c7bd7af3bda96ad43e"} ></Text></Block><Block type="heading-2"   key={"d161ec0ba3f5493493e10e865bdcdcf0"} ><Text key={"e0a0ec82430a4229b910d38da759ffde"} >Jaccard Similarity of Neighborhoods, Single Source</Text></Block><Block type="heading-3"   key={"1dff2a469dd240839180d10979ebb79d"} ><Text key={"b60722e7f2a643c789e062da3206c7db"} >Description and Uses</Text></Block><Block type="paragraph"   key={"43b9a704732b4e5db9170c5517e0a45e"} ><Text key={"0844246af69b4494ba9cae65e98547d9"} >The Jaccard index measures the relative overlap between two sets. To compare two vertices by Jaccard similarity, first select a set of values for each vertex. For example, a set of values for a Person could be the cities the Person has lived in. Then the Jaccard index is computed for the two vectors.</Text></Block><Block type="paragraph"   key={"4f420615b1514c1098e557b5fb395399"} ><Text key={"1c770f1dda95468c88aaf4a5e0f8b726"} >The Jaccard index of two sets A and B is defined as follows:</Text></Block><Block type="math"  data={{"formula":"Jaccard(A,B)=\\frac{|A \\cap B|}{|A \\cup B|}"}}  key={"afb1e3ae3c44483183e4d16724b680ea"} ><Text key={"ba2e30c3ab54417d9b28938255e20bf8"} ></Text></Block><Block type="paragraph"   key={"153cd1c9cd4048d2a0ee061cc1643d33"} ><Text key={"b433fd4e55514769821262403f6d8ef2"} >The value ranges from 0 to 1. If A and B are identical, then Jaccard(A, B) = 1. If both A and B are empty, we define the value to be 0.</Text></Block><Block type="heading-3"   key={"98acc31c6b294073aea86b6fa8d19269"} ><Text key={"1aa38f87b5b24600a2622bb04840b012"} >Specifications</Text></Block><Block type="paragraph"   key={"c5b6574164f44e229ae189c8eceb222f"} ><Text key={"5bbe65aa1d50447697bf9747d09133f3"} >In the current</Text></Block><Block type="code"  data={{"syntax":"text"}}  key={"a76f7bad7edf412f8d1cd9287c6dc65a"} ><Block type="code-line"   key={"e37919b091634e4796292b281e8132ee"} ><Text key={"44a130cad4a6418fa1c5c55728515463"} >jaccard_nbor_ss(VERTEX source, INT topK)</Text></Block><Block type="code-line"   key={"53a71d18547d4573bc258fb576ab801a"} ><Text key={"99ae9154a4cd481bbc7151aae1045f29"} >jaccard_nbor_ss_file(VERTEX source, INT topK, FILE filepath)</Text></Block><Block type="code-line"   key={"6bd85632d4e842e0ae8bedca0f1d3bca"} ><Text key={"8197ed6862454ca2a2b5340617ed7e5e"} >jaccard_nbor_ss_attr(VERTEX source, INT topK)</Text></Block></Block><Block type="table"  data={{"aligns":["left","left"]}}  key={"7562e258c6d446abae7c167f3f3dfbd7"} ><Block type="table-row"   key={"e5e7a36cb8a24422af63efb43fd1b608"} ><Block type="table-cell"   key={"e66e61c216584d7884af2510c205880a"} ><Block type="paragraph"   key={"75cc3783af2f4924a19be2cef51f3d0a"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"debe14f393bc4ab1bc53c0834154778b"} >Characteristic</Text></Block></Block><Block type="table-cell"   key={"4cb34f95484f42f3ae91feef16a5844c"} ><Block type="paragraph"   key={"a97d4886cdb1442493d08840f27165fa"} ><Text key={"6090c82506354d9c9b45f3eeec527d5d"} >Value</Text></Block></Block></Block><Block type="table-row"   key={"5d78df21d9524a869cd1db20d7d221e4"} ><Block type="table-cell"   key={"1306af8cdfef4ddc8c11e0f169875e97"} ><Block type="paragraph"   key={"ccab4679a93e453d950b6e2bf4d33074"} ><Text key={"978fe27d1cd24d2886063deb7b270bf5"} >Result</Text></Block></Block><Block type="table-cell"   key={"15fc105f356e48b4ace601e12b49034b"} ><Block type="paragraph"   key={"36fc267b45474fa7962f3ab62a9ea100"} ><Text key={"d7ba04c83ba444ba8ac96578f8ca92b0"} >the topK vertices in the graph which have the highest similarity scores, along with their scores.</Text></Block><Block type="paragraph"   key={"81a7c91db81f419b9d6764a49b6352d7"} ><Text key={"0b409bde1a0344279f71e7ca3d0e63c3"} >The result is available in three forms:</Text></Block><Block type="list-unordered"   key={"8cac48951f4d4ee1bf0790670458e6fd"} ><Block type="list-item"   key={"5cdfee4ff62a4b06b84f820d4f785e33"} ><Block type="paragraph"   key={"13a89e0892ce476e973d91619ba98197"} ><Text key={"4ee51842282f4550a72eae70f3660b14"} >streamed out in JSON format</Text></Block></Block><Block type="list-item"   key={"d257520aeaa44083a0ab0872f4dc9408"} ><Block type="paragraph"   key={"a5186b70072c42f699b66b821ee82012"} ><Text key={"08a8359c036242b6a5b406e3808a57ba"} >written to a file in tabular format, or</Text></Block></Block><Block type="list-item"   key={"21c3a3e6c1244181a07164a8e58ee354"} ><Block type="paragraph"   key={"46306e4a5bda4ebea73f2c50e01816d3"} ><Text key={"dcdcf3838fb941859b16a7786dad034e"} >stored as a vertex attribute value.</Text></Block></Block></Block></Block></Block><Block type="table-row"   key={"94e0b2eb855c456b9df95aae5f8ef99b"} ><Block type="table-cell"   key={"6b57949526af4155b25bffcffadea6dc"} ><Block type="paragraph"   key={"f964cddd4ef44f2f948deee1e8c4e8d5"} ><Text key={"8bfaf31eeac941acadbc36f79cfab5b5"} >Input Parameters</Text></Block></Block><Block type="table-cell"   key={"78dde190588b48b6b89822a21d73a17c"} ><Block type="list-unordered"   key={"452d3c05e89c43ac946fd209291b8934"} ><Block type="list-item"   key={"087db208f32247e29bb97750c3f365ba"} ><Block type="paragraph"   key={"5bce76f16a49435eae0e97a85385215b"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"92ed53eb5a2e4bb68c40ac23bf5801cd"} >source</Text><Text key={"92ed53eb5a2e4bb68c40ac23bf5801cd"} >: the source vertex</Text></Block></Block><Block type="list-item"   key={"682773b6dfb4466b8f163598414f38cf"} ><Block type="paragraph"   key={"5daa78ccaaab443da076cc4a506927f6"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"fbcb183c7b13476693e46fb93aa46c39"} >topK</Text><Text key={"fbcb183c7b13476693e46fb93aa46c39"} >: the number of vertices</Text></Block></Block><Block type="list-item"   key={"e8a9f6693ba84e2196ea1b906234aafe"} ><Block type="paragraph"   key={"345f5db4581149449c57728d869d9da3"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"3a8f727224af429ea7f11bbe53898bdc"} >filepath</Text><Text key={"3a8f727224af429ea7f11bbe53898bdc"} > (for file output only): the path to the output file</Text></Block></Block></Block></Block></Block><Block type="table-row"   key={"8e2130ff9ecf4fb7af0d5df56e97e154"} ><Block type="table-cell"   key={"0f7fbbc5812743cc878863f0d26f7a46"} ><Block type="paragraph"   key={"8fb4f224a9074457b5d11ba3d4b5e88d"} ><Text key={"d508a2377e804773b42f62f9bac8b540"} >Result Size</Text></Block></Block><Block type="table-cell"   key={"3622eebeaf824e74a0f040b7f0197440"} ><Block type="paragraph"   key={"ae9ff5038d344447b8d08ee45a1cfca3"} ><Text key={"54d3cb33eaff4417bd623623328c9f71"} >topK</Text></Block></Block></Block><Block type="table-row"   key={"bb3ed2dc94b14f3cb2939075fe15eb52"} ><Block type="table-cell"   key={"93044bcc701c4c76a0b3d73dee60266d"} ><Block type="paragraph"   key={"74b43248bec8422186184a49e93e13af"} ><Text key={"21ea1ffe63cf44eeae099e463a5f977a"} >Computational Complexity</Text></Block></Block><Block type="table-cell"   key={"18c148e599e740739b602653911f449f"} ><Block type="paragraph"   key={"60c13d5cc2ed4be38eb9f056fbca1cad"} ><Text key={"fcfef9f8a08e4dc69bc0d57813e2065e"} >O(D^2), D = outdegree of vertex v</Text></Block></Block></Block><Block type="table-row"   key={"aa13e5d583824b01ba49914d3f54ea19"} ><Block type="table-cell"   key={"e521a168a174426c8a1a84f7f7598bca"} ><Block type="paragraph"   key={"f24f28338e814da887d1fba5fc8db99d"} ><Text key={"119b3e9e86ad47fc8a1041850c802858"} >Graph Types</Text></Block></Block><Block type="table-cell"   key={"fec0c9d4e329472d93242da8537c41b0"} ><Block type="paragraph"   key={"817802676cd34fc29ddd53b6a2ab79c1"} ><Text key={"57d2f11241114394be1757ba901b6b6e"} >Undirected or directed edges, unweighted edges</Text></Block></Block></Block></Block><Block type="paragraph"   key={"140cbff6f08b47cfa5981f58b40883a0"} ><Text key={"1bd141aa51f240869824226f1bdd8f78"} >The algorithm will not output more than K vertices, so the algorithm may arbitrarily chose to output one vertex over another, if there are tied similarity scores.</Text></Block><Block type="heading-3"   key={"7d35aebd2ff64a58aadf74bec51dadf5"} ><Text key={"a56ca4c2b7c840df92e51c693364d46f"} >Example</Text></Block><Block type="paragraph"   key={"51aff19265fe4cafb38090a2dd18c4d5"} ><Text key={"cad6a563ad5d4bc292f21bf4c887ddc1"} >Using the movie graph, we run jaccard_nbor_ss("Neil", 5):</Text></Block><Block type="code"  data={{"syntax":"text"}}  key={"97a34d3922e74f86895647805a128d51"} ><Block type="code-line"   key={"42067fbeb28545f9ba5248cc895ea12f"} ><Text key={"efaa0da3b34040cf9b67baad4c502410"} >[</Text></Block><Block type="code-line"   key={"ace19ed51bcd4f1d8e01bdd3c73ca783"} ><Text key={"237229d0864d46958500bb4bdb0fc2d6"} >{`  \{`}</Text></Block><Block type="code-line"   key={"9f095f3cc47143ceb808f52876b8f687"} ><Text key={"4c74da52c8904fb6b4ae12e12eb976d8"} >    "@@result_topK": [</Text></Block><Block type="code-line"   key={"447bdbf8a47b45c19d87f2f7a8c36266"} ><Text key={"d2cd380e92644fbfae99111f02ed118c"} >{`      \{`}</Text></Block><Block type="code-line"   key={"fdffc556d7bb4fbd80fe1cbb56246dc0"} ><Text key={"ba3ef722592041fd930ba3b427df6162"} >        "vertex1": "Neil",</Text></Block><Block type="code-line"   key={"fbe81aaf360947a4822612b346f7ece9"} ><Text key={"e794e567e2d74846b8bfd1f39b0b74f1"} >        "vertex2": "Kat",</Text></Block><Block type="code-line"   key={"dc08ddaa2be9493ca90cfaf41de44a93"} ><Text key={"fdea2d93c9694cf8b0bb67d0aa43b2a9"} >        "score": 0.5</Text></Block><Block type="code-line"   key={"34ea97ae225d46d28cb622353c94e5de"} ><Text key={"4765efb218c64faf96f38a75b30064d4"} >{`      \},`}</Text></Block><Block type="code-line"   key={"f92d07f41b4049f48bfecad947bf173d"} ><Text key={"11f2eb13061b4af0880fb749607f6b0b"} >{`      \{`}</Text></Block><Block type="code-line"   key={"db39d0bb06d548e7a30c168610391b9f"} ><Text key={"98017104b9cc4b7d9b048a502e7dde67"} >        "vertex1": "Neil",</Text></Block><Block type="code-line"   key={"19f7b94020c248d999138244ba899e32"} ><Text key={"1beb6bacdc27480dba400924039f9f9f"} >        "vertex2": "Kevin",</Text></Block><Block type="code-line"   key={"d24d6c5eaa9848b08e36a6e7ba002517"} ><Text key={"9a7126dbd77945149337f0a0121fc50c"} >        "score": 0.4</Text></Block><Block type="code-line"   key={"d4dce1009dd64ea99abd2a1be5136f16"} ><Text key={"a646a952595f46c89147419cfced9b48"} >{`      \},`}</Text></Block><Block type="code-line"   key={"b1ebdd86e0f94c818fc1d8b69d6fd352"} ><Text key={"e064b2a174bf4d18929a2a8e13497b00"} >{`      \{`}</Text></Block><Block type="code-line"   key={"c08ee6cf0d5d47c8958119693c466c52"} ><Text key={"dd8cfa81ac3342359f6e681926aeae80"} >        "vertex1": "Neil",</Text></Block><Block type="code-line"   key={"a92479f29a844554b702b0641b1e2d46"} ><Text key={"9ff32051d36c427ca9f457e7320935a8"} >        "vertex2": "Jing",</Text></Block><Block type="code-line"   key={"fc4c91dd8c9843e5bb8168e68e11ba45"} ><Text key={"2ce3a6f6758846db8c8ae09928dac4ad"} >        "score": 0.2</Text></Block><Block type="code-line"   key={"32c7d69806b64acf935f62231ef1f177"} ><Text key={"fc6706293b9245df9757ec1f0ef7b829"} >{`      \}`}</Text></Block><Block type="code-line"   key={"753f5ea370574acc8098f5f21ef10620"} ><Text key={"20299d4363304c749b983e3e6961c525"} >    ]</Text></Block><Block type="code-line"   key={"5734f4e37ac245c5879069386db322bc"} ><Text key={"e935e1b4477a428d98fc028ea1ffaea6"} >{`  \}`}</Text></Block><Block type="code-line"   key={"437ce44ec31d439089a6ae96ebaa8e8f"} ><Text key={"27314b2a05a04602a0500d0cfc238b0f"} >]</Text></Block></Block><Block type="paragraph"   key={"f2320bf513f1498eb9a72d08a847a7bd"} ><Text key={"09d99b7e5128489a895d711d22d3972c"} >If the source vertex (person) doesn't  have any common neighbors (movies) with any other vertex (person), such as Elena in our example, the result will be an empty list:</Text></Block><Block type="code"  data={{"syntax":"text"}}  key={"5e937598e180445d874ed5dadc5edfb6"} ><Block type="code-line"   key={"644e77dac0bf40a9bd9d315ea40caa1e"} ><Text key={"a4b23baa548749daaffd40658206006f"} >[</Text></Block><Block type="code-line"   key={"f92538a18f7e4af08deafc14bd4515e9"} ><Text key={"317e5073beb542ee971e809521b5d5cc"} >{`  \{`}</Text></Block><Block type="code-line"   key={"2290d07d1a84488a80160aa8cb862f65"} ><Text key={"a9e490e37697404b95c5526169c26bb1"} >    "@@result_topK": []</Text></Block><Block type="code-line"   key={"3b6f9582ad934ea2a53719cd226b280e"} ><Text key={"f345d8d675be4a3391fe18a05651068d"} >{`  \}`}</Text></Block><Block type="code-line"   key={"6cf6293f83c64fdda72c629d33a296ed"} ><Text key={"7a599718adc84ee6abed948cc50d0d48"} >]</Text></Block></Block><Block type="heading-2"   key={"c6cd61dd1ece4fa2b1b484fa5e154b24"} ><Text key={"d3a7a1e1bac846969b03262116cdb973"} ></Text></Block><Block type="heading-2"   key={"b24aa4b181a744b6b1e678218cb91deb"} ><Text key={"559c548b611f44798ac0173b1fe3067c"} >Jaccard Similarity of Neighborhoods, All Pairs</Text></Block><Block type="heading-3"   key={"b7e7139c57f64881a44dc1bee9285043"} ><Text key={"a97ce7b53a1043a09584c89625d2dee7"} >Description and Uses</Text></Block><Block type="paragraph"   key={"9a53a5874c2a4c64ad0e4f2380450180"} ><Text key={"25d604c688744c8a83ba017848e5826a"} >This algorithm computes the same similarity scores as the Jaccard similarity of neighborhoods, single source algorithm (jaccard_nbor_ss), except that it considers ALL pairs of vertices in the graph (for the vertex and edge types selected by the user). Naturally, this algorithm will take longer to run. For very large and very dense graphs, this algorithm may not be a practical choice</Text></Block><Block type="heading-3"   key={"55c03c4061ed4bffa87d9ae602fcaa9d"} ><Text key={"cf451e1d4a6943aaa684811e83d5ac2d"} >Specifications</Text></Block><Block type="code"  data={{"syntax":"text"}}  key={"8a185cc1540b481e9ddab20eb13223a0"} ><Block type="code-line"   key={"bc4edb2e1f1942b5a4070fe142bcdd5b"} ><Text key={"8b33336fe56e48f89b4268c0f9c3a9ee"} >jaccard_nbor_ap(INT topK)</Text></Block><Block type="code-line"   key={"08c1ea05e67b45ea8373e081ee6faf1e"} ><Text key={"c7de00301845463789cafb0f51f59d47"} >jaccard_nbor_ap_file(INT topK, FILE filepath)</Text></Block><Block type="code-line"   key={"390d745696f9415fad85ed013048ac8f"} ><Text key={"3d0fcd43e1b44e48850b3abf0b6f5e8d"} >jaccard_nbor_ap_attr(INT topK)</Text></Block></Block><Block type="table"  data={{"aligns":["left","left"]}}  key={"baac6bcabd7442c6b6174a92f87ca803"} ><Block type="table-row"   key={"4da8bdc229f7417babbfd9d13ee824ec"} ><Block type="table-cell"   key={"3088a43453be46cca87140bab0a0abb9"} ><Block type="paragraph"   key={"3d1c5833c3a34ee382663fb68e5c8363"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"b88cbcf3e51e4fcba119c7a27ca4e562"} >Characteristic</Text></Block></Block><Block type="table-cell"   key={"4b3f1d7d7e9a4a47ae5f08c07953e049"} ><Block type="paragraph"   key={"d763764465a74b4aa9283c1a4131e304"} ><Text key={"30fd7e97742741dc883b829ce98f54c5"} >Value</Text></Block></Block></Block><Block type="table-row"   key={"a60835b851c34b5cacdf47c8aea64bf1"} ><Block type="table-cell"   key={"72e845dffa484dcab63d4044cf098ff2"} ><Block type="paragraph"   key={"f01871cf27a840dba7be84c2b6ff1e66"} ><Text key={"e119f695730a4d5fbaa375d88447bcfb"} >Result</Text></Block></Block><Block type="table-cell"   key={"7b9c39cb2c3f4e08b4dcc22fada79e3b"} ><Block type="paragraph"   key={"d969d941bea44911942dc28962905196"} ><Text key={"67598c392bd741799ff7ce5b9279fa2b"} >the topK vertex pairs in the graph which have the highest similarity scores, along with their scores.</Text></Block><Block type="paragraph"   key={"39419c5f915047888a6ab0221b13cf0c"} ><Text key={"228d6cc8c55643e3969d4601a6168a6f"} >The result is available in three forms:</Text></Block><Block type="list-unordered"   key={"7fc8f08eafdf477091e7a22e16afe525"} ><Block type="list-item"   key={"5e548236882f453faf8fbd770ea9be00"} ><Block type="paragraph"   key={"9fb44ba6cb824c2691ed95f98bf5ee85"} ><Text key={"be149c15ead9498e80dc02c28c5f8121"} >streamed out in JSON format</Text></Block></Block><Block type="list-item"   key={"5ba38a9f84e84779996da9bb3a8f6ddf"} ><Block type="paragraph"   key={"498e34732b904bd997c67f1bee03386c"} ><Text key={"0c3bd34101a54e2dac7c5d24289e90c3"} >written to a file in tabular format, or</Text></Block></Block><Block type="list-item"   key={"309ef95a426041e192e165d902ee3115"} ><Block type="paragraph"   key={"6203613db66841e89868fc56057ba39e"} ><Text key={"7624e1fb11774ae5a900b797807b284f"} >stored as a vertex attribute value.</Text></Block></Block></Block></Block></Block><Block type="table-row"   key={"47e52f0766c641568479e4b11d47f761"} ><Block type="table-cell"   key={"76542fbab782421eb6d2bd484d259560"} ><Block type="paragraph"   key={"e1a1426b37234be4afb28fb5c0bc29ea"} ><Text key={"ba4098561b7a40e48047e80480e02604"} >Input Parameters</Text></Block></Block><Block type="table-cell"   key={"a926f3585d0f49259c1e37f8a41e0cd2"} ><Block type="list-unordered"   key={"f2ce6175bc1d46e489c2a0808adb2227"} ><Block type="list-item"   key={"573b7aa5b02f4a8f8515b93d2abc40c5"} ><Block type="paragraph"   key={"17f7d037caad47a0a929627811192a88"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"e22df2b9614f4150a1133f16e616c423"} >topK</Text><Text key={"e22df2b9614f4150a1133f16e616c423"} >: the number of vertices</Text></Block></Block><Block type="list-item"   key={"b823279946c641dfa099458922ad15b4"} ><Block type="paragraph"   key={"a75726a3fbf245b2bf58645e667aee64"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"b7328599158642649b8875c6dfdd9dad"} >filepath</Text><Text key={"b7328599158642649b8875c6dfdd9dad"} > (for file output only): the path to the output file</Text></Block></Block></Block></Block></Block><Block type="table-row"   key={"2355e905aa4648cfb8d9db7f88a92bd5"} ><Block type="table-cell"   key={"6765244c07e84d54bf38f260e8b5cd58"} ><Block type="paragraph"   key={"4e703b190b90409db4567f919b873568"} ><Text key={"45286af07ca941a29362c5c650247a95"} >Result Size</Text></Block></Block><Block type="table-cell"   key={"65289414c6554389a1eed0c1a7d85198"} ><Block type="paragraph"   key={"d616d35e260d4fd8919f4c2a1117e9c8"} ><Text key={"8d9bc903a56d45b4bc1ba26ffce20e0c"} >topK</Text></Block></Block></Block><Block type="table-row"   key={"2f67b4f568094735b9ea4dd5092922eb"} ><Block type="table-cell"   key={"984495429e7e438081261c641a48fcf5"} ><Block type="paragraph"   key={"78fdd121e9634be0b782ade8c1c138ad"} ><Text key={"5d8b261430974cd1a359f392aa921887"} >Computational Complexity</Text></Block></Block><Block type="table-cell"   key={"cf19038e15cd4ca5b25b521d679bb9cd"} ><Block type="paragraph"   key={"b35639f2362745d6b54818ad4069c70c"} ><Text key={"c2c247979b7540ac8c70271f68c08ee9"} >O(E^2 / V), V = number of vertices, E = number of edges</Text></Block></Block></Block><Block type="table-row"   key={"3cd90dd70d814989968b5f9f1b7c7795"} ><Block type="table-cell"   key={"37b81e72622240f6a3e52fda1c855bd2"} ><Block type="paragraph"   key={"483b56f02dca420a90b53fb4cf8ed02b"} ><Text key={"7304feed83834fdb9653a87286023599"} >Graph Types</Text></Block></Block><Block type="table-cell"   key={"6a9d545bcb7340529ff0adb2373d2f67"} ><Block type="paragraph"   key={"339eba42a2804bbe95ffb0ead8cc9c03"} ><Text key={"1ec7f5638a484ea4b6e957173285ed7c"} >Undirected or directed edges, unweighted edges</Text></Block></Block></Block></Block><Block type="paragraph"   key={"3e915011afc747678d6ff23e71f72b74"} ><Text key={"81ba1591cfc34881ae4547960f413f44"} >The algorithm will not output more than K vertex pairs, so the algorithm may arbitrarily chose to output one vertex pair over another, if there are tied similarity scores.</Text></Block><Block type="heading-3"   key={"363888d381e94e48a3c39b8bb91db35c"} ><Text key={"b8b18af6778f4285b2de6e0f0311088f"} >Example</Text></Block><Block type="paragraph"   key={"96a0d57ceae8477cbddc93ad5f121d6d"} ><Text key={"59eecc60cbda452abaccebad05c18f65"} >For the movie graph, calculate the Jaccard similarity between all pairs and show the 5 most similar pairs: jaccard_nbor_ap(5). This is the JSON output :</Text></Block><Block type="code"  data={{"syntax":"text"}}  key={"d0a4db75dde14d30b714088eee7521ce"} ><Block type="code-line"   key={"e14df99e3f95449db0552e4b74b620bf"} ><Text key={"502ead116ee644038a1dc7f591babeb5"} >[</Text></Block><Block type="code-line"   key={"416cecb1b4374b6193cf6e350b6d5443"} ><Text key={"f264647f4c9c45b58a23d4dfc2e3b14a"} >{`  \{`}</Text></Block><Block type="code-line"   key={"22d9d7b248d844b7a9c4e364627f2345"} ><Text key={"1dcb9aa7fb3042708bc8b541a2632fe9"} >    "@@total_result": [</Text></Block><Block type="code-line"   key={"2eed9c5ea8d14f91ba6ca74dba209177"} ><Text key={"0cb49be1922e4fc3bcb97e2ceeb01e97"} >{`      \{`}</Text></Block><Block type="code-line"   key={"621ab6bb4e7740ccbc570564a7683064"} ><Text key={"c142dce81aa14e8da91c1d1dd7ba0580"} >        "vertex1": "Kat",</Text></Block><Block type="code-line"   key={"ff229f8a101f4ede9a81c0cd880229f0"} ><Text key={"d3e975349656401b9fdeb53ec3276b85"} >        "vertex2": "Neil",</Text></Block><Block type="code-line"   key={"5900a699c5164ce8b97fb2cd793960f6"} ><Text key={"4fa4d00f53c84d8f8deb617f27db9b2d"} >        "score": 0.5</Text></Block><Block type="code-line"   key={"deed673476f44fc89ef19df70af9a0b5"} ><Text key={"94b9168a62264fe7b5b56e230c578b45"} >{`      \},`}</Text></Block><Block type="code-line"   key={"ffeeebb898ee47919b7eaf41502a161f"} ><Text key={"cf8f0aad83794a8b8412bffbd6b3e53f"} >{`      \{`}</Text></Block><Block type="code-line"   key={"ba1a4062e3594997b62223ee8698a94c"} ><Text key={"827bb3d1cf274fd9a04d887e29add5dc"} >        "vertex1": "Kevin",</Text></Block><Block type="code-line"   key={"712f38a3f6c8496aa446cbf2786e117b"} ><Text key={"bf87220b81934e82a968e27284c51e38"} >        "vertex2": "Neil",</Text></Block><Block type="code-line"   key={"e805b780645149c4a4586b098ae386ec"} ><Text key={"c35f4457566342aeaf89a19c8ac3d373"} >        "score": 0.4</Text></Block><Block type="code-line"   key={"0f855471f6204f7b943f3b53c245bb25"} ><Text key={"567f4dac64b748c2a5d0bd7b10724896"} >{`      \},`}</Text></Block><Block type="code-line"   key={"30af53f18ffe4abea1185c4e9bc4965a"} ><Text key={"4a06d9b33faa4a90a4af7111c3a9df07"} >{`      \{`}</Text></Block><Block type="code-line"   key={"22bb859253bf4a7bb98440894540941d"} ><Text key={"7fb89882272d4401bd6104760c8f5f75"} >        "vertex1": "Jing",</Text></Block><Block type="code-line"   key={"337b1834795d4568958da3219348182e"} ><Text key={"a0f5bb30b2a946e18faaf86914a1e3b1"} >        "vertex2": "Alex",</Text></Block><Block type="code-line"   key={"e416c9496d17406f91302c42f06cdd3c"} ><Text key={"efa2252a80a9416680ce64aa3f298e78"} >        "score": 0.25</Text></Block><Block type="code-line"   key={"0b8b0e081d4e414b9245ed789fb9bc15"} ><Text key={"87c43577864446cfbc84403e8e8672e1"} >{`      \},`}</Text></Block><Block type="code-line"   key={"64791985fc3b4fca8088112c797aaac1"} ><Text key={"5f52833bc5dd4ddbb243542a97665eb2"} >{`      \{`}</Text></Block><Block type="code-line"   key={"f101d6bd94144ea7b0eb2b78846a412d"} ><Text key={"7f7457b3f08647a696558028d3686837"} >        "vertex1": "Kat",</Text></Block><Block type="code-line"   key={"3fd50230141c42269e3190f83199d6a0"} ><Text key={"bbc1771b4ed9461284d3370a5f6b9f9d"} >        "vertex2": "Kevin",</Text></Block><Block type="code-line"   key={"27c00972bf964d3ab40ed5adb72cc03d"} ><Text key={"4846c18153ed4fd289ce64b36920fb9f"} >        "score": 0.25</Text></Block><Block type="code-line"   key={"0cfd6c435f354e3ebba1078f0c3bcf94"} ><Text key={"20de5c90f27745469b14706082e28d2a"} >{`      \},`}</Text></Block><Block type="code-line"   key={"c7f4705f64b8486da0e39c342af9b8e4"} ><Text key={"6b4b5c14d51749a08259d9a6c1b05182"} >{`      \{`}</Text></Block><Block type="code-line"   key={"f12d2cfa198c40eb967b9dcabee5dda6"} ><Text key={"6a8cae16b50240929eac85052aaa0ad3"} >        "vertex1": "Jing",</Text></Block><Block type="code-line"   key={"161e1b5506844187a5835f403608b449"} ><Text key={"584566e60c984213a61e4a442ec6760f"} >        "vertex2": "Neil",</Text></Block><Block type="code-line"   key={"825c07d9810745409d3ab89f0a36b6d7"} ><Text key={"9cef8d83dfe244e4bcdb5bf902296434"} >        "score": 0.2</Text></Block><Block type="code-line"   key={"8f2d519419124c14988d360b581cb079"} ><Text key={"894e498c9dac44689e7b625f97c17648"} >{`      \}`}</Text></Block><Block type="code-line"   key={"d89c34f5fb9c478587efd5184f3aaca8"} ><Text key={"0de657a2a91d4e9c851d5f40bb520813"} >    ]</Text></Block><Block type="code-line"   key={"2d6bfeda01c04b1e8301125f03469a50"} ><Text key={"83e94ced914c498095be6b90eddc2971"} >{`  \}`}</Text></Block><Block type="code-line"   key={"9afe43d8ddd94968812dd28e8bfb1e7c"} ><Text key={"c5e0f7238ead480da50f54243d38aaa6"} >]</Text></Block></Block><Block type="paragraph"   key={"f61feb3de9c84b82af799e8eef459f9f"} ><Text key={"a28bbd0567ba4e349ca4b06ecd45046f"} ></Text></Block><Block type="heading-1"   key={"204939f81cf640d08c5a3ef500ae5130"} ><Text key={"13e6a134c3674f90b884d7a0c066c42d"} >Classification Algorithms</Text></Block><Block type="paragraph"   key={"a2e21d04e1ce4bcabcc3f1b911529aa4"} ><Text key={"e26dff8ca7ed441bbeaf3604e51d2bb7"} >Classification algorithms, or classifiers, are one of the simplest forms of machine learning. They seek to prediction the classification of a given entity, based on the evidence of previously classified entities.  Classification is closely related to similarity and clustering; all of them deal with finding and using the commonalities among entities.</Text></Block><Block type="heading-2"   key={"127bb355a8f7458997e9d126faa21adf"} ><Text key={"460c766f657144b898c59914b8a4c03a"} >k-Nearest Neighbors, Cosine Neighbor Similarity, single vertex</Text></Block><Block type="heading-3"   key={"20dc20775da24957915d461144392325"} ><Text key={"562d0e3caeef460c8366e4e2a60ad8fa"} >Description and Uses</Text></Block><Block type="paragraph"   key={"11ed198c629d4870ac4f4c40deb3f3ed"} ><Text key={"b490d5fb408c4ec98e201915fa2e0b68"} >The k-Nearest Neighbors (kNN) algorithm is one of the simplest classification algorithms. It assumes that some or all the vertices in the graph have already been classified. The classification is stored as an attribute called the label. The goal is to predict the label of a given vertex, by seeing what are the labels of the nearest vertices.</Text></Block><Block type="paragraph"   key={"395458a29bd74315a6bab5f1582ebf3d"} ><Text key={"722382cb2f924c7dbeaf63d2d5cf3e66"} >Given a source vertex in the dataset and a positive integer k, the algorithm calculates the distance between this vertex and all other vertices, and selects the k vertices which are nearest. The prediction of the label of this node is the majority label among its k-nearest neighbors.</Text></Block><Block type="paragraph"   key={"b5a26f9e7aff4ccfa2f1b5e10a3db3d0"} ><Text key={"f19c33c8a77c46c6995b180265adff26"} >The distance can be physical distance as well as the reciprocal of similarity score, in which case "nearest" means "most similar". In our algorithm, the distance is the reciprocal of cosine neighbor similarity. The similarity calculation used here is the same as the calculation in </Text><Inline type="link"  data={{"href":"https://app.gitbook.com/@tigergraph/s/document/~/edit/drafts/-LhrD9J_UpLvgqsxbKx9/v/2.4/graph-algorithm-library#cosine-similarity-of-neighborhoods-single-source"}}  key={"03e900366b2d4318bc570140dafe4d00"} ><Text key={"8a51bbf5bb2142adb3847436d25bc51c"} >Cosine Similarity of Neighborhoods, Single Source</Text></Inline><Text key={"6d00df2d22e4414cae9dde31bea849f2"} >. Note that in this algorithm, vertices with zero similarity to the source node are not considered in prediction. For example, if there are 5 vertices with non-zero similarity to the source vertex, and 5 vertices with zero similarity, when we pick the top 7 neighbors, only the label of the 5 vertices with non-zero similarity score will be used in prediction.</Text></Block><Block type="heading-3"   key={"81dc0e8419414f23a753ee80301d6a4b"} ><Text key={"75b70463c5e349e2827fe76c89d12bde"} >Specifications</Text></Block><Block type="code"  data={{"syntax":"text"}}  key={"58653ca4fa884bc98f17a9a04eab5a10"} ><Block type="code-line"   key={"13087c97c0fc4847adf1de2d9cf54d64"} ><Text key={"a0db141521974710ad2f1de1446c684c"} >knn_cosine_ss(VERTEX source, INT topK)</Text></Block><Block type="code-line"   key={"7a3c4f436bd94a6e8c76d57e7c5be873"} ><Text key={"2f97ea3428594707afa3ff063cf5fce5"} >knn_cosine_ss_file(VERTEX source, INT topK, FILE f)</Text></Block><Block type="code-line"   key={"6f5c031ca15248a4ac6cf52016bda619"} ><Text key={"9c1894b47a58415faa427638cfcf0274"} >knn_cosine_ss_attr(VERTEX source, INT topK)</Text></Block></Block><Block type="table"  data={{"aligns":["left","left"]}}  key={"1e951459e0f941668dc777409d82930c"} ><Block type="table-row"   key={"18c31713b24a43df886cf79b2a10a78c"} ><Block type="table-cell"   key={"daa0fb1991984c5a86262ea70d652d9b"} ><Block type="paragraph"   key={"00694b2c6fcb4317af307c57be28286f"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"0654d6cbc8504f49a2f64dcdaca32002"} >Characteristic</Text></Block></Block><Block type="table-cell"   key={"df222328d6e54da8ab3cc5580ea5c104"} ><Block type="paragraph"   key={"324af872e9da46108e60b2f871fd19cb"} ><Text key={"62337332bbaf415db3797c9f85cfb04f"} >Value</Text></Block></Block></Block><Block type="table-row"   key={"440560c86f8a4ad2b5dfc562ad8b8288"} ><Block type="table-cell"   key={"2653016deff34b39bd6cb926c20477b5"} ><Block type="paragraph"   key={"85f038a806d3421d805fd0609d647e45"} ><Text key={"4e36e62b86a542cdaa899ab6d5a51603"} >Result</Text></Block></Block><Block type="table-cell"   key={"31956dd07aa748fe9b355c0548fa0f8e"} ><Block type="paragraph"   key={"562961ed335348abb35b8107657738af"} ><Text key={"3317df6d83ac49c09653859f45c9d372"} >The predicted label for the source vertex.</Text></Block><Block type="paragraph"   key={"5800373f02da4f7cbe6773af16e4e6b8"} ><Text key={"b81c12f3421e4c94a8cd7f0b12494e65"} >The result is available in three forms:</Text></Block><Block type="list-unordered"   key={"4cb3b3a0834f49f5b508d3441e1a8518"} ><Block type="list-item"   key={"fab154c8fee0461dbb0239ce1b8ec857"} ><Block type="paragraph"   key={"f0052e1d4e474e85baad597f106e3d0c"} ><Text key={"e1bb67fb0385442582563773029df575"} >streamed out in JSON format</Text></Block></Block><Block type="list-item"   key={"987ab08954a7482a85e549353e735868"} ><Block type="paragraph"   key={"8aa2009311224df9bfb97a57dc43bd2d"} ><Text key={"2bba699f19954533abb00a1c9875cdec"} >written to a file in tabular format, or</Text></Block></Block><Block type="list-item"   key={"19b5f7441e164abc9fa3087a75a561d5"} ><Block type="paragraph"   key={"0b6f0725c19d4d38866b8866a8fffb56"} ><Text key={"d97d7cf97b3841b9baa9e4c9eb0f493d"} >stored as a vertex attribute value.</Text></Block></Block></Block></Block></Block><Block type="table-row"   key={"1dfd7b08bdf74447a92571a962c49c48"} ><Block type="table-cell"   key={"0af5b70663d549779143faf3d695a648"} ><Block type="paragraph"   key={"76663340d8d34444a52aba0171906e1c"} ><Text key={"536f99494ecd48e5be82c586b690cae3"} >Input Parameters</Text></Block></Block><Block type="table-cell"   key={"7ac698f12f56462aa37e38ca47d5e2d3"} ><Block type="list-unordered"   key={"3366be25b3fa4832bc3a35367359d545"} ><Block type="list-item"   key={"2ecbe3db08d64c619f7757a3b312ba6f"} ><Block type="paragraph"   key={"bdf6d1515c5641e3afbfe7591daf0e4f"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"ef577824c7f243e5b945d7787bd725fc"} >source</Text><Text key={"ef577824c7f243e5b945d7787bd725fc"} >: the vertex which you want to predict the label</Text></Block></Block><Block type="list-item"   key={"ad2dad0924734290bb24f5e992cbd3d3"} ><Block type="paragraph"   key={"8b354168f0814a2487443d025c4609c6"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"53fe75fef0fe4629beac6c58a8fa0b2b"} >topK</Text><Text key={"53fe75fef0fe4629beac6c58a8fa0b2b"} >: number of nearest neighbors to consider</Text></Block></Block><Block type="list-item"   key={"035a5a6e9978421396a282813a6e48dd"} ><Block type="paragraph"   key={"d4db6651070f4d499465896284bf33ff"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"4299b97732964132bb38be4a43415bb3"} >filepath</Text><Text key={"4299b97732964132bb38be4a43415bb3"} > (for file output only): the path to the output file</Text></Block></Block></Block></Block></Block><Block type="table-row"   key={"b0083d3a94f649508a77403f45a58d43"} ><Block type="table-cell"   key={"42bf76d721da4cf991822a36f615c139"} ><Block type="paragraph"   key={"b2cbc8bf37664184a030c5d1af4b424b"} ><Text key={"79963766b2104425b91854313a8ae191"} >Result Size</Text></Block></Block><Block type="table-cell"   key={"40b6fea6e4504e2ba069d15d7c3eda91"} ><Block type="paragraph"   key={"112de2a8d83d4895b7d01fef98e8422d"} ><Text key={"8d08013ea3974b9c8240b694a8b4d0e2"} >V = number of vertices</Text></Block></Block></Block><Block type="table-row"   key={"55b43f697b894a88b6bb4fcfd9085382"} ><Block type="table-cell"   key={"ebec827fb9a64ae5a7a4cbace1b9ae21"} ><Block type="paragraph"   key={"792b59c13a304568b4b85227386951f1"} ><Text key={"7c94cdd3733445c689ea494c34c1f30d"} >Computational Complexity</Text></Block></Block><Block type="table-cell"   key={"143401f5c623486a90f5e785f933f2b3"} ><Block type="paragraph"   key={"bfdf51f1877a434c9580c41e81ee21b4"} ><Text key={"935be53566864ed987bea76778a9dbf1"} >O(D^2), D = outdegree of vertex v</Text></Block></Block></Block><Block type="table-row"   key={"4cb39b2506384e4f84a5c86a2a6df7ad"} ><Block type="table-cell"   key={"7e68b55cf02a4fe29b8314afec8d1301"} ><Block type="paragraph"   key={"cc38e9ca58e84be3b485bbafbf16ced3"} ><Text key={"9791f3ccdbfe45f0bb16a89090f0c2a1"} >Graph Types</Text></Block></Block><Block type="table-cell"   key={"3cf364a257fc4b89afe11d67bf4fa8fc"} ><Block type="paragraph"   key={"2ef69208c0884703aca5330f79ea22f6"} ><Text key={"10623226740f4e25884717b6241c3841"} >Undirected or directed edges, weighted edges</Text></Block></Block></Block></Block><Block type="paragraph"   key={"a6efbe2abd6c4cb4aa1f4ef21719fea6"} ><Text key={"745aa8aefb3a429dbb5907244f5c7039"} >The algorithm will not output more than K vertex pairs, so the algorithm may arbitrarily chose to output one vertex pair over another, if there are tied similarity scores.</Text></Block><Block type="heading-3"   key={"3b679865b59b4479913d6e207e4e206e"} ><Text key={"8a9006c71c6f4f11b1f3a4a91ced5736"} >Example</Text></Block><Block type="paragraph"   key={"311eb6f67a774da1adf881f6e0a152a9"} ><Text key={"965b5587bdc54b7db35ff933c7123e18"} >For the movie graph, we add the following labels to the Person vertices. </Text></Block><Block type="image"  data={{"assetID":"-LiAT0pLrROTkSHUw3-6","caption":"Movie graph with labels"}}  key={"76f50dc91e054ac5ac660a4507942897"} ><Text key={"ccb333c5c07040ae8732e67019558ad2"} ></Text></Block><Block type="paragraph"   key={"d39f2a03cfee4a0d9f690feda6958a83"} ><Text key={"852b4260e9d94b2489fb32b415d6c829"} >When we install the algorithm, answer the questions like:</Text></Block><Block type="code"  data={{"syntax":"text"}}  key={"685f1f362a684b688a8dcac58d35c57f"} ><Block type="code-line"   key={"d17141b4245f4fa29a6f97e4c83cda0b"} ><Text key={"66511b088f31439f95c7eea23cb7e5c0"} >Vertex types: Person</Text></Block><Block type="code-line"   key={"0db6302d4d834284a5e5769318d8adf0"} ><Text key={"cbaa499db77243b4b2e78e8b3c19746e"} >Edge types: Likes</Text></Block><Block type="code-line"   key={"75762ddda68e4f2e8f0b3803427bd8e8"} ><Text key={"ce481e206edf4b35a3887ff874e453ec"} >Second Hop Edge type: Reverse_Likes</Text></Block><Block type="code-line"   key={"b73bd556997a47bf9f3882ef7d3a2455"} ><Text key={"8c97ffd446d3434f95768507cde5129b"} >Edge attribute that stores FLOAT weight, leave blank if no such attribute:weight</Text></Block><Block type="code-line"   key={"759977238a0c4a5f8f63835d3974cb03"} ><Text key={"9b94d223b7634ee1a50d401ce41e5ff6"} >Vertex attribute that stores STRING label:known_label</Text></Block></Block><Block type="paragraph"   key={"a40829c8496d4d5abb6e6a6dfebd655d"} ><Text key={"2698e88519ed4e168474c847de119923"} >We then run kNN, using Neil as the source person and k=3. This is the JSON output :</Text></Block><Block type="code"  data={{"syntax":"text"}}  key={"f1d606ab00fa42f3a9b982e190707366"} ><Block type="code-line"   key={"68d3058dd9d446f9aab512d9f5cd5309"} ><Text key={"8ba2362e71c9436ebcfeb354858964dc"} >[</Text></Block><Block type="code-line"   key={"beed96edd2334bf29f8f30b3809ae49e"} ><Text key={"fdef5bb4caac4a11b532d3ff30eacaa5"} >{`  \{`}</Text></Block><Block type="code-line"   key={"0f8add8568604c05bbddb7e9cfc8bf48"} ><Text key={"d236f601fe5940b1818613e74977d4b5"} >    "predicted_label": "a"</Text></Block><Block type="code-line"   key={"b465916811d54f3f887dc5e11b912f28"} ><Text key={"52da67dac70b4990a05721c588b1c221"} >{`  \}`}</Text></Block><Block type="code-line"   key={"b002644879ad4364be08404bd204cdce"} ><Text key={"bd84324bae18402aaf451261af2f0805"} >]</Text></Block></Block><Block type="paragraph"   key={"af6b9be7121c43029294ee8b414d4ea9"} ><Text key={"4b6f6d77c52a407da763f1c3f5162dc5"} >If we run cosine_nbor_ss, using Neil as the source person and k=3, we can see the persons with the top 3 similarity score:</Text></Block><Block type="code"  data={{"syntax":"text"}}  key={"306c5f83f7364135b880539df09059ec"} ><Block type="code-line"   key={"56fbaf07f0664745945a30c285b4129c"} ><Text key={"6e1013496abe44e09ceddf073c5e9a28"} >[</Text></Block><Block type="code-line"   key={"5bf1293a980a49f4b5f7c8f05abef3fc"} ><Text key={"015025b04c1b484189e9e5e48440cb64"} >{`  \{`}</Text></Block><Block type="code-line"   key={"c51cc88a2ac740c59cafdcab41072372"} ><Text key={"255f627992e2446fa7cf4f15cc6a2fcb"} >    "neighbours": [</Text></Block><Block type="code-line"   key={"5e7c2f576678467ca4df51b35456575d"} ><Text key={"e65fd75e4db343b1aa0723adeee3ab9c"} >{`      \{`}</Text></Block><Block type="code-line"   key={"695f4a8a43d04935aa055c5e15fad4ee"} ><Text key={"8cb81750b8a348ef8398d85047792f6f"} >        "v_id": "Kat",</Text></Block><Block type="code-line"   key={"93a6da61251245d7a158fb0b562e9924"} ><Text key={"710ca79923a64b0fa1168adf9e0f9208"} >        "v_type": "Person",</Text></Block><Block type="code-line"   key={"4b214c620b934efbbe9a0f9392c7674d"} ><Text key={"099bce99d39047479aa9dbcee4f49e7b"} >{`        "attributes": \{`}</Text></Block><Block type="code-line"   key={"e63a1d23c24e49e3ba0d5fbc576de7ab"} ><Text key={"7007187385a546d6ac08b2bbc89d69f4"} >          "neighbours.@similarity": 0.67509</Text></Block><Block type="code-line"   key={"58d72c2f61cb46538008ab4edb434680"} ><Text key={"c09ed78f39fc490d8bc9e257b7624100"} >{`        \}`}</Text></Block><Block type="code-line"   key={"620970fa14ac4770a3d2feb68a0c5197"} ><Text key={"73b58a6e94e64599861f477a47bd9fd2"} >{`      \},`}</Text></Block><Block type="code-line"   key={"915ca59e09664e2aa4e598e83507ed55"} ><Text key={"d6a9d088238a4c8ea09305655cfb21d3"} >{`      \{`}</Text></Block><Block type="code-line"   key={"ee386b6837f3425ea2e0d756bdf192ba"} ><Text key={"9dd8597c79d04ee9b4037c401707ef3d"} >        "v_id": "Jing",</Text></Block><Block type="code-line"   key={"3d75f636733240f08d922d14e8ec3a36"} ><Text key={"ee5396a680bd47f3baf553456c062969"} >        "v_type": "Person",</Text></Block><Block type="code-line"   key={"24b050b381994d08a5d9e77bfab75cd7"} ><Text key={"020ec60f3a2843f082fe65f84454efd8"} >{`        "attributes": \{`}</Text></Block><Block type="code-line"   key={"2976656fb5fc44db8aa4b7f2b88fdf42"} ><Text key={"4dbf5e35361a4cf7a6d026dc54a01423"} >          "neighbours.@similarity": 0.46377</Text></Block><Block type="code-line"   key={"66b48087399e4dbeb88a617239766f2b"} ><Text key={"c131d8843b5240d68368816cfd72d26b"} >{`        \}`}</Text></Block><Block type="code-line"   key={"8f099c19e7dc4ae9aa6bd0b4f4e63d07"} ><Text key={"04f4d70951f54ddbb7aa0d2aae822a32"} >{`      \},`}</Text></Block><Block type="code-line"   key={"1e1bd7ad5b4249c4b9c9335d71dcc908"} ><Text key={"4aed7391b53a467294bd1728f337a82c"} >{`      \{`}</Text></Block><Block type="code-line"   key={"7b5e75605ca348399a002a442becea02"} ><Text key={"e6d3b9031f5e4f23a7f81dc997eda2dc"} >        "v_id": "Kevin",</Text></Block><Block type="code-line"   key={"14bb5a9fdd3a4d67917550f9405d47db"} ><Text key={"4cea3c930b574eb2bff994aecd5eb370"} >        "v_type": "Person",</Text></Block><Block type="code-line"   key={"40c0015cdcf3465088affa67a6b291eb"} ><Text key={"e5bc63d3d1d24e62ab776215b9600afa"} >{`        "attributes": \{`}</Text></Block><Block type="code-line"   key={"2701e722da064ce3b6cc36d94ff53c25"} ><Text key={"22e79446e66c40f8aeac27b52a80d1f0"} >          "neighbours.@similarity": 0.42436</Text></Block><Block type="code-line"   key={"74eabb9bd1604692b8ff33d9461c8ecc"} ><Text key={"e92996caa4f248dfaba27d78743efcee"} >{`        \}`}</Text></Block><Block type="code-line"   key={"d86dd292d89c47b49a5a99a0c0e326a6"} ><Text key={"9584cc2ca2f54f96b1216318fdefe36e"} >{`      \}`}</Text></Block><Block type="code-line"   key={"9f55993b913d4240ae7f12007e59209d"} ><Text key={"0c177a8aee184abdb42ee1e230ebb393"} >    ]</Text></Block><Block type="code-line"   key={"ccd2ff42283d4a308e9983defec32989"} ><Text key={"85926c12e8164c2b8df9c3990e878bbe"} >{`  \}`}</Text></Block><Block type="code-line"   key={"87f6535dce2d40f9a27c95f99a3742cd"} ><Text key={"1cf0d5cf867948b386283cc1fbb6e4e0"} >]</Text></Block></Block><Block type="paragraph"   key={"8112e003bfa14d39920093b819808476"} ><Text key={"e181b10b09c74ea7906820408ae3d94e"} >Kat has a label "b", Kevin has a label "a", and Jing does not have a label. Since "a" and "b" is tied, the prediction for Neil is just one of the labels.</Text></Block><Block type="paragraph"   key={"5a0a2fd1b85346018fb06724ad17d091"} ><Text key={"f6047be6ebc34a81bb44e82035650c97"} >If Jing had label "b", then there would be 2 "b"s, so "b" would be the prediction.</Text></Block><Block type="paragraph"   key={"073e964792cc4bd3859e4a9ee616d87b"} ><Text key={"bfeef6c5dca54417a6066d0b61192ac2"} >If Jing had label "a", then there would be 2 "a"s, so "a" would be the prediction.</Text></Block><Block type="paragraph"   key={"9b7a44b917f34f37a1495f92d9ae7667"} ><Text key={"90a02db0735e49d081486d337169cf26"} ></Text></Block><Block type="heading-2"   key={"4c4dfc284b82407fb5e2adff0ba5f08d"} ><Text key={"182b73a307f94898bea7a14db33921f7"} >k-Nearest Neighbors, Cosine Neighbor Similarity, All Vertices Batch</Text></Block><Block type="heading-3"   key={"6852fcfba6824b0aac172996de76c95d"} ><Text key={"5b056447167246728f375bb9c6bc8e3a"} >Description and Uses</Text></Block><Block type="paragraph"   key={"5bf735bb60914a54820084ff7014caf6"} ><Text key={"799f707a31d24073929e0748bb320bc6"} >This algorithm is a batch version of the </Text><Inline type="link"  data={{"href":"https://app.gitbook.com/@tigergraph/s/document/~/edit/drafts/-Ll49vrTnAN15ff3rsHW/v/2.5/graph-algorithm-library#k-nearest-neighbors-cosine-neighbor-similarity-single-vertex"}}  key={"3f9e3d374b96479d898053c1a0e6b75e"} ><Text key={"27a1a5af8c2b49298620a01a39fc1166"} >k-Nearest Neighbors, Cosine Neighbor Similarity, single vertex</Text></Inline><Text key={"d341aa2d2ce24defacbb280a0cf80e0f"} >. It make a prediction for every vertex whose label is not known (i.e., the attribute for the known label is empty), based on its k nearest neighbors' labels.</Text></Block><Block type="heading-3"   key={"8b0b49771dde432da700b803398ee8f4"} ><Text key={"05bc752ae7b44f2c81e5b4688132c111"} >Specifications</Text></Block><Block type="code"  data={{"syntax":"text"}}  key={"dcfdbe6dac0645909da7f277deaf3509"} ><Block type="code-line"   key={"836c4a1f55804b7dbaf9dd51c9d28c1e"} ><Text key={"a2e79995dbed495f9215714ed02fd9b1"} >knn_cosine_all(INT topK)</Text></Block><Block type="code-line"   key={"d7380378f6cb4dc0ad30b365fac48874"} ><Text key={"74d31edb2b1f4fce8ac94cc597cd9a40"} >knn_cosine_all_file(INT topK, FILE f)</Text></Block><Block type="code-line"   key={"311073b5733f45e3b131479483e4867d"} ><Text key={"7bf95c22abc747c58d4e5b85cf95a92e"} >knn_cosine_all_attr(INT topK)</Text></Block></Block><Block type="table"  data={{"aligns":["left","left"]}}  key={"c0ffacde42ed496e8c5edfb1003055e1"} ><Block type="table-row"   key={"4fa2dae294a54351b638c2e1297fe1e0"} ><Block type="table-cell"   key={"940326d15fc34b499d375fd56205b81d"} ><Block type="paragraph"   key={"ee34c5579e524ab9b76bea62d438345b"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"380f17408cfd483cb58844e3123cefea"} >Characteristic</Text></Block></Block><Block type="table-cell"   key={"4516a54d1e4c4fff9af22b594c5c6ec2"} ><Block type="paragraph"   key={"1cb4ab811546467091e531f5ebef10f7"} ><Text key={"07e467f0febe49ae934ccc2a6be76a60"} >Value</Text></Block></Block></Block><Block type="table-row"   key={"0514db64d9e94d8f8e6af8fbfea46458"} ><Block type="table-cell"   key={"af23a602b2014fa48ceb2f6a70a8c0a9"} ><Block type="paragraph"   key={"7c556272e7ea4a24ac71b508f1820aee"} ><Text key={"eec8ef40344148b0942ce0bc4ee7dd52"} >Result</Text></Block></Block><Block type="table-cell"   key={"4126b01b74b9428e8005aa8277695b5f"} ><Block type="paragraph"   key={"68871ad9b97f48be95c1cfa830d60208"} ><Text key={"a4ed943da58d46a2bfc880cd716061af"} >The predicted label for the vertices whose label attribute is empty.</Text></Block><Block type="paragraph"   key={"c7b34fb021734099bcb9649cf1f8f51f"} ><Text key={"e00c59ae1c02418dbd08aff484044379"} >The result is available in three forms:</Text></Block><Block type="list-unordered"   key={"346619ad805e41ba8fa996d781953252"} ><Block type="list-item"   key={"b8c2d2c22fb6472b822627afcb0b3dbf"} ><Block type="paragraph"   key={"4507edec559a4c7094775dfbbe4f39e3"} ><Text key={"836d49ff243b4fd5ba95b0c28c6ad50e"} >streamed out in JSON format</Text></Block></Block><Block type="list-item"   key={"42da876d18644579a7a441a7cdab982e"} ><Block type="paragraph"   key={"e0794da49d1b4a51981f1a26bf14ae68"} ><Text key={"d64c023a3cfe4bb1b75aa2a57160061a"} >written to a file in tabular format, or</Text></Block></Block><Block type="list-item"   key={"4f4d9a6bd6804349a474c26135b9631a"} ><Block type="paragraph"   key={"54ff98b669a9450799437bc42b6a1028"} ><Text key={"a1fd9fa0b3cf45f4b86801582fd41d5e"} >stored as a vertex attribute value.</Text></Block></Block></Block></Block></Block><Block type="table-row"   key={"422658bd35eb49f48431015b9cdf6060"} ><Block type="table-cell"   key={"b7700d90e1e841c28190f490a655f198"} ><Block type="paragraph"   key={"861682731de345fe88578f55da5a9615"} ><Text key={"0bf3d7d7e3024bbfb8c61ab7b973e6d5"} >Input Parameters</Text></Block></Block><Block type="table-cell"   key={"dfb6113bf2f949c0ac76df668bdbf926"} ><Block type="list-unordered"   key={"4ffb0a2a292345c68cdc20ce63864561"} ><Block type="list-item"   key={"62dc4656b28944729e7afa93b3643117"} ><Block type="paragraph"   key={"3d6b46904bba4ccfb326d09b3cf01888"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"45abb06ac5b74ad7ac0937ebd175b444"} >topK</Text><Text key={"45abb06ac5b74ad7ac0937ebd175b444"} >: number of nearest neighbors to consider</Text></Block></Block><Block type="list-item"   key={"133644cd08074ce4a1b46defa6035fad"} ><Block type="paragraph"   key={"3789da951b0d41d98dfc17cacac8a772"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"d43202c4167f4e8584c7ec7dbca8627c"} >filepath</Text><Text key={"d43202c4167f4e8584c7ec7dbca8627c"} > (for file output only): the path to the output file</Text></Block></Block></Block></Block></Block><Block type="table-row"   key={"a25b6c6402e746758a63542447a044fd"} ><Block type="table-cell"   key={"ab3a2cb402c54449b017eaf9a8a2c63c"} ><Block type="paragraph"   key={"01571ccd08bd4ea58d50c94fb8964914"} ><Text key={"5788d25b9fd0459c8291fa1c916db725"} >Result Size</Text></Block></Block><Block type="table-cell"   key={"27456e829743425b854187caa36cd5ba"} ><Block type="paragraph"   key={"ac39832b0af343dc889760e0313e29bd"} ><Text key={"4b6f093344984d5f9ff26ed739dbf3f3"} >V = number of vertices</Text></Block></Block></Block><Block type="table-row"   key={"5d9059c9c4114811bff2b6fbb2293b82"} ><Block type="table-cell"   key={"4d3271cef2a84c7b83f946b9faf2a15d"} ><Block type="paragraph"   key={"455bd588154c4ead993e04b87ab59cff"} ><Text key={"1f7fef0a0f9f440fb2dccff0971bfd92"} >Computational Complexity</Text></Block></Block><Block type="table-cell"   key={"9ee8b9afad224be9a4be4356785cca78"} ><Block type="paragraph"   key={"fd1221a649fd4ce3af79da04f0c024a0"} ><Text key={"5018f8533c63436e86cfe9d443a761d3"} >O(E^2 / V), V = number of vertices, E = number of edges</Text></Block></Block></Block><Block type="table-row"   key={"7e9a96a651fc4dbf9f370efd59a112f0"} ><Block type="table-cell"   key={"552db0ab6db44ddda352f6bbf638531e"} ><Block type="paragraph"   key={"891841fe1f2e4ce6b51b4045e3c47252"} ><Text key={"a653aac0e5bb408db7a7996ff85010c4"} >Graph Types</Text></Block></Block><Block type="table-cell"   key={"e14faab80adf47acb060dbbceea25654"} ><Block type="paragraph"   key={"00597dc8d29742e28d91d7b05231c202"} ><Text key={"c21b4eff76be4d16be3616c773e03c6f"} >Undirected or directed edges, weighted edges</Text></Block></Block></Block></Block><Block type="heading-3"   key={"f2edf2e2decf4ddebdd90c8c7ba188c5"} ><Text key={"a9848df67bf74c129f1870ac4857a342"} >Example</Text></Block><Block type="paragraph"   key={"b16c0f6ed83846bd937ddb8acbb8f74c"} ><Text key={"b681cd383b1a4c929005506541e1ecf4"} >For the movie graph shown in the single vertex version, run knn_cosine_all, using topK=3. Then you get the following result:</Text></Block><Block type="code"  data={{"syntax":"text"}}  key={"f5b8ab16ff1e474a8fbb97b49b992539"} ><Block type="code-line"   key={"7f43373e1e014a9fa137d9e035bfa0c6"} ><Text key={"0b9130f6b8744393b44fad5037b58943"} >{`  \{`}</Text></Block><Block type="code-line"   key={"540f74cdc75c4d57a34152bdcbf55bec"} ><Text key={"a78661b6f8744523a2fe55702ee38d41"} >    "Source": [</Text></Block><Block type="code-line"   key={"2974b97bc4a246aabe06c45af793906f"} ><Text key={"c53de2c07846410f85e2747eed08a177"} >{`      \{`}</Text></Block><Block type="code-line"   key={"4810f8020d69417498e3bf757681f2dc"} ><Text key={"36b27253760d48c3a77d72369553c423"} >        "v_id": "Jing",</Text></Block><Block type="code-line"   key={"091cf9d2e95141beaa28aba62b58c67b"} ><Text key={"699be674fda842dbb042833c6f9e01ae"} >        "v_type": "Person",</Text></Block><Block type="code-line"   key={"61e5549c1913433197d21223ec1090a7"} ><Text key={"24598a34b6b74877a3c64e8d7e5a4a92"} >{`        "attributes": \{`}</Text></Block><Block type="code-line"   key={"75f47800ad624cbe955171fb44d227b7"} ><Text key={"429d06a57735424780181289cdd06b58"} >          "name": "Jing",</Text></Block><Block type="code-line"   key={"4586b9d840c944d0bb0998e5ebfd42e1"} ><Text key={"8cd5f94c46cb4e649cf7952da91be61f"} >          "known_label": "",</Text></Block><Block type="code-line"   key={"b24fb9ca8343414a9b04a9437252e479"} ><Text key={"73254b3a6a684765964ba2d8cb39eb0c"} >          "predicted_label": "",</Text></Block><Block type="code-line"   key={"884c6b900264441ab57dbf587262cc86"} ><Text key={"dad9641a168b4be38043f668466cc595"} >          "@predicted_label": "a"</Text></Block><Block type="code-line"   key={"b856e39873e44b01ba61aab00f9193f5"} ><Text key={"860aa6f5795e4805b4a26cf7e1f30509"} >{`        \}`}</Text></Block><Block type="code-line"   key={"02e3b8c7b1cd4e65aee72480e7df9b63"} ><Text key={"9a6c0a3be7604e25abe3eb945bb0e3a0"} >{`      \},`}</Text></Block><Block type="code-line"   key={"677670f365d2474495d4f355332dab55"} ><Text key={"b6b53684be8243ed81e163efbb36ddc2"} >{`      \{`}</Text></Block><Block type="code-line"   key={"278bfbf278ad43f58c31eda6cbc57201"} ><Text key={"427646a20580499bad7e253e24c9567a"} >        "v_id": "Neil",</Text></Block><Block type="code-line"   key={"3492f91785ac4f10acc68310136576d1"} ><Text key={"7c191f5a85ab41cab5312965cfaedd13"} >        "v_type": "Person",</Text></Block><Block type="code-line"   key={"d376bc801adb446f920477af7b866de3"} ><Text key={"59c59dcdc7c1409b90c064dfc584ed17"} >{`        "attributes": \{`}</Text></Block><Block type="code-line"   key={"39db5a91579a4555a12bf8e01cd4440e"} ><Text key={"85251a19809e4e3692cf834c62fbaae6"} >          "name": "Neil",</Text></Block><Block type="code-line"   key={"042539af5ee4408ea7f278d7418cf910"} ><Text key={"5fc58689d2034fb598bf9fd1b034e8f1"} >          "known_label": "",</Text></Block><Block type="code-line"   key={"c0174367c2a0433ca024dc6d67e77d41"} ><Text key={"a41b07e886164216b3374077d3610c8a"} >          "predicted_label": "",</Text></Block><Block type="code-line"   key={"3f55e63e08644a7da95d97b1a38025ab"} ><Text key={"a270fbe134704133bff0cbe2ba1343fd"} >          "@predicted_label": "b"</Text></Block><Block type="code-line"   key={"81f7d4ab742d47dca7e74e3b35c0f578"} ><Text key={"10a48ae141d54068bde9da0178548acd"} >{`        \}`}</Text></Block><Block type="code-line"   key={"3683c9ffe6564e918841d96a096ee713"} ><Text key={"5d5b27ad5c0f4e03a6aed0e46283fa30"} >{`      \},`}</Text></Block><Block type="code-line"   key={"e52ce276b9524839ad1f4acafe8cc70a"} ><Text key={"863ffbf1fe404dffb90cd608d8af50cf"} >{`      \{`}</Text></Block><Block type="code-line"   key={"9d0f8b8ba9484b28bdd66953ec1c8f9c"} ><Text key={"ff7f511260a94ade9b7fbc5f8f3e2c1a"} >        "v_id": "Elena",</Text></Block><Block type="code-line"   key={"d91d0c2e8edb4b7f93ed86f1c3e5a0e2"} ><Text key={"fc380abfc8ec47e48614766151a9e7bd"} >        "v_type": "Person",</Text></Block><Block type="code-line"   key={"210ca65a26bf41fa98f163633f2df8e2"} ><Text key={"960ce3b480f94d3e877ef65d4db1a704"} >{`        "attributes": \{`}</Text></Block><Block type="code-line"   key={"0aef5fd47d04417289f5b1b880ab5ac1"} ><Text key={"26c6e49c4324484aa183971d6110f98d"} >          "name": "Elena",</Text></Block><Block type="code-line"   key={"6a8cd2a5f2a8438085a93ac5ec00dc7f"} ><Text key={"2e9e03858e09492aabae277d6a750b2a"} >          "known_label": "",</Text></Block><Block type="code-line"   key={"83079fe287e840949bcfe370826e15e9"} ><Text key={"4fa41de157eb4db3aef90fe3a9e1f6d0"} >          "predicted_label": "",</Text></Block><Block type="code-line"   key={"484d40422d7945d08a988e787b65d524"} ><Text key={"415fdd99cd2f427dbd2b3b4b2e09f774"} >          "@predicted_label": ""</Text></Block><Block type="code-line"   key={"20f842399f114a058a81400c6af59179"} ><Text key={"783a1cd0ff72445886617d3b24420144"} >{`        \}`}</Text></Block><Block type="code-line"   key={"3cc91634475c4c98a32bca0ae84c8f8b"} ><Text key={"cdd88efde63b469cb6c1d932fb36f0bf"} >{`      \}`}</Text></Block><Block type="code-line"   key={"a443db3fb80c4f88b653ae5baec19fc1"} ><Text key={"3c7da415adac496d97b785e502531336"} >    ]</Text></Block><Block type="code-line"   key={"536ef68c89af480a8c01ac345f4c303c"} ><Text key={"0981977429a44a4e9a6b13a3a0831327"} >{`  \}`}</Text></Block><Block type="code-line"   key={"58f50444a63b44afb19a3eb23c8b31cf"} ><Text key={"39c82d7b2b1940998e3b53c231d61281"} >]</Text></Block></Block><Block type="heading-2"   key={"e848e5f6d1b24aa881be247faaa67869"} ><Text key={"5f336cf8d1f04780861cb0e236caa977"} >k-Nearest Neighbors, Cosine Neighbor Similarity, cross validation</Text></Block><Block type="heading-3"   key={"fe3e09edc2fa4b72a8d94ef30d095a82"} ><Text key={"b91e695e028c407e8894ffbcf16796a3"} >Description and Uses</Text></Block><Block type="paragraph"   key={"0b7f2c31f7614db989b9701f4d81569b"} ><Text key={"483f34b21f25468699572f32626edb69"} >kNN is often used for machine learning. You can choose the value for </Text><Text marks={[{"kind":"mark","type":"code","data":{}}]}  key={"483f34b21f25468699572f32626edb69"} >topK</Text><Text key={"483f34b21f25468699572f32626edb69"} > based on your experience, or using cross validation to optimize the hyperparameters. In our library, Leave-one-out cross validation for selecting optimal k is provided. Given a k value, we run the algorithm repeatedly using every vertex with known label as the source vertex and predict its label. We assess the accuracy of the predictions for each value of k, and then repeat for different values of k in the given range. The goal is to find the value of k with highest predicting accuracy in the given range, for that dataset.</Text></Block><Block type="heading-3"   key={"4cb17e843386484ab139ab14b614322a"} ><Text key={"4215dac1eac14f5db1027fcfd52189d9"} >Specifications</Text></Block><Block type="code"  data={{"syntax":"text"}}  key={"49e10bdbdde84095b000a29c3974781a"} ><Block type="code-line"   key={"79db427cd73b42438c162a38a8d01dbd"} ><Text key={"fca52dab03364ea5b47153005b2186ef"} >knn_cosine_cv(INT min_k, INT max_k)</Text></Block></Block><Block type="table"  data={{"aligns":["left","left"]}}  key={"0bbc400fa43645a5906c04c61ee513e2"} ><Block type="table-row"   key={"9fa130e54e124d63bf4f0c8a98ed1803"} ><Block type="table-cell"   key={"8d37b790f56c403aa3ab339d619f26f8"} ><Block type="paragraph"   key={"94c11c4561924038ab2a95caa6b4adc1"} ><Text marks={[{"kind":"mark","type":"bold","data":{}}]}  key={"ee8be7c624c747dfb6deffe0e439e567"} >Characteristic</Text></Block></Block><Block type="table-cell"   key={"be4596782f3d465c9ba122dc47217776"} ><Block type="paragraph"   key={"890b7faaee62454da1f3e592d2360193"} ><Text key={"f480955f82c041108270fce0e647130a"} >Value</Text></Block></Block></Block><Block type="table-row"   key={"7ae9632d319f427ab2ef6e3e37525d27"} ><Block type="table-cell"   key={"32c01123c5f54b7c828dadf5b7e33a7f"} ><Block type="paragraph"   key={"74dad398a95142e0ac2a65c8f8d9e35d"} ><Text key={"a77e0107718a4c1292a44ef39c464af0"} >Result</Text></Block></Block><Block type="table-cell"   key={"3d03be92b5f743c4b485d2a89fa8e639"} ><Block type="paragraph"   key={"0b57fe704ce94c01a10d19fd68a5b088"} ><Text key={"c251d892e4cf4c54a45f6e9ebcc5d2e9"} >A list of prediction accuracy for every k value in the give range, and</Text></Block><Block type="paragraph"   key={"b6b782028adf44b5b8a18eb4dd5c7941"} ><Text key={"dcd003b51dd64f798402675a8ae33455"} >the value of k with highest predicting accuracy in the given range.</Text></Block><Block type="paragraph"   key={"103f9c03f67e4a1e81d86288cdc98988"} ><Text key={"e536de6443ee4904bc1120888764bdb1"} >The result is available in JSON format</Text></Block></Block></Block><Block type="table-row"   key={"188234106a2b471fa94bb8dc9ec88d28"} ><Block type="table-cell"   key={"58a16ab4adb84e7fae1a5078e5af2a59"} ><Block type="paragraph"   key={"72725a663aac49e183e67c475e25466a"} ><Text key={"10bc12da65b6483c9af3ec87c2b091e6"} >Input Parameters</Text></Block></Block><Block type="table-cell"   key={"e93584a020c24d89a3c29df49eedb478"} ><Block type="list-unordered"   key={"eae83c69077a4423ade1b726d01832be"} ><Block type="list-item"   key={"57efa961f2114b6ead69b03985670609"} ><Block type="paragraph"   key={"8bd79a3216a34670ba4de8ca013b2739"} ><Text key={"9a3f889d5e6a4ec9b68671725f87a972"} >min_k: lower bound of k (included)</Text></Block></Block><Block type="list-item"   key={"9de981bfd6e549878cd8607c61e1f3ea"} ><Block type="paragraph"   key={"157fe1ecee8345a0ba5614560f4ce910"} ><Text key={"fd4a19646407475f9bd326f4ad212c8c"} >max_k: upper bound of k (included)</Text></Block></Block></Block></Block></Block><Block type="table-row"   key={"bd0a1023e9134c8699e3e77d262b13c1"} ><Block type="table-cell"   key={"679a3b7e08344961985a919c4b6b65a6"} ><Block type="paragraph"   key={"5628f74ccfca4f1bb52a5459ebabdb8f"} ><Text key={"c4eb895058c143c2bd6aacf361e919ac"} >Result Size</Text></Block></Block><Block type="table-cell"   key={"a7411e6a3e2046dabff408e2a236b58a"} ><Block type="paragraph"   key={"4937dd4029074366b5636c1d17708384"} ><Text key={"e17401a03b4e461c82c8ec983857f8de"} >max_k-min_k+1</Text></Block></Block></Block><Block type="table-row"   key={"09c33a2d413042d8b60ffbab6959ea76"} ><Block type="table-cell"   key={"83ac9e27ee0048bcac2c8fc16023af1e"} ><Block type="paragraph"   key={"0c3a47f340ba43c5b09bfdc29d92b59c"} ><Text key={"ee323fde62cb43adb385cc7ef94010f7"} >Computational Complexity</Text></Block></Block><Block type="table-cell"   key={"02beaa3606fa43feb521319adcd71e20"} ><Block type="paragraph"   key={"e47e2cd56ef04fc2b9659550d4b090ef"} ><Text key={"9c9d50ba681a456797bb22620465af8f"} >O(max_k*E^2 / V), V = number of vertices, E = number of edges</Text></Block></Block></Block><Block type="table-row"   key={"b7c0b0349f57468497248357e8208f39"} ><Block type="table-cell"   key={"e075a79edecc4fa18989ba709133aabe"} ><Block type="paragraph"   key={"90d158bb2c284432bd58f093823f1353"} ><Text key={"dc2de33ec57a41aba137d27c8de14d14"} >Graph Types</Text></Block></Block><Block type="table-cell"   key={"a897f811d9db4b04af112ab2c1a2a898"} ><Block type="paragraph"   key={"97fa51dd1d674e3998b421159efaeecf"} ><Text key={"1e2dbd3ad800411cb3af141c31416a23"} >Undirected or directed edges, weighted edges</Text></Block></Block></Block></Block><Block type="heading-3"   key={"31991cd799714dd9b81d0cb60faba8fa"} ><Text key={"cd184b1fe6894ad1a51f0defa7d96952"} >Example</Text></Block><Block type="paragraph"   key={"ae35c653d68e421c9b497026c13abbf7"} ><Text key={"2b4ff13f16434193892cd92d08f4e942"} >Run knn_cosine_cv with min_k=2, max_k = 5. The JOSN result: </Text></Block><Block type="code"  data={{"syntax":"text"}}  key={"91fa03d74a5b4ae0be581c166cac67ee"} ><Block type="code-line"   key={"84526ed3438144d6a78023479a8bd59a"} ><Text key={"e1bcc3ab9ec044219b5511f7c311c726"} >[</Text></Block><Block type="code-line"   key={"441d199c3c1c4445b221a5eef93c19f2"} ><Text key={"2f3d0216e4c04953ae02fa735ba893e0"} >{`  \{`}</Text></Block><Block type="code-line"   key={"9aaa501666474fc68a2ada610463c377"} ><Text key={"77242d558cc048498d1eb1bb7ddb0935"} >    "@@correct_rate_list": [</Text></Block><Block type="code-line"   key={"3812138b4afa4e8bbfb73b201b5fe196"} ><Text key={"7dcaa2bb25634c9bae2e549036928895"} >      0.33333,</Text></Block><Block type="code-line"   key={"de1ca825e9a4439ab408dad3a4206473"} ><Text key={"d8f5467a9bc84dd79398f25746c0b2fe"} >      0.33333,</Text></Block><Block type="code-line"   key={"f8ae015648b6411d90c3cb99b9c1f471"} ><Text key={"00c4467947f546869782dcb7dab9ad22"} >      0.33333,</Text></Block><Block type="code-line"   key={"27d5e82a0802432b98de8604e883fe6c"} ><Text key={"b33cc40450ff40d4925e2bd45917d2a4"} >      0.33333</Text></Block><Block type="code-line"   key={"769bfdb1fce840e6a5b8ff23167ec9bb"} ><Text key={"e0f1a12030bf42d49733f49d69e17a4c"} >    ]</Text></Block><Block type="code-line"   key={"4b31318b9b6d4d50a288452d9631ae2e"} ><Text key={"ecaa89eff3df42d4a96a476bbe365ae8"} >{`  \},`}</Text></Block><Block type="code-line"   key={"55bdb7cce35d41a2b16b3b18cbd79a09"} ><Text key={"c41988de00f54a0b8ef263896805fdb7"} >{`  \{`}</Text></Block><Block type="code-line"   key={"af3c0334c23b4ff8a99ae65565418a77"} ><Text key={"80a0d78bbc1343cda76f4e49e81585a4"} >    "best_k": 2</Text></Block><Block type="code-line"   key={"80d639283754456d8f1796c60c946343"} ><Text key={"43973eae619f4c41926f0d07403a60da"} >{`  \}`}</Text></Block><Block type="code-line"   key={"e773031e78ab46e6b44767ebcb7058c5"} ><Text key={"44a98aaeed194f33a18210d7f91fd28c"} >]</Text></Block></Block><Block type="paragraph"   key={"d87106d0eb8943479ba77bc8ba1df486"} ><Text key={"7b2304c5ce0649b785550ea05cf7dfea"} ></Text></Block><Block type="paragraph"   key={"4995b170af2742d2a8530bd3a8661bd2"} ><Text key={"84796e8b6d7e404697669b44cc02fbf6"} ></Text></Block><Block type="paragraph"   key={"7d2721cad25042d0a55335585a5f269b"} ><Text key={"1c64ff3b281e44e2b4e5d22b82148db4"} ></Text></Block><Block type="paragraph"   key={"741a5319c8b247c59c9e5c850f1cd23c"} ><Text key={"81905030a0ba4dae9cc4b74f8a6c594d"} ></Text></Block></Document></Sider>
}

ReactDOM.render(<App />, document.getElementById('app'));